{"version":3,"file":"static/js/224.3f611e7c.chunk.js","mappings":"wSAOe,SAASA,EAAqBC,GAAkB,IAAjB,WAAEC,GAAYD,EAC1D,MAAOE,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAwBC,IAA6BF,EAAAA,EAAAA,UAAS,KAC9DG,EAA4BC,IAAiCJ,EAAAA,EAAAA,UAAS,KACtEK,EAAsBC,IAA2BN,EAAAA,EAAAA,UAAS,KAC1DO,EAAuBC,IAA4BR,EAAAA,EAAAA,UAAS,KAC5DS,EAAWC,IAAgBV,EAAAA,EAAAA,UAAS,IACpCW,EAAaC,IAAkBZ,EAAAA,EAAAA,UAAS,IACxCa,EAAUC,IAAed,EAAAA,EAAAA,UAAS,KAClCe,EAASC,IAAchB,EAAAA,EAAAA,WAAS,IAEvCiB,EAAAA,EAAAA,YAAU,KACUC,WAChBF,GAAW,GACX,MAAMG,QAAatB,IACfsB,GAAQA,EAAKC,OAAS,GACxBrB,EAAaoB,GACbE,EAAgBF,IAEhBG,QAAQC,IAAI,2BAEdP,GAAW,EAAM,EAGnBQ,EAAW,GACV,CAAC3B,IAEJ,MAAMwB,EAAmBF,IACvB,IAAKA,GAAwB,IAAhBA,EAAKC,OAEhB,YADAE,QAAQC,IAAI,uBAKd,MAAME,EAAmBN,EAAKO,QAAO,CAACC,EAAKC,KACzCD,EAAIC,EAAKC,aAAeF,EAAIC,EAAKC,aAAe,GAAK,EAC9CF,IACN,CAAC,GAEJzB,EAA0B4B,OAAOC,KAAKN,GAAkBO,KAAIC,IAAG,CAC7DC,KAAMD,EACNE,EAAGV,EAAiBQ,QAItB,MAAMG,EAAuBjB,EAAKO,QAAO,CAACC,EAAKC,KAC7CD,EAAIC,EAAKS,iBAAmBV,EAAIC,EAAKS,iBAAmB,GAAK,EACtDV,IACN,CAAC,GAEJvB,EAA8B0B,OAAOC,KAAKK,GAAsBJ,KAAIC,IAAG,CACrEC,KAAMD,EACNE,EAAGC,EAAqBH,QAI1B,MAAMK,EAAiBnB,EAAKO,QAAO,CAACC,EAAKC,KACvCD,EAAIC,EAAKW,WAAaZ,EAAIC,EAAKW,WAAa,GAAK,EAC1CZ,IACN,CAAC,GAEJrB,EAAwBwB,OAAOC,KAAKO,GAAgBN,KAAIC,IAAG,CACzDC,KAAMD,EACNE,EAAGG,EAAeL,QAIpB,MAAMO,EAAkBrB,EAAKO,QAAO,CAACC,EAAKC,KACxCD,EAAIC,EAAKa,cAAgBd,EAAIC,EAAKa,cAAgB,GAAK,EAChDd,IACN,CAAC,GAEJnB,EAAyBsB,OAAOC,KAAKS,GAAiBR,KAAIC,IAAG,CAC3DC,KAAMD,EACNE,EAAGK,EAAgBP,QAIrB,MAAMS,EAAiBvB,EAAKO,QAAO,CAACC,EAAKC,IAASD,GAAOgB,OAAOf,EAAKA,OAAS,IAAI,GAClFlB,EAAagC,GACb,MAAME,EAAmBzB,EAAKC,OAASsB,EAAiBvB,EAAKC,OAAS,EACtER,EAAegC,GAGf,MAAMC,EAAe1B,EAClB2B,MAAK,CAACC,EAAGC,KAAOL,OAAOK,EAAEpB,OAAS,IAAMe,OAAOI,EAAEnB,OAAS,KAC1DqB,MAAM,EAAG,GACZnC,EAAY+B,EAAa,EAGrBK,EAAyB,CAC7BC,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,mCAERC,OAAQ,CACN,CACErB,KAAM,QACNsB,cAAc,EACdrC,KAAMlB,KAKNwD,EAA6B,CACjCN,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,wCAERC,OAAQ,CACN,CACErB,KAAM,QACNsB,cAAc,EACdrC,KAAMhB,KAKNuD,EAAuB,CAC3BP,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,iCAERC,OAAQ,CACN,CACErB,KAAM,QACNsB,cAAc,EACdrC,KAAMd,KAKNsD,EAAwB,CAC5BR,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,8BAERC,OAAQ,CACN,CACErB,KAAM,QACNsB,cAAc,EACdrC,KAAMZ,KAKNqD,EAAuB,CAC3BT,MAAO,CACLC,KAAM,UAERC,MAAO,CACLC,KAAM,eAERC,OAAQ,CACN,CACErB,KAAM,OACNf,KAAMN,EAASmB,KAAIJ,IAAI,CACrBM,KAAMN,EAAKiC,YACX1B,EAAGQ,OAAOf,EAAKA,aAMvB,OACEkC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,WAAY,EAAGC,cAAe,GAAIC,SAAA,EAC/DC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACL,GAAI,CAAEM,MAAO,OAAQC,OAASC,GAAUA,EAAMD,OAAOE,OAAS,GAAKC,KAAM5D,EAAQqD,UACzFC,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,CAACL,MAAM,eAE1BT,EAAAA,EAAAA,MAACe,EAAAA,EAAG,CAACZ,GAAI,CAAEa,QAAS,GAAIV,SAAA,EACtBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAb,SAAC,6BAGtCN,EAAAA,EAAAA,MAACoB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEhB,SAAA,EAEzBC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,gBACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,QAAQN,GAAI,CAAEyB,WAAY,QAAStB,SAAA,CAAC,IAC/DzB,OAAOlC,GAAWkF,QAAQ,OAE9BtB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,QAAOZ,SAAC,mEAMlCC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,iCACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,OAAON,GAAI,CAAEyB,WAAY,QAAStB,SAAA,CAAC,IAC9DzB,OAAOhC,GAAagF,QAAQ,OAEhCtB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,QAAOZ,SAAC,qDAMlCC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,iBACzBC,EAAAA,EAAAA,KAAA,MAAAD,SACGvD,EAASmB,KAAIJ,IACZyC,EAAAA,EAAAA,KAAA,MAAAD,UACEN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,QAAOZ,SAAA,CACxBxC,EAAKiC,YAAY,aAAWlB,OAAOf,EAAKA,MAAM+D,QAAQ,OAFlD/D,EAAKgE,gBAYxBvB,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACwB,IAAe,CAACC,WAAYC,IAAYC,QAAS9C,OAEpDmB,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACwB,IAAe,CAACC,WAAYC,IAAYC,QAASvC,OAEpDY,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACwB,IAAe,CAACC,WAAYC,IAAYC,QAAStC,OAEpDW,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACwB,IAAe,CAACC,WAAYC,IAAYC,QAASrC,OAEpDU,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAGnB,UACxBC,EAAAA,EAAAA,KAACwB,IAAe,CAACC,WAAYC,IAAYC,QAASpC,cAM9D,C","sources":["pages/Analysis/Costs.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function CostAnalysisDashboard({ fetchItems }) {\r\n  const [costsData, setCostsData] = useState([]);\r\n  const [departmentDistribution, setDepartmentDistribution] = useState([]);\r\n  const [allocationTypeDistribution, setAllocationTypeDistribution] = useState([]);\r\n  const [priorityDistribution, setPriorityDistribution] = useState([]);\r\n  const [capexOpexDistribution, setCapexOpexDistribution] = useState([]);\r\n  const [totalCost, setTotalCost] = useState(0);\r\n  const [averageCost, setAverageCost] = useState(0);\r\n  const [topCosts, setTopCosts] = useState([]);\r\n  const [loading, setLoading] = useState(true); // Add loading state\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Start loading\r\n      const data = await fetchItems();\r\n      if (data && data.length > 0) {\r\n        setCostsData(data);\r\n        processCostData(data);\r\n      } else {\r\n        console.log(\"No cost data available.\");\r\n      }\r\n      setLoading(false); // Stop loading\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processCostData = (data) => {\r\n    if (!data || data.length === 0) {\r\n      console.log(\"No data to process.\");\r\n      return;\r\n    }\r\n\r\n    // Department Distribution\r\n    const departmentCounts = data.reduce((acc, cost) => {\r\n      acc[cost.department] = (acc[cost.department] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setDepartmentDistribution(Object.keys(departmentCounts).map(key => ({\r\n      name: key,\r\n      y: departmentCounts[key],\r\n    })));\r\n\r\n    // Allocation Type Distribution\r\n    const allocationTypeCounts = data.reduce((acc, cost) => {\r\n      acc[cost.allocationType] = (acc[cost.allocationType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setAllocationTypeDistribution(Object.keys(allocationTypeCounts).map(key => ({\r\n      name: key,\r\n      y: allocationTypeCounts[key],\r\n    })));\r\n\r\n    // Priority Distribution\r\n    const priorityCounts = data.reduce((acc, cost) => {\r\n      acc[cost.priority] = (acc[cost.priority] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setPriorityDistribution(Object.keys(priorityCounts).map(key => ({\r\n      name: key,\r\n      y: priorityCounts[key],\r\n    })));\r\n\r\n    // Capex/Opex Distribution\r\n    const capexOpexCounts = data.reduce((acc, cost) => {\r\n      acc[cost.capexOrOpex] = (acc[cost.capexOrOpex] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCapexOpexDistribution(Object.keys(capexOpexCounts).map(key => ({\r\n      name: key,\r\n      y: capexOpexCounts[key],\r\n    })));\r\n\r\n    // Total and Average Cost\r\n    const totalCostValue = data.reduce((acc, cost) => acc + (Number(cost.cost) || 0), 0);\r\n    setTotalCost(totalCostValue);\r\n    const averageCostValue = data.length ? totalCostValue / data.length : 0;\r\n    setAverageCost(averageCostValue);\r\n\r\n    // Top 5 Costs\r\n    const topCostsList = data\r\n      .sort((a, b) => (Number(b.cost) || 0) - (Number(a.cost) || 0))\r\n      .slice(0, 5);\r\n    setTopCosts(topCostsList);\r\n  };\r\n\r\n  const departmentChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Cost Distribution by Department',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Costs',\r\n        colorByPoint: true,\r\n        data: departmentDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const allocationTypeChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Cost Distribution by Allocation Type',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Costs',\r\n        colorByPoint: true,\r\n        data: allocationTypeDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const priorityChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Cost Distribution by Priority',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Costs',\r\n        colorByPoint: true,\r\n        data: priorityDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const capexOpexChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Capex vs Opex Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Costs',\r\n        colorByPoint: true,\r\n        data: capexOpexDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const topCostsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Top 5 Costs',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Cost',\r\n        data: topCosts.map(cost => ({\r\n          name: cost.description,\r\n          y: Number(cost.cost),\r\n        })),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Cost Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Cost</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${Number(totalCost).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total cost across all allocations.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Cost per Allocation</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${Number(averageCost).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This is the average cost per allocation.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Costs</Typography>\r\n                <ol>\r\n                  {topCosts.map(cost => (\r\n                    <li key={cost.id}>\r\n                      <Typography variant=\"body2\">\r\n                        {cost.description} - Cost: ${Number(cost.cost).toFixed(2)}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={departmentChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={allocationTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={priorityChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={capexOpexChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={topCostsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["CostAnalysisDashboard","_ref","fetchItems","costsData","setCostsData","useState","departmentDistribution","setDepartmentDistribution","allocationTypeDistribution","setAllocationTypeDistribution","priorityDistribution","setPriorityDistribution","capexOpexDistribution","setCapexOpexDistribution","totalCost","setTotalCost","averageCost","setAverageCost","topCosts","setTopCosts","loading","setLoading","useEffect","async","data","length","processCostData","console","log","fetchData","departmentCounts","reduce","acc","cost","department","Object","keys","map","key","name","y","allocationTypeCounts","allocationType","priorityCounts","priority","capexOpexCounts","capexOrOpex","totalCostValue","Number","averageCostValue","topCostsList","sort","a","b","slice","departmentChartOptions","chart","type","title","text","series","colorByPoint","allocationTypeChartOptions","priorityChartOptions","capexOpexChartOptions","topCostsChartOptions","description","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","id","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}