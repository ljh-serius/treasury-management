{"version":3,"file":"static/js/78644.73709162.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/AccountsPayable/CreditorsLedger.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function CreditorsLedgerAnalysisDashboard({ fetchItems }) {\r\n  const [ledgerData, setLedgerData] = useState([]);\r\n  const [currencyDistribution, setCurrencyDistribution] = useState([]);\r\n  const [transactionTypeDistribution, setTransactionTypeDistribution] = useState([]);\r\n  const [overdueStatusDistribution, setOverdueStatusDistribution] = useState([]);\r\n  const [totalAmount, setTotalAmount] = useState(0);\r\n  const [totalBalance, setTotalBalance] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setLedgerData(data);\r\n      processLedgerData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processLedgerData = (data) => {\r\n    // Currency Distribution\r\n    const currencyCounts = data.reduce((acc, ledger) => {\r\n      acc[ledger.currency] = (acc[ledger.currency] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCurrencyDistribution(Object.keys(currencyCounts).map(key => ({\r\n      name: key,\r\n      y: currencyCounts[key],\r\n    })));\r\n\r\n    // Transaction Type Distribution\r\n    const transactionTypeCounts = data.reduce((acc, ledger) => {\r\n      acc[ledger.transactionType] = (acc[ledger.transactionType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setTransactionTypeDistribution(Object.keys(transactionTypeCounts).map(key => ({\r\n      name: key,\r\n      y: transactionTypeCounts[key],\r\n    })));\r\n\r\n    // Overdue Status Distribution\r\n    const overdueStatusCounts = data.reduce((acc, ledger) => {\r\n      acc[ledger.overdueStatus] = (acc[ledger.overdueStatus] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setOverdueStatusDistribution(Object.keys(overdueStatusCounts).map(key => ({\r\n      name: key === 'yes' ? 'Overdue' : 'Not Overdue',\r\n      y: overdueStatusCounts[key],\r\n    })));\r\n\r\n    // Total Amounts and Balances\r\n    const totals = data.reduce(\r\n      (acc, ledger) => {\r\n        acc.amount += Number(ledger.amount) || 0;\r\n        acc.balance += Number(ledger.balance) || 0;\r\n        return acc;\r\n      },\r\n      { amount: 0, balance: 0 }\r\n    );\r\n\r\n    setTotalAmount(totals.amount);\r\n    setTotalBalance(totals.balance);\r\n  };\r\n\r\n  const currencyChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Currency Distribution' },\r\n    series: [{ name: 'Currencies', colorByPoint: true, data: currencyDistribution }],\r\n  };\r\n\r\n  const transactionTypeChartOptions = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'Transaction Type Distribution' },\r\n    series: [{ name: 'Transaction Types', data: transactionTypeDistribution }],\r\n  };\r\n\r\n  const overdueStatusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Overdue Status Distribution' },\r\n    series: [{ name: 'Overdue Status', colorByPoint: true, data: overdueStatusDistribution }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Creditors Ledger Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalAmount.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  Total amount across all ledger transactions.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Balance</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalBalance.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  Total outstanding balance across all ledger transactions.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={currencyChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={transactionTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={overdueStatusChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["CreditorsLedgerAnalysisDashboard","_ref","fetchItems","ledgerData","setLedgerData","useState","currencyDistribution","setCurrencyDistribution","transactionTypeDistribution","setTransactionTypeDistribution","overdueStatusDistribution","setOverdueStatusDistribution","totalAmount","setTotalAmount","totalBalance","setTotalBalance","loading","setLoading","useEffect","async","data","processLedgerData","fetchData","currencyCounts","reduce","acc","ledger","currency","Object","keys","map","key","name","y","transactionTypeCounts","transactionType","overdueStatusCounts","overdueStatus","totals","amount","Number","balance","currencyChartOptions","chart","type","title","text","series","colorByPoint","transactionTypeChartOptions","overdueStatusChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}