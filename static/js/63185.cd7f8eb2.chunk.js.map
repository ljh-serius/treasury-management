{"version":3,"file":"static/js/63185.cd7f8eb2.chunk.js","mappings":"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","sources":["pages/Analysis/MergersAcquisitions/MAStrategy/TargetIdentification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst TargetIdentificationAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response || []); // Ensure data is an array\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // KPIs\r\n  const totalMarketValue = data.reduce((sum, record) => sum + Number(record.marketValue), 0);\r\n  const totalRevenue = data.reduce((sum, record) => sum + Number(record.revenue), 0);\r\n  const totalEmployeeCount = data.reduce((sum, record) => sum + Number(record.employeeCount), 0);\r\n\r\n  // Industry Distribution\r\n  const industryMap = data.reduce((acc, record) => {\r\n    acc[record.industry] = (acc[record.industry] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const industryDistribution = Object.keys(industryMap).map(industry => ({\r\n    name: industry,\r\n    y: industryMap[industry],\r\n  }));\r\n\r\n  // Highcharts options for Industry Distribution\r\n  const industryChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Industry Distribution' },\r\n    series: [{\r\n      name: 'Industries',\r\n      colorByPoint: true,\r\n      data: industryDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Market Value over Time\r\n  const marketValueChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Market Value Over Time' },\r\n    xAxis: {\r\n      categories: data.map(record => new Date(record.identificationDate).getFullYear()),\r\n      title: { text: 'Year' }\r\n    },\r\n    yAxis: { title: { text: 'Market Value' } },\r\n    series: [{\r\n      name: 'Market Value',\r\n      data: data.map(record => record.marketValue),\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Market Value</Typography>\r\n          <Typography variant=\"h4\">${totalMarketValue.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Revenue</Typography>\r\n          <Typography variant=\"h4\">${totalRevenue.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Employee Count</Typography>\r\n          <Typography variant=\"h4\">{totalEmployeeCount}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={industryChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={marketValueChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.companyName}:</Typography>\r\n              {Array.isArray(record.tags) ? record.tags.map((tag, tagIndex) => (\r\n                <Chip key={tagIndex} label={tag.label} style={{ margin: '5px' }} />\r\n              )) : 'No Tags'}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TargetIdentificationAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalMarketValue","reduce","sum","record","Number","marketValue","totalRevenue","revenue","totalEmployeeCount","employeeCount","industryMap","acc","industry","industryChartOptions","chart","type","title","text","series","name","colorByPoint","Object","keys","map","y","marketValueChartOptions","xAxis","categories","Date","identificationDate","getFullYear","yAxis","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","toFixed","HighchartsReact","highcharts","Highcharts","options","index","companyName","Array","isArray","tags","tag","tagIndex","Chip","label","style","margin"],"sourceRoot":""}