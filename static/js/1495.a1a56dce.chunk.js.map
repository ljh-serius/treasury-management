{"version":3,"file":"static/js/1495.a1a56dce.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/GeneralLedger/TrialBalance.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function TrialBalanceDashboard({ fetchItems }) {\r\n  const [trialBalanceData, setTrialBalanceData] = useState([]);\r\n  const [currencyDistribution, setCurrencyDistribution] = useState([]);\r\n  const [debitsVsCredits, setDebitsVsCredits] = useState([]);\r\n  const [netBalanceOverTime, setNetBalanceOverTime] = useState([]);\r\n  const [tagsDistribution, setTagsDistribution] = useState([]);\r\n  const [totalAccounts, setTotalAccounts] = useState(0);\r\n  const [totalDebit, setTotalDebit] = useState(0);\r\n  const [totalCredit, setTotalCredit] = useState(0);\r\n  const [netBalance, setNetBalance] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setTrialBalanceData(data);\r\n      processTrialBalanceData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processTrialBalanceData = (data) => {\r\n    // Total Number of Accounts\r\n    setTotalAccounts(data.length);\r\n\r\n    // Total Debit and Credit\r\n    const totals = data.reduce(\r\n      (acc, account) => {\r\n        acc.debit += Number(account.debit) || 0;\r\n        acc.credit += Number(account.credit) || 0;\r\n        return acc;\r\n      },\r\n      { debit: 0, credit: 0 }\r\n    );\r\n\r\n    setTotalDebit(totals.debit);\r\n    setTotalCredit(totals.credit);\r\n    setNetBalance(totals.debit - totals.credit);\r\n\r\n    // Accounts by Currency\r\n    const currencyCounts = data.reduce((acc, account) => {\r\n      acc[account.currency] = (acc[account.currency] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCurrencyDistribution(Object.keys(currencyCounts).map(key => ({\r\n      name: key,\r\n      y: currencyCounts[key],\r\n    })));\r\n\r\n    // Debits vs. Credits by Account\r\n    const debitsCredits = data.map(account => ({\r\n      name: account.accountId,\r\n      debit: Number(account.debit) || 0,\r\n      credit: Number(account.credit) || 0,\r\n    }));\r\n\r\n    setDebitsVsCredits(debitsCredits);\r\n\r\n    // Net Balance Over Time\r\n    const balanceOverTime = data.reduce((acc, account) => {\r\n      const month = new Date(account.createdDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + (Number(account.debit) - Number(account.credit));\r\n      return acc;\r\n    }, {});\r\n\r\n    setNetBalanceOverTime(Object.keys(balanceOverTime).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: balanceOverTime[key],\r\n    })));\r\n\r\n    // Tags Distribution\r\n    const tagsCounts = data.reduce((acc, account) => {\r\n      account.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagsDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const currencyChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Accounts by Currency',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Currencies',\r\n        colorByPoint: true,\r\n        data: currencyDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const debitsVsCreditsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Total Debit and Credit',\r\n    },\r\n    xAxis: {\r\n      categories: ['Debit', 'Credit'],\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Amount',\r\n        data: [totalDebit, totalCredit],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const netBalanceChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Net Balance Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: netBalanceOverTime.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Net Balance',\r\n        data: netBalanceOverTime.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const debitsCreditsByAccountChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Debits vs. Credits by Account',\r\n    },\r\n    xAxis: {\r\n      categories: debitsVsCredits.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Debits',\r\n        data: debitsVsCredits.map(data => data.debit),\r\n      },\r\n      {\r\n        name: 'Credits',\r\n        data: debitsVsCredits.map(data => data.credit),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const tagsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Tags Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Tags',\r\n        data: tagsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Trial Balance Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Accounts</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalAccounts}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Debit</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalDebit.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Credit</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalCredit.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Net Balance</Typography>\r\n                <Typography variant=\"h4\" color=\"purple\" sx={{ fontWeight: 'bold' }}>\r\n                  ${netBalance.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={currencyChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={debitsVsCreditsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={netBalanceChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={debitsCreditsByAccountChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["TrialBalanceDashboard","_ref","fetchItems","trialBalanceData","setTrialBalanceData","useState","currencyDistribution","setCurrencyDistribution","debitsVsCredits","setDebitsVsCredits","netBalanceOverTime","setNetBalanceOverTime","tagsDistribution","setTagsDistribution","totalAccounts","setTotalAccounts","totalDebit","setTotalDebit","totalCredit","setTotalCredit","netBalance","setNetBalance","loading","setLoading","useEffect","async","data","processTrialBalanceData","fetchData","length","totals","reduce","acc","account","debit","Number","credit","currencyCounts","currency","Object","keys","map","key","name","y","debitsCredits","accountId","balanceOverTime","month","Date","createdDate","getMonth","tagsCounts","tags","forEach","tag","currencyChartOptions","chart","type","title","text","series","colorByPoint","debitsVsCreditsChartOptions","xAxis","categories","netBalanceChartOptions","debitsCreditsByAccountChartOptions","tagsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}