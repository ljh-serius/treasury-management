{"version":3,"file":"static/js/856.84fa765d.chunk.js","mappings":"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","sources":["pages/Analysis/Products.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function ProductAnalysisDashboard({ fetchItems }) {\r\n  const [productsData, setProductsData] = useState([]);\r\n  const [categoryDistribution, setCategoryDistribution] = useState([]);\r\n  const [supplierDistribution, setSupplierDistribution] = useState([]);\r\n  const [stockLevelDistribution, setStockLevelDistribution] = useState([]);\r\n  const [priceTrendsData, setPriceTrendsData] = useState([]);\r\n  const [overallStockLevel, setOverallStockLevel] = useState(0);\r\n  const [totalInventoryValue, setTotalInventoryValue] = useState(0);\r\n  const [topProducts, setTopProducts] = useState([]);\r\n  const [loading, setLoading] = useState(true); // Add loading state\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Start loading\r\n      const data = await fetchItems();\r\n      setProductsData(data);\r\n      processProductData(data);\r\n      setLoading(false); // Stop loading\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processProductData = (data) => {\r\n    // Category Distribution\r\n    const categoryCounts = data.reduce((acc, product) => {\r\n      acc[product.category] = (acc[product.category] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCategoryDistribution(Object.keys(categoryCounts).map(key => ({\r\n      name: key,\r\n      y: categoryCounts[key],\r\n      productNames: data.filter(product => product.category === key).map(product => product.name).join(', '),\r\n    })));\r\n\r\n    // Supplier Distribution\r\n    const supplierCounts = data.reduce((acc, product) => {\r\n      acc[product.supplier] = (acc[product.supplier] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setSupplierDistribution(Object.keys(supplierCounts).map(key => ({\r\n      name: key,\r\n      y: supplierCounts[key],\r\n      productNames: data.filter(product => product.supplier === key).map(product => product.name).join(', '),\r\n    })));\r\n\r\n    // Stock Level Distribution with Binning\r\n    const stockBins = {\r\n      '0-10': 0,\r\n      '11-50': 0,\r\n      '51-100': 0,\r\n      '101-500': 0,\r\n      '501-1000': 0,\r\n      '1001+': 0,\r\n    };\r\n\r\n    data.forEach(product => {\r\n      const stock = product.stock;\r\n      if (stock >= 0 && stock <= 10) {\r\n        stockBins['0-10'] += 1;\r\n      } else if (stock >= 11 && stock <= 50) {\r\n        stockBins['11-50'] += 1;\r\n      } else if (stock >= 51 && stock <= 100) {\r\n        stockBins['51-100'] += 1;\r\n      } else if (stock >= 101 && stock <= 500) {\r\n        stockBins['101-500'] += 1;\r\n      } else if (stock >= 501 && stock <= 1000) {\r\n        stockBins['501-1000'] += 1;\r\n      } else if (stock > 1000) {\r\n        stockBins['1001+'] += 1;\r\n      }\r\n    });\r\n\r\n    setStockLevelDistribution(Object.keys(stockBins).map(key => ({\r\n      name: key,\r\n      y: stockBins[key],\r\n    })));\r\n\r\n    // Price Trends Data (Monthly trends of average price)\r\n    const priceTrends = data.reduce((acc, product) => {\r\n      const month = new Date(product.salesStartDate).getMonth() + 1; // Get month from date\r\n      acc[month] = (acc[month] || { sum: 0, count: 0 });\r\n      acc[month].sum += product.price;\r\n      acc[month].count += 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setPriceTrendsData(Object.keys(priceTrends).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: priceTrends[key].sum / priceTrends[key].count,\r\n    })));\r\n\r\n    // Total Inventory Value\r\n    const totalValue = data.reduce((acc, product) => acc + (product.price * product.stock), 0);\r\n    setTotalInventoryValue(totalValue);\r\n\r\n    // Overall Stock Level\r\n    const totalStock = data.reduce((acc, product) => acc + product.stock, 0);\r\n    setOverallStockLevel(totalStock);\r\n\r\n    // Top 5 Products by Stock Level\r\n    const topProductsList = data\r\n      .sort((a, b) => b.stock - a.stock)\r\n      .slice(0, 5);\r\n    setTopProducts(topProductsList);\r\n  };\r\n\r\n  const categoryChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Product Category Distribution',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '{point.name}: <b>{point.y}</b><br/>Products: {point.productNames}'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Products',\r\n        colorByPoint: true,\r\n        data: categoryDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const supplierChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Supplier Distribution',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '{point.name}: <b>{point.y}</b><br/>Products: {point.productNames}'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Products',\r\n        colorByPoint: true,\r\n        data: supplierDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const stockLevelChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Stock Level Distribution',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '{point.name}: <b>{point.y}</b> products'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Stock Levels',\r\n        data: stockLevelDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const priceTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Price Trends Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: priceTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Average Price',\r\n        data: priceTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Product Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Inventory Value</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalInventoryValue.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total value of all products in stock.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Overall Stock Level</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {overallStockLevel}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total quantity of all products in stock.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Products by Stock</Typography>\r\n                <ol>\r\n                  {topProducts.map(product => (\r\n                    <li key={product.sku}>\r\n                      <Typography variant=\"body2\">\r\n                        {product.name} - Stock: {product.stock} - Price: ${Number(product.price || 0).toFixed(2)}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={categoryChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={supplierChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={stockLevelChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={priceTrendsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ProductAnalysisDashboard","_ref","fetchItems","productsData","setProductsData","useState","categoryDistribution","setCategoryDistribution","supplierDistribution","setSupplierDistribution","stockLevelDistribution","setStockLevelDistribution","priceTrendsData","setPriceTrendsData","overallStockLevel","setOverallStockLevel","totalInventoryValue","setTotalInventoryValue","topProducts","setTopProducts","loading","setLoading","useEffect","async","data","processProductData","fetchData","categoryCounts","reduce","acc","product","category","Object","keys","map","key","name","y","productNames","filter","join","supplierCounts","supplier","stockBins","forEach","stock","priceTrends","month","Date","salesStartDate","getMonth","sum","count","price","totalValue","totalStock","topProductsList","sort","a","b","slice","categoryChartOptions","chart","type","title","text","tooltip","pointFormat","series","colorByPoint","supplierChartOptions","stockLevelChartOptions","priceTrendsChartOptions","xAxis","categories","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","Number","sku","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}