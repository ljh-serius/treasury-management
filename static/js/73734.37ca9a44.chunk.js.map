{"version":3,"file":"static/js/73734.37ca9a44.chunk.js","mappings":"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","sources":["pages/Analysis/EnvironmentalSocialGovernance/EnergyManagement/EnergySavingsTracking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst EnergySavingsAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response || []); // Ensure data is an array\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // Calculate KPIs\r\n  const totalSavings = data.reduce((sum, record) => sum + (Number(record.totalSavings) || 0), 0);\r\n  const totalCostSavings = data.reduce((sum, record) => sum + (Number(record.costSavings) || 0), 0);\r\n  const averageReduction = data.length > 0 \r\n    ? data.reduce((sum, record) => sum + (Number(record.achievedReduction) || 0), 0) / data.length\r\n    : 0;\r\n\r\n  // Highcharts options for total savings over the years\r\n  const totalSavingsChartOptions = {\r\n    title: { text: 'Total Energy Savings Over the Years' },\r\n    xAxis: { categories: data.map((record) => record.year || 'Unknown') },\r\n    yAxis: { title: { text: 'Total Savings (MWh)' } },\r\n    series: [{ name: 'Total Savings (MWh)', data: data.map((record) => Number(record.totalSavings) || 0) }],\r\n  };\r\n\r\n  // Highcharts options for cost savings over the years\r\n  const costSavingsChartOptions = {\r\n    title: { text: 'Cost Savings Over the Years' },\r\n    xAxis: { categories: data.map((record) => record.year || 'Unknown') },\r\n    yAxis: { title: { text: 'Cost Savings' } },\r\n    series: [{ name: 'Cost Savings', data: data.map((record) => Number(record.costSavings) || 0) }],\r\n  };\r\n\r\n  // Highcharts options for achieved reduction vs target\r\n  const reductionChartOptions = {\r\n    title: { text: 'Achieved Reduction vs Reduction Target' },\r\n    xAxis: { categories: data.map((record) => record.year || 'Unknown') },\r\n    yAxis: { title: { text: 'Reduction (%)' } },\r\n    series: [\r\n      { name: 'Reduction Target (%)', data: data.map((record) => Number(record.reductionTarget) || 0) },\r\n      { name: 'Achieved Reduction (%)', data: data.map((record) => Number(record.achievedReduction) || 0) },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Energy Savings (MWh)</Typography>\r\n          <Typography variant=\"h4\">{totalSavings.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Cost Savings</Typography>\r\n          <Typography variant=\"h4\">${totalCostSavings.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Average Achieved Reduction (%)</Typography>\r\n          <Typography variant=\"h4\">{averageReduction.toFixed(2)}%</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={totalSavingsChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={costSavingsChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={reductionChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.year}:</Typography>\r\n              {Array.isArray(record.tags) ? record.tags.map((tag, tagIndex) => (\r\n                <Chip key={tagIndex} label={tag.label} style={{ margin: '5px' }} />\r\n              )) : 'No Tags'}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default EnergySavingsAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalSavings","reduce","sum","record","Number","totalCostSavings","costSavings","averageReduction","length","achievedReduction","totalSavingsChartOptions","title","text","xAxis","categories","map","year","yAxis","series","name","costSavingsChartOptions","reductionChartOptions","reductionTarget","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","toFixed","HighchartsReact","highcharts","Highcharts","options","index","Array","isArray","tags","tag","tagIndex","Chip","label","style","margin"],"sourceRoot":""}