{"version":3,"file":"static/js/3226.92493a90.chunk.js","mappings":"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","sources":["components/Management/Entities.js"],"sourcesContent":["import {\r\n    fetchDocuments,\r\n    addDocument,\r\n    updateDocument,\r\n    deleteDocument,\r\n    fetchDocumentsBySelectValue,\r\n    fetchDocumentsByFieldValue,\r\n    fetchDocumentById\r\n} from '../../utils/firebaseCrudHelpers';\r\n\r\nconst getEntitiesOptions = async (types) => {\r\n  console.log(\"launched NOW\")\r\n  return (await fetchItems()).filter((entity) => {\r\n    return types.includes(entity.type);\r\n  }).map((entity) => {\r\n    return {\r\n      id: entity.id,\r\n      label: entity.name\r\n    }\r\n  });\r\n}\r\n\r\nexport const fieldsConfig = {\r\n  entityId: { label: 'Cost ID', type: 'text', faker: 'datatype.uuid' },\r\n  entityName: { label: 'Cost Name', type: 'text', faker: 'name.fullName' },\r\n  name: { label: 'name', type: 'text', faker: 'company.name' },\r\n  type: {\r\n    label: 'Type',\r\n    type: 'select',\r\n    options: [\r\n      {\r\n        id: 'store',\r\n        label: 'Store'\r\n      },\r\n      {\r\n        id: 'agency',\r\n        label: 'Agency'\r\n      },\r\n      {\r\n        id: 'department',\r\n        label: 'Department'\r\n      },\r\n      {\r\n        id: 'service',\r\n        label: 'Service'\r\n      },\r\n      {\r\n        id: 'organization',\r\n        label: 'Organization'\r\n      },\r\n    ],\r\n    multiple: false,\r\n    faker: 'random.arrayElement'\r\n  },\r\n  entityId: { label: 'Entity ID', type: 'text', faker: 'datatype.uuid' },\r\n  parentId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['store', 'agency', 'department', 'service', 'organization']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n        return await getEntitiesOptions(['store', 'agency', 'department', 'service', 'organization']);\r\n    }\r\n  },\r\n  storeId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['store']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['store']);\r\n    }\r\n  },\r\n  agencyId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['agency']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['agency']);\r\n    }\r\n  },\r\n  departmentId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['department']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['department']);\r\n    }\r\n  },\r\n  serviceId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['service']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['service']);\r\n    }\r\n  },\r\n  orgnizationId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['organization']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['organization']);\r\n    }\r\n  },\r\n  locationId: { label: 'Location ID', type: 'text', faker: 'datatype.uuid' },\r\n  regionId: { label: 'Region ID', type: 'text', faker: 'datatype.uuid' },\r\n  countryId: { label: 'Country ID', type: 'text', faker: 'address.countryCode' },\r\n  managerId: {\r\n    label: 'Manager ID',\r\n    type: 'select',\r\n    options: [], // Populated with relevant managers\r\n    multiple: false,\r\n    faker: 'random.arrayElement'\r\n  },\r\n  status: {\r\n    label: 'Status',\r\n    type: 'select',\r\n    options: [\r\n      { id: 'active', label: 'Active' },\r\n      { id: 'inactive', label: 'Inactive' }\r\n    ],\r\n    faker: 'random.arrayElement'\r\n  },\r\n  creationDate: { label: 'Creation Date', type: 'date', faker: 'date.past' },\r\n  modifiedDate: { label: 'Modified Date', type: 'date', faker: 'date.recent' },\r\n  notes: { label: 'Notes', type: 'text', faker: 'lorem.paragraph' },\r\n};\r\n\r\nexport const headCells = Object.keys(fieldsConfig).map(key => ({\r\n  id: key,\r\n  label: fieldsConfig[key].label,\r\n}));\r\n\r\nexport const entityName = 'Entities';\r\n\r\nexport async function fetchItems() {\r\n    return await fetchDocuments('entities');\r\n}\r\n\r\nexport const addItem = (item) => addDocument('entities', item);\r\nexport const updateItem = (id, item) => updateDocument('entities', id, item);\r\nexport const deleteItem = (id) => deleteDocument('entities', id);\r\n\r\n  \r\nexport async function fetchItemById(id) {\r\n  return await fetchDocumentById('entities', id);\r\n}\r\n"],"names":["getEntitiesOptions","async","console","log","fetchItems","filter","entity","types","includes","type","map","id","label","name","fieldsConfig","entityId","faker","entityName","options","multiple","parentId","refreshOptions","storeId","agencyId","departmentId","serviceId","orgnizationId","locationId","regionId","countryId","managerId","status","creationDate","modifiedDate","notes","headCells","Object","keys","key","fetchDocuments","addItem","item","addDocument","updateItem","updateDocument","deleteItem","deleteDocument","fetchItemById","fetchDocumentById"],"sourceRoot":""}