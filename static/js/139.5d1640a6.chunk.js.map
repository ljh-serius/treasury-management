{"version":3,"file":"static/js/139.5d1640a6.chunk.js","mappings":"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","sources":["components/Management/Costs.js","utils/firebaseCrudHelpers.js"],"sourcesContent":["import {\r\n    fetchDocuments,\r\n    addDocument,\r\n    updateDocument,\r\n    deleteDocument,\r\n    fetchDocumentsBySelectValue,\r\n    fetchDocumentsByFieldValue,\r\n    fetchDocumentById\r\n} from '../../utils/firebaseCrudHelpers';\r\n\r\nexport const fieldsConfig = {\r\n    costId: { label: 'Cost ID', type: 'text', faker: 'datatype.uuid' },\r\n    costName: { label: 'Cost Name', type: 'text', faker: 'company.name' },\r\n    cost: { label: 'Cost', type: 'number', faker: 'finance.amount' },\r\n    description: { label: 'Description', type: 'text', faker: 'lorem.sentence' },\r\n    allocationDate: { label: 'Allocation Date', type: 'date', faker: 'date.past' },\r\n    allocationType: {\r\n        label: 'Allocation Type',\r\n        type: 'select',\r\n        options: [\r\n            { id: '1', label: 'Type 1' },\r\n            { id: '2', label: 'Type 2' },\r\n            { id: '3', label: 'Type 3' }\r\n        ],\r\n        faker: 'random.arrayElement'\r\n    },\r\n    notes: { label: 'Notes', type: 'text', faker: 'lorem.paragraph' },\r\n    department: {\r\n        label: 'Department',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'finance', label: 'Finance' },\r\n            { id: 'hr', label: 'Human Resources' },\r\n            { id: 'it', label: 'IT' }\r\n        ],\r\n        faker: 'random.arrayElement'\r\n    },\r\n    priority: {\r\n        label: 'Priority',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'high', label: 'High' },\r\n            { id: 'medium', label: 'Medium' },\r\n            { id: 'low', label: 'Low' }\r\n        ],\r\n        faker: 'random.arrayElement'\r\n    },\r\n    status: {\r\n        label: 'Status',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'active', label: 'Active' },\r\n            { id: 'inactive', label: 'Inactive' }\r\n        ],\r\n        faker: 'random.arrayElement'\r\n    },\r\n    duration: { label: 'Duration', type: 'number', faker: 'datatype.number' },\r\n    currency: { label: 'Currency', type: 'text', faker: 'finance.currencyCode' },\r\n    approvedBy: { label: 'Approved By', type: 'text', faker: 'name.fullName' },\r\n    allocationCode: { label: 'Allocation Code', type: 'text', faker: 'datatype.uuid' },\r\n    fundingSource: { label: 'Funding Source', type: 'text', faker: 'company.name' },\r\n    costCenter: { label: 'Cost Center', type: 'text', faker: 'commerce.department' },\r\n    budgetCode: { label: 'Budget Code', type: 'text', faker: 'finance.bic' },\r\n    financialYear: { label: 'Financial Year', type: 'number', faker: 'date.past' },\r\n    quarter: {\r\n        label: 'Quarter',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'q1', label: 'Q1' },\r\n            { id: 'q2', label: 'Q2' },\r\n            { id: 'q3', label: 'Q3' },\r\n            { id: 'q4', label: 'Q4' }\r\n        ],\r\n        faker: 'random.arrayElement'\r\n    },\r\n    allocationMethod: { label: 'Allocation Method', type: 'text', faker: 'lorem.word' },\r\n    roiEstimate: { label: 'ROI Estimate', type: 'number', faker: 'datatype.float' },\r\n    taxImplications: { label: 'Tax Implications', type: 'text', faker: 'lorem.sentence' },\r\n    capexOrOpex: {\r\n        label: 'Capex/Opex',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'capex', label: 'Capex' },\r\n            { id: 'opex', label: 'Opex' }\r\n        ],\r\n        faker: 'random.arrayElement'\r\n    },\r\n    riskAssessment: { label: 'Risk Assessment', type: 'text', faker: 'lorem.sentence' },\r\n    complianceStatus: {\r\n        label: 'Compliance Status',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'compliant', label: 'Compliant' },\r\n            { id: 'non_compliant', label: 'Non-compliant' }\r\n        ],\r\n        faker: 'random.arrayElement'\r\n    },\r\n    paymentTerms: { label: 'Payment Terms', type: 'text', faker: 'finance.transactionType' },\r\n    invoiceNumber: { label: 'Invoice Number', type: 'text', faker: 'finance.account' },\r\n    vatAmount: { label: 'VAT Amount', type: 'number', faker: 'datatype.float' },\r\n    vatPercentage: { label: 'VAT Percentage', type: 'number', faker: 'datatype.float' },\r\n    discountApplied: { label: 'Discount Applied', type: 'number', faker: 'datatype.float' },\r\n    totalCostAfterDiscount: { label: 'Total Cost After Discount', type: 'number', faker: 'finance.amount' },\r\n    exchangeRate: { label: 'Exchange Rate', type: 'number', faker: 'datatype.float' },\r\n    costAllocationFactor: { label: 'Cost Allocation Factor', type: 'number', faker: 'datatype.float' },\r\n    approvalStatus: {\r\n        label: 'Approval Status',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'pending', label: 'Pending' },\r\n            { id: 'approved', label: 'Approved' },\r\n            { id: 'rejected', label: 'Rejected' }\r\n        ],\r\n        faker: 'random.arrayElement'\r\n    },\r\n    auditTrail: { label: 'Audit Trail', type: 'text', faker: 'lorem.paragraphs' },\r\n};\r\nexport const costsHeadCells = Object.keys(fieldsConfig).map(key => ({\r\n    id: key,\r\n    label: fieldsConfig[key].label,\r\n}));\r\n\r\nexport const entityName = 'Costs';\r\n\r\nexport const fetchItems = () => fetchDocuments('costs');\r\nexport const addItem = (item) => addDocument('costs', item);\r\nexport const updateItem = (costId, item) => updateDocument('costs', costId, item);\r\nexport const deleteItem = (costId) => deleteDocument('costs', costId);\r\n\r\nexport async function fetchItemById(id) {\r\n    return await fetchDocumentById('costs', id);\r\n}\r\n  ","import { db } from './firebaseConfig'; // Assuming you have a Firebase config file\r\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query, where, getDoc } from 'firebase/firestore';\r\n\r\nconst organizationId = JSON.parse(localStorage.getItem('userData')).organizationId;\r\n\r\n// Function to fetch documents specific to an organization from a subcollection\r\nexport const fetchDocuments = async(subcollectionName) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const snapshot = await getDocs(subcollectionRef);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${subcollectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to add a new document linked to an organization in a subcollection\r\nexport const addDocument = async(subcollectionName, documentData) => {\r\n  try {\r\n    documentData.organizationId = organizationId;\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const docRef = await addDoc(subcollectionRef, documentData);\r\n    return docRef.id; // Return the ID of the newly created document\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${subcollectionName}:`, error);\r\n    throw new Error(`Could not add document to ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to update an existing document in a subcollection\r\nexport const updateDocument = async(subcollectionName, documentId, documentData) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await updateDoc(docRef, documentData);\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${subcollectionName}:`, error);\r\n    throw new Error(`Could not update document in ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to delete a document from a subcollection\r\nexport const deleteDocument = async(subcollectionName, documentId) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${subcollectionName}:`, error);\r\n    throw new Error(`Could not delete document from ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n\r\nexport const fetchDocumentsBySelectValue = async(relativeCollection, foreignKey, foreignValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(foreignKey, 'array-contains', foreignValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const fetchDocumentsByFieldValue = async(relativeCollection, fieldName, fieldValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(fieldName, '==', fieldValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}\r\nexport const fetchDocumentById = async(subcollectionName, documentId) => {\r\n  console.log(\"Fetching document with ID:\", documentId);\r\n  console.log(\"In subcollection:\", subcollectionName);\r\n  console.log(\"Under organization ID:\", organizationId);\r\n\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    console.log(\"Document Reference:\", docRef.path); // Log the path being queried\r\n\r\n    const docSnap = await getDoc(docRef);\r\n\r\n    if (docSnap.exists()) {\r\n      console.log(\"Document data:\", docSnap.data()); // Log the retrieved data\r\n      return { id: docSnap.id, ...docSnap.data() };\r\n    } else {\r\n      console.error(`No document found with ID ${documentId} in ${subcollectionName}`);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching document with ID ${documentId} from ${subcollectionName}:`, error);\r\n    return null;\r\n  }\r\n};\r\n"],"names":["fieldsConfig","costId","label","type","faker","costName","cost","description","allocationDate","allocationType","options","id","notes","department","priority","status","duration","currency","approvedBy","allocationCode","fundingSource","costCenter","budgetCode","financialYear","quarter","allocationMethod","roiEstimate","taxImplications","capexOrOpex","riskAssessment","complianceStatus","paymentTerms","invoiceNumber","vatAmount","vatPercentage","discountApplied","totalCostAfterDiscount","exchangeRate","costAllocationFactor","approvalStatus","auditTrail","costsHeadCells","Object","keys","map","key","entityName","fetchItems","fetchDocuments","addItem","item","addDocument","updateItem","updateDocument","deleteItem","deleteDocument","async","fetchItemById","fetchDocumentById","organizationId","JSON","parse","localStorage","getItem","subcollectionRef","collection","db","subcollectionName","snapshot","getDocs","docs","doc","data","error","console","documentData","addDoc","Error","documentId","docRef","updateDoc","deleteDoc","fetchDocumentsBySelectValue","relativeCollection","foreignKey","foreignValue","q","query","where","fetchDocumentsByFieldValue","fieldName","fieldValue","log","path","docSnap","getDoc","exists"],"sourceRoot":""}