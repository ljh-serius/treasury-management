{"version":3,"file":"static/js/1131.1d3021e9.chunk.js","mappings":"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","sources":["pages/Analysis/CustomerSupport/Feedback/NetPromoterScore.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function NpsDashboard({ fetchItems }) {\r\n  const [npsData, setNpsData] = useState([]);\r\n  const [totalResponses, setTotalResponses] = useState(0);\r\n  const [scoreDistribution, setScoreDistribution] = useState([]);\r\n  const [commentsTimeline, setCommentsTimeline] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setNpsData(data);\r\n      processNpsData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchItems]);\r\n\r\n  const processNpsData = (data) => {\r\n    // Total Responses\r\n    setTotalResponses(data.length);\r\n\r\n    // Score Distribution for Pie Chart\r\n    const scoreCounts = data.reduce((acc, response) => {\r\n      acc[response.score] = (acc[response.score] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setScoreDistribution(Object.keys(scoreCounts).map(key => ({\r\n      name: `Score ${key}`,\r\n      y: scoreCounts[key],\r\n    })));\r\n\r\n    // Comments Timeline for Line Chart\r\n    const timelineData = data.map(response => ({\r\n      date: new Date(response.surveyDate).getTime(),\r\n      label: `NPS ${response.npsId.slice(-4)}`,\r\n    })).sort((a, b) => a.date - b.date);\r\n    setCommentsTimeline(timelineData);\r\n  };\r\n\r\n  // Highcharts options for NPS Score Distribution\r\n  const scoreChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'NPS Score Distribution' },\r\n    series: [{\r\n      name: 'Scores',\r\n      colorByPoint: true,\r\n      data: scoreDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Comments Timeline\r\n  const commentsTimelineChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'NPS Responses Over Time' },\r\n    xAxis: { type: 'datetime', title: { text: 'Survey Date' } },\r\n    yAxis: { title: { text: 'Responses' } },\r\n    series: [{\r\n      name: 'Responses',\r\n      data: commentsTimeline.map(item => [item.date, 1]), // Y-axis is constant (1) since we're counting occurrences\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Net Promoter Score (NPS) Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Responses</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalResponses}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* NPS Score Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={scoreChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Comments Timeline Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={commentsTimelineChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["NpsDashboard","_ref","fetchItems","npsData","setNpsData","useState","totalResponses","setTotalResponses","scoreDistribution","setScoreDistribution","commentsTimeline","setCommentsTimeline","loading","setLoading","useEffect","async","data","processNpsData","fetchDataAsync","length","scoreCounts","reduce","acc","response","score","Object","keys","map","key","name","y","timelineData","date","Date","surveyDate","getTime","label","npsId","slice","sort","a","b","scoreChartOptions","chart","type","title","text","series","colorByPoint","commentsTimelineChartOptions","xAxis","yAxis","item","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}