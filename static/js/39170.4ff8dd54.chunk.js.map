{"version":3,"file":"static/js/39170.4ff8dd54.chunk.js","mappings":"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","sources":["pages/Analysis/IntellectualHumanCapital/InnovationManagement/InnovationPipeline.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst InnovationPipelineAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response || []); // Ensure data is an array\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // KPIs\r\n  const totalIdeas = data.length;\r\n  const avgProgress = totalIdeas > 0\r\n    ? data.reduce((sum, record) => sum + (Number(record.progressPercentage) || 0), 0) / totalIdeas\r\n    : 0;\r\n\r\n  // Count ideas by stage\r\n  const stageCounts = data.reduce((acc, record) => {\r\n    acc[record.stage] = (acc[record.stage] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const stageDistribution = Object.keys(stageCounts).map(stage => ({\r\n    name: stage.replace(/-/g, ' ').replace(/\\b\\w/g, char => char.toUpperCase()),\r\n    y: stageCounts[stage],\r\n  }));\r\n\r\n  // Highcharts options for stage distribution\r\n  const stageDistributionChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Stage Distribution in Innovation Pipeline' },\r\n    series: [{\r\n      name: 'Stages',\r\n      colorByPoint: true,\r\n      data: stageDistribution,\r\n    }]\r\n  };\r\n\r\n  // Highcharts options for progress tracking\r\n  const progressChartOptions = {\r\n    chart: { type: 'bar' },\r\n    title: { text: 'Progress by Idea' },\r\n    xAxis: { categories: data.map(record => record.ideaTitle || 'Unknown') },\r\n    yAxis: { title: { text: 'Progress (%)' } },\r\n    series: [{\r\n      name: 'Progress (%)',\r\n      data: data.map(record => Number(record.progressPercentage) || 0),\r\n    }]\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Ideas in Pipeline</Typography>\r\n          <Typography variant=\"h4\">{totalIdeas}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Average Progress (%)</Typography>\r\n          <Typography variant=\"h4\">{avgProgress.toFixed(2)}%</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={stageDistributionChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={progressChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.ideaTitle}:</Typography>\r\n              {Array.isArray(record.tags) ? record.tags.map((tag, tagIndex) => (\r\n                <Chip key={tagIndex} label={tag.label} style={{ margin: '5px' }} />\r\n              )) : 'No Tags'}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default InnovationPipelineAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalIdeas","length","avgProgress","reduce","sum","record","Number","progressPercentage","stageCounts","acc","stage","stageDistributionChartOptions","chart","type","title","text","series","name","colorByPoint","Object","keys","map","replace","char","toUpperCase","y","progressChartOptions","xAxis","categories","ideaTitle","yAxis","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","toFixed","HighchartsReact","highcharts","Highcharts","options","index","Array","isArray","tags","tag","tagIndex","Chip","label","style","margin"],"sourceRoot":""}