{"version":3,"file":"static/js/58170.d766c0f7.chunk.js","mappings":"wTAKe,SAASA,EAA2BC,GAAkB,IAAjB,WAAEC,GAAYD,EAChE,MAAOE,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,IAC1CG,EAAwBC,IAA6BJ,EAAAA,EAAAA,UAAS,KAC9DK,EAAmBC,IAAwBN,EAAAA,EAAAA,UAAS,KACpDO,EAASC,IAAcR,EAAAA,EAAAA,WAAS,IAEvCS,EAAAA,EAAAA,YAAU,KACUC,WAChBF,GAAW,GACX,MAAMG,QAAad,IACnBE,EAAeY,GACfC,EAAmBD,GACnBH,GAAW,EAAM,EAGnBK,EAAW,GACV,CAAChB,IAEJ,MAAMe,EAAsBD,IAE1BT,EAAgBS,EAAKG,QAGrB,MAAMC,EAAmBJ,EAAKK,QAAO,CAACC,EAAKC,KACzCD,EAAIC,EAAOC,aAAeF,EAAIC,EAAOC,aAAe,GAAK,EAClDF,IACN,CAAC,GACJb,EAA0BgB,OAAOC,KAAKN,GAAkBO,KAAIC,IAAG,CAC7DC,KAAMD,EAAIE,OAAO,GAAGC,cAAgBH,EAAII,MAAM,GAC9CC,EAAGb,EAAiBQ,QAItB,MAAMM,EAAYlB,EAAKW,KAAIJ,IAAM,CAC/BY,KAAM,IAAIC,KAAKb,EAAOc,gBAAgBC,UACtCC,MAAOhB,EAAOiB,gBACZC,MAAK,CAACC,EAAGC,IAAMD,EAAEP,KAAOQ,EAAER,OAC9BxB,EAAqBuB,EAAU,EAI3BU,EAAyB,CAC7BC,MAAO,CAAEC,KAAM,OACfC,MAAO,CAAEC,KAAM,4BACfC,OAAQ,CAAC,CACPpB,KAAM,cACNqB,cAAc,EACdlC,KAAMR,KAKJ2C,EAA0B,CAC9BN,MAAO,CAAEC,KAAM,QACfC,MAAO,CAAEC,KAAM,iCACfI,MAAO,CAAEN,KAAM,WAAYC,MAAO,CAAEC,KAAM,oBAC1CK,MAAO,CAAEN,MAAO,CAAEC,KAAM,iBACxBC,OAAQ,CAAC,CACPpB,KAAM,eACNb,KAAMN,EAAkBiB,KAAI2B,GAAQC,WAAW,CAACD,EAAKnB,KAAMmB,EAAKf,aAIpE,OACEiB,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,WAAY,EAAGC,cAAe,GAAIC,SAAA,EAC/DC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACL,GAAI,CAAEM,MAAO,OAAQC,OAASC,GAAUA,EAAMD,OAAOE,OAAS,GAAKC,KAAMzD,EAAQkD,UACzFC,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,CAACL,MAAM,eAE1BT,EAAAA,EAAAA,MAACe,EAAAA,EAAG,CAACZ,GAAI,CAAEa,QAAS,GAAIV,SAAA,EACtBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAb,SAAC,mCAItCC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEhB,UAEzBC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACtB,MAAI,EAACyB,GAAI,GAAIC,GAAI,EAAElB,UACvBC,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CAAAnB,UACHN,EAAAA,EAAAA,MAAC0B,EAAAA,EAAW,CAAApB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,mBACzBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,QAAQN,GAAI,CAAEwB,WAAY,QAASrB,SAC/DxD,cAOXkD,EAAAA,EAAAA,MAACoB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGnB,GAAI,CAAEyB,UAAW,GAAItB,SAAA,EAE/CC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACtB,MAAI,EAACyB,GAAI,GAAIC,GAAI,EAAElB,UACvBC,EAAAA,EAAAA,KAACsB,IAAe,CAACC,WAAYC,IAAYC,QAAS5C,OAIpDmB,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACtB,MAAI,EAACyB,GAAI,GAAIC,GAAI,EAAElB,UACvBC,EAAAA,EAAAA,KAACsB,IAAe,CAACC,WAAYC,IAAYC,QAASrC,cAM9D,C","sources":["pages/Analysis/LogisticsSupplyChain/LogisticsPartners/PerformanceMetrics.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function PerformanceMetricsDashboard({ fetchItems }) {\r\n  const [metricsData, setMetricsData] = useState([]);\r\n  const [totalMetrics, setTotalMetrics] = useState(0);\r\n  const [metricNameDistribution, setMetricNameDistribution] = useState([]);\r\n  const [metricValueTrends, setMetricValueTrends] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setMetricsData(data);\r\n      processMetricsData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processMetricsData = (data) => {\r\n    // Total Metrics\r\n    setTotalMetrics(data.length);\r\n\r\n    // Metric Name Distribution for Pie Chart\r\n    const metricNameCounts = data.reduce((acc, metric) => {\r\n      acc[metric.metricName] = (acc[metric.metricName] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setMetricNameDistribution(Object.keys(metricNameCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: metricNameCounts[key],\r\n    })));\r\n\r\n    // Metric Value Trends for Line Chart\r\n    const valueData = data.map(metric => ({\r\n      date: new Date(metric.evaluationDate).getTime(),\r\n      value: metric.metricValue,\r\n    })).sort((a, b) => a.date - b.date);\r\n    setMetricValueTrends(valueData);\r\n  };\r\n\r\n  // Highcharts options for Metric Name Distribution\r\n  const metricNameChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Metric Name Distribution' },\r\n    series: [{\r\n      name: 'Metric Name',\r\n      colorByPoint: true,\r\n      data: metricNameDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Metric Value Trends\r\n  const metricValueChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Metric Value Trends Over Time' },\r\n    xAxis: { type: 'datetime', title: { text: 'Evaluation Date' } },\r\n    yAxis: { title: { text: 'Metric Value' } },\r\n    series: [{\r\n      name: 'Metric Value',\r\n      data: metricValueTrends.map(item => parseFloat([item.date, item.value])),\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Performance Metrics Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Metrics</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalMetrics}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Metric Name Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={metricNameChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Metric Value Trends Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={metricValueChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["PerformanceMetricsDashboard","_ref","fetchItems","metricsData","setMetricsData","useState","totalMetrics","setTotalMetrics","metricNameDistribution","setMetricNameDistribution","metricValueTrends","setMetricValueTrends","loading","setLoading","useEffect","async","data","processMetricsData","fetchData","length","metricNameCounts","reduce","acc","metric","metricName","Object","keys","map","key","name","charAt","toUpperCase","slice","y","valueData","date","Date","evaluationDate","getTime","value","metricValue","sort","a","b","metricNameChartOptions","chart","type","title","text","series","colorByPoint","metricValueChartOptions","xAxis","yAxis","item","parseFloat","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}