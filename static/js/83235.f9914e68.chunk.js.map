{"version":3,"file":"static/js/83235.f9914e68.chunk.js","mappings":"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","sources":["pages/Analysis/HrManagement/Payroll/Payslips.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function PayslipsDashboard({ fetchItems }) {\r\n  const [payslipsData, setPayslipsData] = useState([]);\r\n  const [totalPayslips, setTotalPayslips] = useState(0);\r\n  const [totalNetPay, setTotalNetPay] = useState(0);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [averageNetPay, setAverageNetPay] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setPayslipsData(data);\r\n      processPayslipData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processPayslipData = (data) => {\r\n    setTotalPayslips(data.length);\r\n\r\n    // Calculate total and average net pay\r\n    const totalNetPayAmount = data.reduce((acc, payslip) => acc + payslip.netPay, 0);\r\n    setTotalNetPay(totalNetPayAmount);\r\n    setAverageNetPay(data.length > 0 ? totalNetPayAmount / data.length : 0);\r\n\r\n    // Calculate status distribution\r\n    const statusMap = {};\r\n    data.forEach((item) => {\r\n      const status = item.status;\r\n      statusMap[status] = (statusMap[status] || 0) + 1;\r\n    });\r\n    const statusArray = Object.entries(statusMap).map(([status, count]) => ({\r\n      name: status.replace(/_/g, ' '),\r\n      y: count,\r\n    }));\r\n    setStatusDistribution(statusArray);\r\n  };\r\n\r\n  // Highcharts options for Payslip Status Distribution\r\n  const statusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Payslip Status Distribution' },\r\n    series: [\r\n      {\r\n        name: 'Status',\r\n        data: statusDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Payslips Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Payslips</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalPayslips}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Net Pay</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalNetPay.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Net Pay</Typography>\r\n                <Typography variant=\"h4\" color=\"purple\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageNetPay.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Payslip Status Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["PayslipsDashboard","_ref","fetchItems","payslipsData","setPayslipsData","useState","totalPayslips","setTotalPayslips","totalNetPay","setTotalNetPay","statusDistribution","setStatusDistribution","averageNetPay","setAverageNetPay","loading","setLoading","useEffect","async","data","processPayslipData","fetchData","length","totalNetPayAmount","reduce","acc","payslip","netPay","statusMap","forEach","item","status","statusArray","Object","entries","map","_ref2","count","name","replace","y","statusChartOptions","chart","type","title","text","series","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}