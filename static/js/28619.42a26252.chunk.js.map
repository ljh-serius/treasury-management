{"version":3,"file":"static/js/28619.42a26252.chunk.js","mappings":"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","sources":["pages/Analysis/MergersAcquisitions/PostMergerIntegration/SynergyTracking.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function SynergyTrackingDashboard({ fetchItems }) {\r\n  const [synergyData, setSynergyData] = useState([]);\r\n  const [totalSynergies, setTotalSynergies] = useState(0);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [synergyValueTrends, setSynergyValueTrends] = useState([]);\r\n  const [achievedSynergiesTrends, setAchievedSynergiesTrends] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setSynergyData(data);\r\n      processSynergyData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processSynergyData = (data) => {\r\n    // Total Synergies\r\n    setTotalSynergies(data.length);\r\n\r\n    // Status Distribution for Pie Chart\r\n    const statusCounts = data.reduce((acc, synergy) => {\r\n      acc[synergy.status] = (acc[synergy.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: statusCounts[key],\r\n    })));\r\n\r\n    // Synergy Value Trends for Line Chart\r\n    const valueData = data.map(synergy => ({\r\n      date: new Date(synergy.trackingDate).getTime(),\r\n      value: synergy.synergyValue,\r\n    })).sort((a, b) => a.date - b.date);\r\n    setSynergyValueTrends(valueData);\r\n\r\n    // Achieved Synergies Trends for Line Chart\r\n    const achievedData = data.map(synergy => ({\r\n      date: new Date(synergy.trackingDate).getTime(),\r\n      achieved: synergy.achievedSynergies.length,\r\n    })).sort((a, b) => a.date - b.date);\r\n    setAchievedSynergiesTrends(achievedData);\r\n  };\r\n\r\n  // Highcharts options for Status Distribution\r\n  const statusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Synergy Status Distribution' },\r\n    series: [{\r\n      name: 'Status',\r\n      colorByPoint: true,\r\n      data: statusDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Synergy Value Trends\r\n  const synergyValueChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Synergy Value Trends Over Time' },\r\n    xAxis: { type: 'datetime', title: { text: 'Tracking Date' } },\r\n    yAxis: { title: { text: 'Synergy Value' } },\r\n    series: [{\r\n      name: 'Synergy Value',\r\n      data: synergyValueTrends.map(item => [item.date, item.value]),\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Achieved Synergies Trends\r\n  const achievedSynergiesChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Achieved Synergies Trends Over Time' },\r\n    xAxis: { type: 'datetime', title: { text: 'Tracking Date' } },\r\n    yAxis: { title: { text: 'Achieved Synergies' } },\r\n    series: [{\r\n      name: 'Achieved Synergies',\r\n      data: achievedSynergiesTrends.map(item => [item.date, item.achieved]),\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Synergy Tracking Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Synergies</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalSynergies}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Status Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Synergy Value Trends Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={synergyValueChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Achieved Synergies Trends Chart */}\r\n          <Grid item xs={12} md={6} sx={{ marginTop: 4 }}>\r\n            <HighchartsReact highcharts={Highcharts} options={achievedSynergiesChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["SynergyTrackingDashboard","_ref","fetchItems","synergyData","setSynergyData","useState","totalSynergies","setTotalSynergies","statusDistribution","setStatusDistribution","synergyValueTrends","setSynergyValueTrends","achievedSynergiesTrends","setAchievedSynergiesTrends","loading","setLoading","useEffect","async","data","processSynergyData","fetchData","length","statusCounts","reduce","acc","synergy","status","Object","keys","map","key","name","charAt","toUpperCase","slice","y","valueData","date","Date","trackingDate","getTime","value","synergyValue","sort","a","b","achievedData","achieved","achievedSynergies","statusChartOptions","chart","type","title","text","series","colorByPoint","synergyValueChartOptions","xAxis","yAxis","item","achievedSynergiesChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}