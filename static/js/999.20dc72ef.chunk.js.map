{"version":3,"file":"static/js/999.20dc72ef.chunk.js","mappings":"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","sources":["pages/Analysis/Employees.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function EmployeeAnalysisDashboard({ fetchItems }) {\r\n  const [employeesData, setEmployeesData] = useState([]);\r\n  const [departmentDistribution, setDepartmentDistribution] = useState([]);\r\n  const [locationDistribution, setLocationDistribution] = useState([]);\r\n  const [genderDistribution, setGenderDistribution] = useState([]);\r\n  const [employmentTypeDistribution, setEmploymentTypeDistribution] = useState([]);\r\n  const [averageSalary, setAverageSalary] = useState(0);\r\n  const [averageExperience, setAverageExperience] = useState(0);\r\n  const [topPerformers, setTopPerformers] = useState([]);\r\n  const [loading, setLoading] = useState(true); // Add loading state\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Start loading\r\n      const data = await fetchItems();\r\n      if (data && data.length > 0) {\r\n        setEmployeesData(data);\r\n        processEmployeeData(data);\r\n      } else {\r\n        console.log(\"No employee data available.\");\r\n      }\r\n      setLoading(false); // Stop loading\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processEmployeeData = (data) => {\r\n    if (!data || data.length === 0) {\r\n      console.log(\"No data to process.\");\r\n      return;\r\n    }\r\n\r\n    // Department Distribution\r\n    const departmentCounts = data.reduce((acc, employee) => {\r\n      acc[employee.department] = (acc[employee.department] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setDepartmentDistribution(Object.keys(departmentCounts).map(key => ({\r\n      name: key,\r\n      y: departmentCounts[key],\r\n    })));\r\n\r\n    // Location Distribution\r\n    const locationCounts = data.reduce((acc, employee) => {\r\n      acc[employee.location] = (acc[employee.location] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setLocationDistribution(Object.keys(locationCounts).map(key => ({\r\n      name: key,\r\n      y: locationCounts[key],\r\n    })));\r\n\r\n    // Gender Distribution\r\n    const genderCounts = data.reduce((acc, employee) => {\r\n      acc[employee.gender] = (acc[employee.gender] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setGenderDistribution(Object.keys(genderCounts).map(key => ({\r\n      name: key,\r\n      y: genderCounts[key],\r\n    })));\r\n\r\n    // Employment Type Distribution\r\n    const employmentTypeCounts = data.reduce((acc, employee) => {\r\n      acc[employee.employmentType] = (acc[employee.employmentType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setEmploymentTypeDistribution(Object.keys(employmentTypeCounts).map(key => ({\r\n      name: key,\r\n      y: employmentTypeCounts[key],\r\n    })));\r\n\r\n    // Average Salary\r\n    const totalSalary = data.reduce((acc, employee) => acc + (Number(employee.salary) || 0), 0);\r\n    const averageSalaryValue = data.length ? totalSalary / data.length : 0;\r\n    setAverageSalary(averageSalaryValue);\r\n\r\n    // Average Years of Experience\r\n    const totalExperience = data.reduce((acc, employee) => acc + (Number(employee.yearsOfExperience) || 0), 0);\r\n    const averageExperienceValue = data.length ? totalExperience / data.length : 0;\r\n    setAverageExperience(averageExperienceValue);\r\n\r\n    // Top 5 Performers by Rating\r\n    const topPerformersList = data\r\n      .sort((a, b) => (Number(b.performanceRating) || 0) - (Number(a.performanceRating) || 0))\r\n      .slice(0, 5);\r\n    setTopPerformers(topPerformersList);\r\n  };\r\n\r\n  const departmentChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Employee Distribution by Department',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Employees',\r\n        colorByPoint: true,\r\n        data: departmentDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const locationChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Employee Distribution by Location',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Employees',\r\n        colorByPoint: true,\r\n        data: locationDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const genderChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Employee Distribution by Gender',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Employees',\r\n        colorByPoint: true,\r\n        data: genderDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const employmentTypeChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Employee Distribution by Employment Type',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Employees',\r\n        colorByPoint: true,\r\n        data: employmentTypeDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const averageSalaryChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Average Salary by Department',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Average Salary',\r\n        data: departmentDistribution.map(dep => ({\r\n          name: dep.name,\r\n          y: employeesData.filter(emp => emp.department === dep.name)\r\n            .reduce((acc, emp) => acc + (Number(emp.salary) || 0), 0) / dep.y,\r\n        })),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Employee Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Salary</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${Number(averageSalary).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the average salary of all employees.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Years of Experience</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {Number(averageExperience).toFixed(2)} Years\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This is the average years of experience of all employees.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Performers by Rating</Typography>\r\n                <ol>\r\n                  {topPerformers.map(employee => (\r\n                    <li key={employee.id}>\r\n                      <Typography variant=\"body2\">\r\n                        {employee.name} - Rating: {Number(employee.performanceRating).toFixed(2)} Stars\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={departmentChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={locationChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={genderChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={employmentTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={averageSalaryChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["EmployeeAnalysisDashboard","_ref","fetchItems","employeesData","setEmployeesData","useState","departmentDistribution","setDepartmentDistribution","locationDistribution","setLocationDistribution","genderDistribution","setGenderDistribution","employmentTypeDistribution","setEmploymentTypeDistribution","averageSalary","setAverageSalary","averageExperience","setAverageExperience","topPerformers","setTopPerformers","loading","setLoading","useEffect","async","data","length","processEmployeeData","console","log","fetchData","departmentCounts","reduce","acc","employee","department","Object","keys","map","key","name","y","locationCounts","location","genderCounts","gender","employmentTypeCounts","employmentType","totalSalary","Number","salary","averageSalaryValue","totalExperience","yearsOfExperience","averageExperienceValue","topPerformersList","sort","a","b","performanceRating","slice","departmentChartOptions","chart","type","title","text","series","colorByPoint","locationChartOptions","genderChartOptions","employmentTypeChartOptions","averageSalaryChartOptions","dep","filter","emp","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","id","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}