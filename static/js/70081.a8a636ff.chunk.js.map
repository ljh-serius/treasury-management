{"version":3,"file":"static/js/70081.a8a636ff.chunk.js","mappings":"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","sources":["pages/Analysis/HrManagement/PerformanceReviews/PerformanceMetrics.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function PerformanceMetricsAnalytics({ fetchItems }) {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [totalMetrics, setTotalMetrics] = useState(0);\r\n  const [averageScore, setAverageScore] = useState(0);\r\n  const [scoreDistribution, setScoreDistribution] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const fetchedData = await fetchItems();\r\n      setData(fetchedData);\r\n      calculateKPIs(fetchedData);\r\n      generateCharts(fetchedData);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const calculateKPIs = (data) => {\r\n    setTotalMetrics(data.length);\r\n    const totalScore = data.reduce((sum, metric) => sum + metric.score, 0);\r\n    setAverageScore((totalScore / data.length).toFixed(2));\r\n  };\r\n\r\n  const generateCharts = (data) => {\r\n    const scoreCounts = data.reduce((acc, metric) => {\r\n      const scoreRange = Math.floor(metric.score / 10) * 10; // Group scores by ranges of 10\r\n      acc[scoreRange] = (acc[scoreRange] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n  \r\n    setScoreDistribution(\r\n      Object.keys(scoreCounts).map((key) => ({\r\n        name: `${key}-${parseInt(key) + 9}`,\r\n        y: parseFloat(scoreCounts[key]), // Ensure that 'y' is a number\r\n      }))\r\n    );\r\n\r\n  };\r\n\r\n  console.log(scoreDistribution)\r\n\r\n  const scoreDistributionChart = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'Score Distribution' },\r\n    xAxis: { type: 'category', title: { text: 'Score Range' } },\r\n    yAxis: { title: { text: 'Number of Metrics' } },\r\n    series: [\r\n      {\r\n        name: 'Scores',\r\n        data: scoreDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Performance Metrics Analytics\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPIs */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Metrics</Typography>\r\n                <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalMetrics}\r\n                </Typography>\r\n                <Typography variant=\"body2\">Total performance metrics measured.</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Score</Typography>\r\n                <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageScore}\r\n                </Typography>\r\n                <Typography variant=\"body2\">Average score across all metrics.</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Charts */}\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={scoreDistributionChart} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["PerformanceMetricsAnalytics","_ref","fetchItems","data","setData","useState","loading","setLoading","totalMetrics","setTotalMetrics","averageScore","setAverageScore","scoreDistribution","setScoreDistribution","useEffect","async","fetchedData","calculateKPIs","generateCharts","fetchData","length","totalScore","reduce","sum","metric","score","toFixed","scoreCounts","acc","scoreRange","Math","floor","Object","keys","map","key","name","parseInt","y","parseFloat","console","log","scoreDistributionChart","chart","type","title","text","xAxis","yAxis","series","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}