{"version":3,"file":"static/js/41674.aac6a8d3.chunk.js","mappings":"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","sources":["pages/Analysis/TrainingDevelopment/SkillDevelopment/DevelopmentPlans.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function DevelopmentPlansDashboard({ fetchItems }) {\r\n  const [plansData, setPlansData] = useState([]);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [supervisorDistribution, setSupervisorDistribution] = useState([]);\r\n  const [planDurationData, setPlanDurationData] = useState([]);\r\n  const [totalPlans, setTotalPlans] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setPlansData(data);\r\n      processPlansData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processPlansData = (data) => {\r\n    // Total Number of Plans\r\n    setTotalPlans(data.length);\r\n\r\n    // Plans by Status\r\n    const statusCounts = data.reduce((acc, plan) => {\r\n      acc[plan.status] = (acc[plan.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key,\r\n      y: statusCounts[key],\r\n    })));\r\n\r\n    // Plans by Supervisor\r\n    const supervisorCounts = data.reduce((acc, plan) => {\r\n      acc[plan.supervisor] = (acc[plan.supervisor] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setSupervisorDistribution(Object.keys(supervisorCounts).map(key => ({\r\n      name: key,\r\n      y: supervisorCounts[key],\r\n    })));\r\n\r\n    // Plan Duration Trends (from startDate to endDate)\r\n    const durationTrends = data.map(plan => {\r\n      const start = new Date(plan.startDate);\r\n      const end = new Date(plan.endDate);\r\n      const durationInDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24)); // duration in days\r\n      return { name: plan.planTitle, y: durationInDays };\r\n    });\r\n\r\n    setPlanDurationData(durationTrends);\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const statusChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Plans by Status',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Statuses',\r\n        colorByPoint: true,\r\n        data: statusDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const supervisorChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Plans by Supervisor',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Supervisors',\r\n        data: supervisorDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const planDurationChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Plan Duration (in days)',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Duration',\r\n        data: planDurationData.map(plan => plan.y),\r\n      },\r\n    ],\r\n    xAxis: {\r\n      categories: planDurationData.map(plan => plan.name),\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Development Plans Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Plans</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalPlans}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={supervisorChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={planDurationChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["DevelopmentPlansDashboard","_ref","fetchItems","plansData","setPlansData","useState","statusDistribution","setStatusDistribution","supervisorDistribution","setSupervisorDistribution","planDurationData","setPlanDurationData","totalPlans","setTotalPlans","loading","setLoading","useEffect","async","data","processPlansData","fetchData","length","statusCounts","reduce","acc","plan","status","Object","keys","map","key","name","y","supervisorCounts","supervisor","durationTrends","start","Date","startDate","end","endDate","durationInDays","Math","ceil","planTitle","statusChartOptions","chart","type","title","text","series","colorByPoint","supervisorChartOptions","planDurationChartOptions","xAxis","categories","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}