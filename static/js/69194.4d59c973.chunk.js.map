{"version":3,"file":"static/js/69194.4d59c973.chunk.js","mappings":"wTAOe,SAASA,EAAsBC,GAAkB,IAAjB,WAAEC,GAAYD,EAC3D,MAAOE,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAA6BC,IAAkCF,EAAAA,EAAAA,UAAS,KACxEG,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,EAAuBC,IAA4BN,EAAAA,EAAAA,UAAS,KAC5DO,EAAuBC,IAA4BR,EAAAA,EAAAA,UAAS,KAC5DS,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAS,KAClDW,EAAgBC,IAAqBZ,EAAAA,EAAAA,UAAS,IAC9Ca,EAAwBC,IAA6Bd,EAAAA,EAAAA,UAAS,IAC9De,EAAuBC,IAA4BhB,EAAAA,EAAAA,UAAS,IAC5DiB,EAASC,IAAclB,EAAAA,EAAAA,WAAS,IAEvCmB,EAAAA,EAAAA,YAAU,KACUC,WAChBF,GAAW,GACX,MAAMG,QAAaxB,IACnBE,EAAiBsB,GACjBC,EAAqBD,GACrBH,GAAW,EAAM,EAGnBK,EAAW,GACV,CAAC1B,IAEJ,MAAMyB,EAAwBD,IAE5BT,EAAkBS,EAAKG,QAGvB,MAAMC,EAAcJ,EAAKK,QAAO,CAACC,EAAKC,IAAaD,EAAME,OAAOD,EAASE,SAAS,GAClFhB,EAA0BW,GAG1BT,EAAyBS,EAAcJ,EAAKG,QAG5C,MAAMO,EAAeV,EAAKK,QAAO,CAACC,EAAKC,KACrCD,EAAIC,EAASI,SAAWL,EAAIC,EAASI,SAAW,GAAK,EAC9CL,IACN,CAAC,GAEJzB,EAA+B+B,OAAOC,KAAKH,GAAcI,KAAIC,IAAG,CAC9DC,KAAMD,EAAIE,OAAO,GAAGC,cAAgBH,EAAII,MAAM,GAC9CC,EAAGV,EAAaK,QAIlB,MAAMjC,EAAmBkB,EAAKK,QAAO,CAACC,EAAKC,KACzCD,EAAIC,EAASc,WAAaf,EAAIC,EAASc,WAAa,GAAKb,OAAOD,EAASE,QAClEH,IACN,CAAC,GAEJvB,EAAoB6B,OAAOC,KAAK/B,GAAkBgC,KAAIC,IAAG,CACvDC,KAAMD,EACNK,EAAGtC,EAAiBiC,QAItB,MAAMO,EAAmBtB,EAAKK,QAAO,CAACC,EAAKC,KACzC,MAAMgB,EAAQ,IAAIC,KAAKjB,EAASkB,cAAcC,WAAa,EAE3D,OADApB,EAAIiB,IAAUjB,EAAIiB,IAAU,GAAK,EAC1BjB,CAAG,GACT,CAAC,GAEJrB,EAAyB2B,OAAOC,KAAKS,GAAkBR,KAAIC,IAAG,CAC5DC,KAAM,SAASD,IACfK,EAAGE,EAAiBP,QAItB,MAAMY,EAAiB3B,EAAKK,QAAO,CAACC,EAAKC,KACvCD,EAAIC,EAASI,QAAUL,EAAIC,EAASI,SAAW,CAAEP,YAAa,EAAGwB,MAAO,GACxEtB,EAAIC,EAASI,QAAQP,aAAeI,OAAOD,EAASE,QACpDH,EAAIC,EAASI,QAAQiB,OAAS,EACvBtB,IACN,CAAC,GAEJnB,EAAyByB,OAAOC,KAAKc,GAAgBb,KAAIC,IAAG,CAC1DC,KAAMD,EAAIE,OAAO,GAAGC,cAAgBH,EAAII,MAAM,GAC9CC,EAAGO,EAAeZ,GAAKX,YAAcuB,EAAeZ,GAAKa,OAAS,OAIpE,MAAMC,EAAa7B,EAAKK,QAAO,CAACC,EAAKC,KACnCA,EAASuB,KAAKC,SAAQC,IACpB1B,EAAI0B,IAAQ1B,EAAI0B,IAAQ,GAAK,CAAC,IAEzB1B,IACN,CAAC,GAEJjB,EAAoBuB,OAAOC,KAAKgB,GAAYf,KAAIC,IAAG,CACjDC,KAAMD,EACNK,EAAGS,EAAWd,OACZ,EAIAkB,EAA8B,CAClCC,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,uBAERC,OAAQ,CACN,CACEtB,KAAM,SACNuB,cAAc,EACdvC,KAAMpB,KAKN4D,EAA+B,CACnCN,MAAO,CACLC,KAAM,UAERC,MAAO,CACLC,KAAM,wCAERC,OAAQ,CACN,CACEtB,KAAM,SACNhB,KAAMlB,KAKN2D,EAAgC,CACpCP,MAAO,CACLC,KAAM,QAERC,MAAO,CACLC,KAAM,uBAERK,MAAO,CACLC,WAAY3D,EAAsB8B,KAAId,GAAQA,EAAKgB,QAErDsB,OAAQ,CACN,CACEtB,KAAM,sBACNhB,KAAMhB,EAAsB8B,KAAId,GAAQA,EAAKoB,OAK7CwB,EAAoC,CACxCV,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,qCAERC,OAAQ,CACN,CACEtB,KAAM,iBACNhB,KAAMd,KAKN2D,EAAmB,CACvBX,MAAO,CACLC,KAAM,UAERC,MAAO,CACLC,KAAM,qBAERC,OAAQ,CACN,CACEtB,KAAM,OACNhB,KAAMZ,KAKZ,OACE0D,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,WAAY,EAAGC,cAAe,GAAIC,SAAA,EAC/DC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACL,GAAI,CAAEM,MAAO,OAAQC,OAASC,GAAUA,EAAMD,OAAOE,OAAS,GAAKC,KAAM/D,EAAQwD,UACzFC,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,CAACL,MAAM,eAE1BT,EAAAA,EAAAA,MAACe,EAAAA,EAAG,CAACZ,GAAI,CAAEa,QAAS,GAAIV,SAAA,EACtBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAb,SAAC,8BAGtCN,EAAAA,EAAAA,MAACoB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEhB,SAAA,EAEzBC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,qBACzBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,QAAQN,GAAI,CAAEyB,WAAY,QAAStB,SAC/D9D,YAKT+D,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,8BACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,OAAON,GAAI,CAAEyB,WAAY,QAAStB,SAAA,CAAC,IAC9D5D,EAAuBmF,QAAQ,cAKzCtB,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,6BACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,SAASN,GAAI,CAAEyB,WAAY,QAAStB,SAAA,CAAC,IAChE1D,EAAsBiF,QAAQ,cAOxCtB,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACuB,IAAe,CAACC,WAAYC,IAAYC,QAAS9C,OAEpDoB,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACuB,IAAe,CAACC,WAAYC,IAAYC,QAASvC,OAEpDa,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACuB,IAAe,CAACC,WAAYC,IAAYC,QAAStC,OAEpDY,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACuB,IAAe,CAACC,WAAYC,IAAYC,QAASnC,OAEpDS,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAGnB,UACxBC,EAAAA,EAAAA,KAACuB,IAAe,CAACC,WAAYC,IAAYC,QAASlC,cAM9D,C","sources":["pages/Analysis/FinancialManagement/BankAccounts/BankTransfers.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function BankTransfersDashboard({ fetchItems }) {\r\n  const [transfersData, setTransfersData] = useState([]);\r\n  const [transfersStatusDistribution, setTransfersStatusDistribution] = useState([]);\r\n  const [amountByCurrency, setAmountByCurrency] = useState([]);\r\n  const [transfersOverTimeData, setTransfersOverTimeData] = useState([]);\r\n  const [averageAmountByStatus, setAverageAmountByStatus] = useState([]);\r\n  const [tagsDistribution, setTagsDistribution] = useState([]);\r\n  const [totalTransfers, setTotalTransfers] = useState(0);\r\n  const [totalAmountTransferred, setTotalAmountTransferred] = useState(0);\r\n  const [averageTransferAmount, setAverageTransferAmount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setTransfersData(data);\r\n      processTransfersData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processTransfersData = (data) => {\r\n    // Total Number of Transfers\r\n    setTotalTransfers(data.length);\r\n\r\n    // Total Amount Transferred\r\n    const totalAmount = data.reduce((acc, transfer) => acc + Number(transfer.amount), 0);\r\n    setTotalAmountTransferred(totalAmount);\r\n\r\n    // Average Transfer Amount\r\n    setAverageTransferAmount(totalAmount / data.length);\r\n\r\n    // Transfers by Status\r\n    const statusCounts = data.reduce((acc, transfer) => {\r\n      acc[transfer.status] = (acc[transfer.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setTransfersStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),  // Capitalize status\r\n      y: statusCounts[key],\r\n    })));\r\n\r\n    // Total Amount Transferred by Currency\r\n    const amountByCurrency = data.reduce((acc, transfer) => {\r\n      acc[transfer.currency] = (acc[transfer.currency] || 0) + Number(transfer.amount);\r\n      return acc;\r\n    }, {});\r\n\r\n    setAmountByCurrency(Object.keys(amountByCurrency).map(key => ({\r\n      name: key,\r\n      y: amountByCurrency[key],\r\n    })));\r\n\r\n    // Transfers Over Time\r\n    const transfersByMonth = data.reduce((acc, transfer) => {\r\n      const month = new Date(transfer.transferDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setTransfersOverTimeData(Object.keys(transfersByMonth).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: transfersByMonth[key],\r\n    })));\r\n\r\n    // Average Transfer Amount by Status\r\n    const amountByStatus = data.reduce((acc, transfer) => {\r\n      acc[transfer.status] = acc[transfer.status] || { totalAmount: 0, count: 0 };\r\n      acc[transfer.status].totalAmount += Number(transfer.amount);\r\n      acc[transfer.status].count += 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setAverageAmountByStatus(Object.keys(amountByStatus).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: amountByStatus[key].totalAmount / amountByStatus[key].count || 0,\r\n    })));\r\n\r\n    // Tags Distribution\r\n    const tagsCounts = data.reduce((acc, transfer) => {\r\n      transfer.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagsDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const transfersStatusChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Transfers by Status',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Status',\r\n        colorByPoint: true,\r\n        data: transfersStatusDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const amountByCurrencyChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Total Amount Transferred by Currency',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Amount',\r\n        data: amountByCurrency,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const transfersOverTimeChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Transfers Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: transfersOverTimeData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Transfers',\r\n        data: transfersOverTimeData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const averageAmountByStatusChartOptions = {\r\n    chart: {\r\n      type: 'bar',\r\n    },\r\n    title: {\r\n      text: 'Average Transfer Amount by Status',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Average Amount',\r\n        data: averageAmountByStatus,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const tagsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Tags Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Tags',\r\n        data: tagsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Bank Transfers Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Transfers</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalTransfers}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Amount Transferred</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalAmountTransferred.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Transfer Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  ${averageTransferAmount.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={transfersStatusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={amountByCurrencyChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={transfersOverTimeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={averageAmountByStatusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["BankTransfersDashboard","_ref","fetchItems","transfersData","setTransfersData","useState","transfersStatusDistribution","setTransfersStatusDistribution","amountByCurrency","setAmountByCurrency","transfersOverTimeData","setTransfersOverTimeData","averageAmountByStatus","setAverageAmountByStatus","tagsDistribution","setTagsDistribution","totalTransfers","setTotalTransfers","totalAmountTransferred","setTotalAmountTransferred","averageTransferAmount","setAverageTransferAmount","loading","setLoading","useEffect","async","data","processTransfersData","fetchData","length","totalAmount","reduce","acc","transfer","Number","amount","statusCounts","status","Object","keys","map","key","name","charAt","toUpperCase","slice","y","currency","transfersByMonth","month","Date","transferDate","getMonth","amountByStatus","count","tagsCounts","tags","forEach","tag","transfersStatusChartOptions","chart","type","title","text","series","colorByPoint","amountByCurrencyChartOptions","transfersOverTimeChartOptions","xAxis","categories","averageAmountByStatusChartOptions","tagsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}