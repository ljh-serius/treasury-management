{"version":3,"file":"static/js/88699.8902ce15.chunk.js","mappings":"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","sources":["pages/Analysis/SalesMarketing/Campaigns/CampaignPerformance.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function CampaignPerformanceDashboard({ fetchItems }) {\r\n  const [performanceData, setPerformanceData] = useState([]);\r\n  const [metricDistribution, setMetricDistribution] = useState([]);\r\n  const [tagDistribution, setTagDistribution] = useState([]);\r\n  const [averageValue, setAverageValue] = useState(0);\r\n  const [totalMetrics, setTotalMetrics] = useState(0);\r\n  const [medianValue, setMedianValue] = useState(0);\r\n  const [maxValue, setMaxValue] = useState(0);\r\n  const [minValue, setMinValue] = useState(0);\r\n  const [valueOverTime, setValueOverTime] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setPerformanceData(data);\r\n      processPerformanceData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processPerformanceData = (data) => {\r\n    // Total Metrics\r\n    setTotalMetrics(data.length);\r\n\r\n    // Average Value\r\n    const totalValue = data.reduce((acc, metric) => acc + Number(metric.value), 0);\r\n    setAverageValue(totalValue / data.length);\r\n\r\n    // Median Value\r\n    const sortedValues = data.map(metric => Number(metric.value)).sort((a, b) => a - b);\r\n    const mid = Math.floor(sortedValues.length / 2);\r\n    setMedianValue(sortedValues.length % 2 !== 0 ? sortedValues[mid] : (sortedValues[mid - 1] + sortedValues[mid]) / 2);\r\n\r\n    // Maximum and Minimum Values\r\n    setMaxValue(Math.max(...sortedValues));\r\n    setMinValue(Math.min(...sortedValues));\r\n\r\n    // Metrics by Name (for chart)\r\n    const metricCounts = data.reduce((acc, metric) => {\r\n      acc[metric.metricName] = (acc[metric.metricName] || 0) + Number(metric.value);\r\n      return acc;\r\n    }, {});\r\n\r\n    setMetricDistribution(Object.keys(metricCounts).map(key => ({\r\n      name: key,\r\n      y: metricCounts[key],\r\n    })));\r\n\r\n    // Tags Distribution (for chart)\r\n    const tagsCounts = data.reduce((acc, metric) => {\r\n      metric.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n\r\n    // Value Trend Over Time\r\n    const valuesOverTime = data.map(metric => ({\r\n      date: new Date(metric.recordedDate).getTime(),\r\n      value: Number(metric.value),\r\n    })).sort((a, b) => a.date - b.date);\r\n\r\n    setValueOverTime(valuesOverTime);\r\n  };\r\n\r\n  // Chart options\r\n  const metricChartOptions = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'Metrics Distribution' },\r\n    series: [{ name: 'Metrics', data: metricDistribution }],\r\n  };\r\n\r\n  const tagChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Tags Distribution' },\r\n    series: [{ name: 'Tags', colorByPoint: true, data: tagDistribution }],\r\n  };\r\n\r\n  const valueTrendChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Value Trend Over Time' },\r\n    xAxis: { type: 'datetime', title: { text: 'Date' } },\r\n    yAxis: { title: { text: 'Value' } },\r\n    series: [{ name: 'Value', data: valueOverTime.map(item => [item.date, item.value]) }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Campaign Performance Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={2}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Metrics</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalMetrics}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={2}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Value</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageValue.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={2}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Median Value</Typography>\r\n                <Typography variant=\"h4\" color=\"purple\" sx={{ fontWeight: 'bold' }}>\r\n                  {medianValue.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={2}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Max Value</Typography>\r\n                <Typography variant=\"h4\" color=\"red\" sx={{ fontWeight: 'bold' }}>\r\n                  {maxValue}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={2}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Min Value</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  {minValue}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Metrics Distribution */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={metricChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Tags Distribution */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Value Trend Over Time */}\r\n          <Grid item xs={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={valueTrendChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["CampaignPerformanceDashboard","_ref","fetchItems","performanceData","setPerformanceData","useState","metricDistribution","setMetricDistribution","tagDistribution","setTagDistribution","averageValue","setAverageValue","totalMetrics","setTotalMetrics","medianValue","setMedianValue","maxValue","setMaxValue","minValue","setMinValue","valueOverTime","setValueOverTime","loading","setLoading","useEffect","async","data","processPerformanceData","fetchData","length","totalValue","reduce","acc","metric","Number","value","sortedValues","map","sort","a","b","mid","Math","floor","max","min","metricCounts","metricName","Object","keys","key","name","y","tagsCounts","tags","forEach","tag","valuesOverTime","date","Date","recordedDate","getTime","metricChartOptions","chart","type","title","text","series","tagChartOptions","colorByPoint","valueTrendChartOptions","xAxis","yAxis","item","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}