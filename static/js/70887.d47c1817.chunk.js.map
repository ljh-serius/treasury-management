{"version":3,"file":"static/js/70887.d47c1817.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/Budget/BudgetAllocations.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function BudgetAllocationsAnalytics({ fetchItems }) {\r\n  const [allocationsData, setAllocationsData] = useState([]);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [budgetVsActual, setBudgetVsActual] = useState([]);\r\n  const [totalBudgetedAmount, setTotalBudgetedAmount] = useState(0);\r\n  const [totalActualAmount, setTotalActualAmount] = useState(0);\r\n  const [topDepartments, setTopDepartments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setAllocationsData(data);\r\n      processAllocationData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processAllocationData = (data) => {\r\n    // Status Distribution\r\n    const statusCounts = data.reduce((acc, allocation) => {\r\n      acc[allocation.status] = (acc[allocation.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key,\r\n      y: statusCounts[key],\r\n    })));\r\n\r\n    // Budget vs Actual\r\n    const budgetData = data.map(allocation => ({\r\n      budgeted: Number(allocation.budgetedAmount),\r\n      actual: Number(allocation.actualAmount),\r\n    }));\r\n\r\n    setBudgetVsActual(budgetData);\r\n\r\n    // Total Amounts\r\n    const totals = data.reduce(\r\n      (acc, allocation) => {\r\n        acc.budgeted += Number(allocation.budgetedAmount) || 0;\r\n        acc.actual += Number(allocation.actualAmount) || 0;\r\n        return acc;\r\n      },\r\n      { budgeted: 0, actual: 0 }\r\n    );\r\n\r\n    setTotalBudgetedAmount(totals.budgeted);\r\n    setTotalActualAmount(totals.actual);\r\n\r\n    // Top 5 Departments by Budgeted Amount\r\n    const topDepartmentsList = data\r\n      .sort((a, b) => Number(b.budgetedAmount) - Number(a.budgetedAmount))\r\n      .slice(0, 5);\r\n    setTopDepartments(topDepartmentsList);\r\n  };\r\n\r\n  const statusChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Status Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Statuses',\r\n        colorByPoint: true,\r\n        data: statusDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const budgetVsActualChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Budget vs Actual Amounts',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Budgeted Amount',\r\n        data: budgetVsActual.map(data => data.budgeted),\r\n      },\r\n      {\r\n        name: 'Actual Amount',\r\n        data: budgetVsActual.map(data => data.actual),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Budget Allocations Analytics\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Budgeted Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalBudgetedAmount.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total budgeted amount across all allocations.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Actual Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalActualAmount.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total actual spending across all allocations.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Departments by Budgeted Amount</Typography>\r\n                <ol>\r\n                  {topDepartments.map(allocation => (\r\n                    <li key={allocation.allocationId}>\r\n                      <Typography variant=\"body2\">\r\n                        {allocation.department} - Budgeted: ${Number(allocation.budgetedAmount).toFixed(2)}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={budgetVsActualChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["BudgetAllocationsAnalytics","_ref","fetchItems","allocationsData","setAllocationsData","useState","statusDistribution","setStatusDistribution","budgetVsActual","setBudgetVsActual","totalBudgetedAmount","setTotalBudgetedAmount","totalActualAmount","setTotalActualAmount","topDepartments","setTopDepartments","loading","setLoading","useEffect","async","data","processAllocationData","fetchData","statusCounts","reduce","acc","allocation","status","Object","keys","map","key","name","y","budgetData","budgeted","Number","budgetedAmount","actual","actualAmount","totals","topDepartmentsList","sort","a","b","slice","statusChartOptions","chart","type","title","text","series","colorByPoint","budgetVsActualChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","department","allocationId","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}