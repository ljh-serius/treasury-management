{"version":3,"file":"static/js/6446.9a93c41b.chunk.js","mappings":"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","sources":["pages/Analysis/SalesMarketing/Opportunities/SalesForecasting.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function SalesForecastingDashboard({ fetchData }) {\r\n  const [forecastData, setForecastData] = useState([]);\r\n  const [totalForecasts, setTotalForecasts] = useState(0);\r\n  const [totalRevenue, setTotalRevenue] = useState(0);\r\n  const [highProbabilityForecasts, setHighProbabilityForecasts] = useState(0);\r\n  const [lowProbabilityForecasts, setLowProbabilityForecasts] = useState(0);\r\n  const [revenueDistribution, setRevenueDistribution] = useState([]);\r\n  const [probabilityDistribution, setProbabilityDistribution] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchData();\r\n      setForecastData(data);\r\n      processForecastData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchData]);\r\n\r\n  const processForecastData = (data) => {\r\n    // Total Forecasts\r\n    setTotalForecasts(data.length);\r\n\r\n    // Total Expected Revenue\r\n    const totalRev = data.reduce((acc, forecast) => acc + Number(forecast.expectedRevenue), 0);\r\n    setTotalRevenue(totalRev);\r\n\r\n    // Count High and Low Probability Forecasts\r\n    const highProbability = data.filter(forecast => forecast.probability >= 70).length;\r\n    const lowProbability = data.filter(forecast => forecast.probability <= 30).length;\r\n    setHighProbabilityForecasts(highProbability);\r\n    setLowProbabilityForecasts(lowProbability);\r\n\r\n    // Revenue Distribution for Column Chart\r\n    const revenueData = data.map(forecast => ({\r\n      name: `Forecast ${forecast.forecastId.slice(-4)}`,\r\n      y: Number(forecast.expectedRevenue),\r\n    }));\r\n    setRevenueDistribution(revenueData);\r\n\r\n    // Probability Distribution for Pie Chart\r\n    const probabilityCounts = {\r\n      'High Probability (>= 70%)': highProbability,\r\n      'Low Probability (<= 30%)': lowProbability,\r\n      'Medium Probability': data.length - highProbability - lowProbability,\r\n    };\r\n    setProbabilityDistribution(Object.keys(probabilityCounts).map(key => ({\r\n      name: key,\r\n      y: probabilityCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Highcharts options for Revenue Distribution\r\n  const revenueChartOptions = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'Expected Revenue Distribution' },\r\n    series: [{\r\n      name: 'Revenue',\r\n      data: revenueDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Probability Distribution\r\n  const probabilityChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Forecast Probability Distribution' },\r\n    series: [{\r\n      name: 'Forecasts',\r\n      colorByPoint: true,\r\n      data: probabilityDistribution,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Sales Forecasting Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Forecasts</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalForecasts}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Expected Revenue</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalRevenue.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">High Probability Forecasts</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {highProbabilityForecasts}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Low Probability Forecasts</Typography>\r\n                <Typography variant=\"h4\" color=\"red\" sx={{ fontWeight: 'bold' }}>\r\n                  {lowProbabilityForecasts}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Revenue Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={revenueChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Probability Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={probabilityChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["SalesForecastingDashboard","_ref","fetchData","forecastData","setForecastData","useState","totalForecasts","setTotalForecasts","totalRevenue","setTotalRevenue","highProbabilityForecasts","setHighProbabilityForecasts","lowProbabilityForecasts","setLowProbabilityForecasts","revenueDistribution","setRevenueDistribution","probabilityDistribution","setProbabilityDistribution","loading","setLoading","useEffect","async","data","processForecastData","fetchDataAsync","length","totalRev","reduce","acc","forecast","Number","expectedRevenue","highProbability","filter","probability","lowProbability","revenueData","map","name","forecastId","slice","y","probabilityCounts","Object","keys","key","revenueChartOptions","chart","type","title","text","series","probabilityChartOptions","colorByPoint","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}