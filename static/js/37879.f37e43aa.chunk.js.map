{"version":3,"file":"static/js/37879.f37e43aa.chunk.js","mappings":"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","sources":["pages/Analysis/CorporateCommunication/CrisisManagement/CrisisResponsePlans.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Grid, Typography, Card, CardContent, CircularProgress } from '@mui/material';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nconst CrisisResponsePlansAnalytics = ({ fetchItems }) => {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const result = await fetchItems();\r\n            setData(result);\r\n            setLoading(false);\r\n        }\r\n        fetchData();\r\n    }, [fetchItems]);\r\n\r\n    if (loading) {\r\n        return <CircularProgress />;\r\n    }\r\n\r\n    // Calculate KPIs\r\n    const totalPlans = data.length;\r\n    const draftPlans = data.filter(plan => plan.status === 'draft').length;\r\n    const activePlans = data.filter(plan => plan.status === 'active').length;\r\n    const archivedPlans = data.filter(plan => plan.status === 'archived').length;\r\n\r\n    // Highcharts options\r\n    const statusOptions = {\r\n        chart: { type: 'pie' },\r\n        title: { text: 'Plan Status Distribution' },\r\n        series: [\r\n            {\r\n                name: 'Plans',\r\n                colorByPoint: true,\r\n                data: [\r\n                    { name: 'Draft', y: draftPlans },\r\n                    { name: 'Active', y: activePlans },\r\n                    { name: 'Archived', y: archivedPlans },\r\n                ],\r\n            },\r\n        ],\r\n    };\r\n\r\n    const lastUpdatedCounts = data.reduce((acc, plan) => {\r\n        const date = new Date(plan.lastUpdated).toLocaleDateString();\r\n        acc[date] = (acc[date] || 0) + 1;\r\n        return acc;\r\n    }, {});\r\n\r\n    const lastUpdatedOptions = {\r\n        chart: { type: 'column' },\r\n        title: { text: 'Last Updated Plans Over Time' },\r\n        xAxis: { categories: Object.keys(lastUpdatedCounts) },\r\n        series: [\r\n            {\r\n                name: 'Plans',\r\n                data: Object.values(lastUpdatedCounts),\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Typography variant=\"h4\">Crisis Response Plans Analytics</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\">Total Plans</Typography>\r\n                        <Typography variant=\"h4\">{totalPlans}</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\">Active Plans</Typography>\r\n                        <Typography variant=\"h4\">{activePlans}</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\">Draft Plans</Typography>\r\n                        <Typography variant=\"h4\">{draftPlans}</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n                <HighchartsReact highcharts={Highcharts} options={statusOptions} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n                <HighchartsReact highcharts={Highcharts} options={lastUpdatedOptions} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CrisisResponsePlansAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","result","fetchData","_jsx","CircularProgress","totalPlans","length","draftPlans","filter","plan","status","activePlans","statusOptions","chart","type","title","text","series","name","colorByPoint","y","lastUpdatedCounts","reduce","acc","date","Date","lastUpdated","toLocaleDateString","lastUpdatedOptions","xAxis","categories","Object","keys","values","_jsxs","Grid","container","spacing","children","item","xs","Typography","variant","md","Card","CardContent","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}