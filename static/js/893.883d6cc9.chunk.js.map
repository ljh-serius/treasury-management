{"version":3,"file":"static/js/893.883d6cc9.chunk.js","mappings":"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","sources":["components/Management/Invoices.js","utils/firebaseCrudHelpers.js"],"sourcesContent":["\r\nimport {\r\n    fetchDocuments,\r\n    addDocument,\r\n    updateDocument,\r\n    deleteDocument,\r\n    fetchDocumentsBySelectValue,\r\n    fetchDocumentsByFieldValue\r\n} from '../../utils/firebaseCrudHelpers';\r\n\r\nconst organizationId = JSON.parse(localStorage.getItem('userData')).organizationId;\r\n\r\nexport const fieldsConfig = {\r\n    name: { label: 'Partner Name', type: 'text', faker: 'company.name' },\r\n    service: { label: 'Service', type: 'text', faker: 'commerce.department' },\r\n    partnerType: { label: 'Partner Type', type: 'text', faker: 'company.bs' },\r\n    contactName: { label: 'Contact Name', type: 'text', faker: 'name.fullName' },\r\n    contactEmail: { label: 'Contact Email', type: 'email', faker: 'internet.email' },\r\n    contactPhone: { label: 'Contact Phone', type: 'tel', faker: 'phone.imei' },\r\n    address: { label: 'Address', type: 'text', faker: 'address.streetAddress' },\r\n    website: { label: 'Website', type: 'url', faker: 'internet.url' },\r\n    industry: { label: 'Industry', type: 'text', faker: 'company.bs' },\r\n    agreementDate: { label: 'Agreement Date', type: 'date', faker: 'date.past' },\r\n    contractValue: { label: 'Contract Value', type: 'number', faker: 'finance.amount' },\r\n    startDate: { label: 'Start Date', type: 'date', faker: 'date.past' },\r\n    endDate: { label: 'End Date', type: 'date', faker: 'date.future' },\r\n    renewalDate: { label: 'Renewal Date', type: 'date', faker: 'date.future' },\r\n    riskLevel: {\r\n      label: 'Risk Level',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'low', label: 'Low' },\r\n        { id: 'medium', label: 'Medium' },\r\n        { id: 'high', label: 'High' },\r\n        { id: 'critical', label: 'Critical' },\r\n      ],\r\n      multiple: false,\r\n      faker: 'random.arrayElement',\r\n    },\r\n    region: { label: 'Region', type: 'text', faker: 'address.state' },\r\n    paymentTerms: { label: 'Payment Terms', type: 'text', faker: 'finance.transactionType' },\r\n    complianceStatus: {\r\n      label: 'Compliance Status',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'compliant', label: 'Compliant' },\r\n        { id: 'non_compliant', label: 'Non-compliant' },\r\n        { id: 'pending', label: 'Pending' },\r\n      ],\r\n      multiple: false,\r\n      faker: 'random.arrayElement',\r\n    },\r\n    notes: { label: 'Notes', type: 'text', multiline: true, rows: 4, faker: 'lorem.paragraph' },\r\n    vendorCode: { label: 'Vendor Code', type: 'text', faker: 'datatype.uuid' },\r\n    billingCycle: { label: 'Billing Cycle', type: 'text', faker: 'random.word' },\r\n    sla: { label: 'Service Level Agreement (SLA)', type: 'text', faker: 'lorem.sentence' },\r\n    paymentMethod: { label: 'Payment Method', type: 'text', faker: 'finance.transactionType' },\r\n    discountRate: { label: 'Discount Rate', type: 'number', faker: 'datatype.float' },\r\n    preferredCurrency: { label: 'Preferred Currency', type: 'text', faker: 'finance.currencyCode' },\r\n    lastAuditDate: { label: 'Last Audit Date', type: 'date', faker: 'date.past' },\r\n    supportContact: { label: 'Support Contact', type: 'text', faker: 'name.fullName' },\r\n    supportEmail: { label: 'Support Email', type: 'email', faker: 'internet.email' },\r\n    supportPhone: { label: 'Support Phone', type: 'tel', faker: 'phone.imei' },\r\n    accountManager: { label: 'Account Manager', type: 'text', faker: 'name.fullName' },\r\n    partnerRating: { label: 'Partner Rating', type: 'text', faker: 'random.word' },\r\n    partnershipStartDate: { label: 'Partnership Start Date', type: 'date', faker: 'date.past' },\r\n    partnershipEndDate: { label: 'Partnership End Date', type: 'date', faker: 'date.future' },\r\n    numberOfEmployees: { label: 'Number of Employees', type: 'number', faker: 'datatype.number' },\r\n    annualRevenue: { label: 'Annual Revenue', type: 'number', faker: 'finance.amount' },\r\n    partnershipLevel: { label: 'Partnership Level', type: 'text', faker: 'random.word' },\r\n    preferredLanguage: {\r\n      label: 'Preferred Language',\r\n      type: 'select',\r\n      options: [\r\n        { id: \"english\", label: \"English\" },\r\n        { id: \"french\", label: \"Fran√ßais\" }\r\n      ],\r\n      multiple: false,\r\n      faker: 'random.arrayElement'\r\n    },\r\n    taxExemptionStatus: { label: 'Tax Exemption Status', type: 'text', faker: 'random.word' },\r\n  \r\n    // New Fields for Invoices\r\n    invoiceType: {\r\n      label: 'Invoice Type',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'issued', label: 'Issued' },\r\n        { id: 'received', label: 'Received' }\r\n      ],\r\n      multiple: false,\r\n      faker: 'random.arrayElement',\r\n    },\r\n    invoiceCategory: {\r\n      label: 'Invoice Category',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'goods', label: 'Goods' },\r\n        { id: 'services', label: 'Services' },\r\n        { id: 'consulting', label: 'Consulting' },\r\n        { id: 'maintenance', label: 'Maintenance' },\r\n        { id: 'software', label: 'Software' },\r\n        { id: 'subscription', label: 'Subscription' },\r\n        { id: 'licensing', label: 'Licensing' },\r\n        { id: 'training', label: 'Training' },\r\n        { id: 'rent', label: 'Rent' },\r\n        { id: 'utilities', label: 'Utilities' },\r\n        { id: 'marketing', label: 'Marketing' },\r\n        { id: 'logistics', label: 'Logistics' },\r\n        { id: 'travel', label: 'Travel' },\r\n        { id: 'legal', label: 'Legal' },\r\n        { id: 'insurance', label: 'Insurance' },\r\n        { id: 'taxes', label: 'Taxes' },\r\n        { id: 'equipment', label: 'Equipment' },\r\n        { id: 'raw_materials', label: 'Raw Materials' },\r\n        { id: 'advertising', label: 'Advertising' },\r\n        { id: 'research', label: 'Research & Development' }\r\n      ],\r\n      multiple: false,\r\n      faker: 'random.arrayElement',\r\n    },\r\n    issuedAt: { label: 'Issued At', type: 'date', faker: 'date.past' },\r\n    receivedAt: { label: 'Received At', type: 'date', faker: 'date.past' },\r\n  \r\n    // Necessary fields when invoice comes from a provider\r\n    providerDetails: {\r\n      label: 'Provider Details',\r\n      type: 'text',\r\n      faker: 'company.name',\r\n    },\r\n    providerInvoiceNumber: {\r\n      label: 'Provider Invoice Number',\r\n      type: 'text',\r\n      faker: 'datatype.uuid',\r\n    },\r\n  };\r\n  export const headCells = Object.keys(fieldsConfig).map(key => ({\r\n    id: key,\r\n    label: fieldsConfig[key].label,\r\n  }));\r\n  \r\n  export const entityName = 'Invoices';\r\n  \r\n  \r\n  export const fetchItems = () => fetchDocuments(organizationId, 'invoices');\r\n  export const addItem = (item) => addDocument(organizationId, 'invoices', item);\r\n  export const updateItem = (id, item) => updateDocument(organizationId, 'invoices', id, item);\r\n  export const deleteItem = (id) => deleteDocument(organizationId, 'invoices', id);\r\n  \r\n  \r\n  \r\n  ","import { db } from './firebaseConfig'; // Assuming you have a Firebase config file\r\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query, where } from 'firebase/firestore';\r\n\r\n// Function to fetch documents specific to an organization from a subcollection\r\nexport const fetchDocuments = async (organizationId, subcollectionName) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const snapshot = await getDocs(subcollectionRef);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${subcollectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to add a new document linked to an organization in a subcollection\r\nexport const addDocument = async (organizationId, subcollectionName, documentData) => {\r\n  try {\r\n    documentData.organizationId = organizationId;\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const docRef = await addDoc(subcollectionRef, documentData);\r\n    return docRef.id; // Return the ID of the newly created document\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${subcollectionName}:`, error);\r\n    throw new Error(`Could not add document to ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to update an existing document in a subcollection\r\nexport const updateDocument = async (organizationId, subcollectionName, documentId, documentData) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await updateDoc(docRef, documentData);\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${subcollectionName}:`, error);\r\n    throw new Error(`Could not update document in ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to delete a document from a subcollection\r\nexport const deleteDocument = async (organizationId, subcollectionName, documentId) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${subcollectionName}:`, error);\r\n    throw new Error(`Could not delete document from ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n\r\nexport const fetchDocumentsBySelectValue = async (organizationId, relativeCollection, foreignKey, foreignValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(foreignKey, 'array-contains', foreignValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const fetchDocumentsByFieldValue = async (organizationId, relativeCollection, fieldName, fieldValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(fieldName, '==', fieldValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}"],"names":["organizationId","JSON","parse","localStorage","getItem","fieldsConfig","name","label","type","faker","service","partnerType","contactName","contactEmail","contactPhone","address","website","industry","agreementDate","contractValue","startDate","endDate","renewalDate","riskLevel","options","id","multiple","region","paymentTerms","complianceStatus","notes","multiline","rows","vendorCode","billingCycle","sla","paymentMethod","discountRate","preferredCurrency","lastAuditDate","supportContact","supportEmail","supportPhone","accountManager","partnerRating","partnershipStartDate","partnershipEndDate","numberOfEmployees","annualRevenue","partnershipLevel","preferredLanguage","taxExemptionStatus","invoiceType","invoiceCategory","issuedAt","receivedAt","providerDetails","providerInvoiceNumber","headCells","Object","keys","map","key","entityName","fetchItems","fetchDocuments","addItem","item","addDocument","updateItem","updateDocument","deleteItem","deleteDocument","async","subcollectionName","subcollectionRef","collection","db","snapshot","getDocs","docs","doc","data","error","console","documentData","addDoc","Error","documentId","docRef","updateDoc","deleteDoc","fetchDocumentsBySelectValue","relativeCollection","foreignKey","foreignValue","q","query","where","fetchDocumentsByFieldValue","fieldName","fieldValue"],"sourceRoot":""}