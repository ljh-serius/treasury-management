{"version":3,"file":"static/js/63940.7b3df492.chunk.js","mappings":"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","sources":["pages/Analysis/CorporateCommunication/ExternalCommunication/MediaRelations.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst MediaRelationsAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response || []); // Ensure data is an array\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // KPIs\r\n  const totalRelations = data.length;\r\n\r\n  // Communication Method Distribution\r\n  const communicationCount = data.reduce((acc, record) => {\r\n    acc[record.communicationMethod] = (acc[record.communicationMethod] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const communicationMethodDistribution = Object.keys(communicationCount).map(method => ({\r\n    name: method.charAt(0).toUpperCase() + method.slice(1).replace(/-/g, ' '),\r\n    y: communicationCount[method],\r\n  }));\r\n\r\n  // Highcharts options for Communication Method Distribution\r\n  const communicationMethodChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Communication Methods' },\r\n    series: [{\r\n      name: 'Methods',\r\n      colorByPoint: true,\r\n      data: communicationMethodDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Communications Over Time\r\n  const communicationTrendsChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Communications Over Time' },\r\n    xAxis: {\r\n      categories: data.map(record => new Date(record.communicationDate).toLocaleDateString()),\r\n      title: { text: 'Date' },\r\n    },\r\n    yAxis: { title: { text: 'Number of Communications' } },\r\n    series: [{\r\n      name: 'Communications',\r\n      data: data.map(() => 1), // Each communication counts as one\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Media Relations</Typography>\r\n          <Typography variant=\"h4\">{totalRelations}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={communicationMethodChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={communicationTrendsChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.mediaOutlet}:</Typography>\r\n              {Array.isArray(record.tags) ? record.tags.map((tag, tagIndex) => (\r\n                <Chip key={tagIndex} label={tag.label} style={{ margin: '5px' }} />\r\n              )) : 'No Tags'}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MediaRelationsAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalRelations","length","communicationCount","reduce","acc","record","communicationMethod","communicationMethodChartOptions","chart","type","title","text","series","name","colorByPoint","Object","keys","map","method","charAt","toUpperCase","slice","replace","y","communicationTrendsChartOptions","xAxis","categories","Date","communicationDate","toLocaleDateString","yAxis","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","HighchartsReact","highcharts","Highcharts","options","index","mediaOutlet","Array","isArray","tags","tag","tagIndex","Chip","label","style","margin"],"sourceRoot":""}