{"version":3,"file":"static/js/61272.9394747d.chunk.js","mappings":"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","sources":["pages/Analysis/SalesMarketing/Leads/LeadScoring.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function LeadScoringDashboard({ fetchData }) {\r\n  const [leadData, setLeadData] = useState([]);\r\n  const [totalLeads, setTotalLeads] = useState(0);\r\n  const [averageScore, setAverageScore] = useState(0);\r\n  const [highValueLeads, setHighValueLeads] = useState(0);\r\n  const [mediumValueLeads, setMediumValueLeads] = useState(0);\r\n  const [lowValueLeads, setLowValueLeads] = useState(0);\r\n  const [scoreDistribution, setScoreDistribution] = useState([]);\r\n  const [scoreTrends, setScoreTrends] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchData();\r\n      setLeadData(data);\r\n      processLeadData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchData]);\r\n\r\n  const processLeadData = (data) => {\r\n    // Total Leads\r\n    setTotalLeads(data.length);\r\n\r\n    // Average Score\r\n    const totalScore = data.reduce((acc, lead) => acc + Number(lead.score), 0);\r\n    setAverageScore(totalScore / data.length);\r\n\r\n    // Count High, Medium, and Low Value Leads\r\n    const highValue = data.filter(lead => lead.score >= 80).length;\r\n    const mediumValue = data.filter(lead => lead.score >= 50 && lead.score < 80).length;\r\n    const lowValue = data.filter(lead => lead.score < 50).length;\r\n    setHighValueLeads(highValue);\r\n    setMediumValueLeads(mediumValue);\r\n    setLowValueLeads(lowValue);\r\n\r\n    // Score Distribution for Pie Chart\r\n    const scoreCounts = data.reduce((acc, lead) => {\r\n      const scoreRange = Math.floor(lead.score / 10) * 10; // Group by 10%\r\n      acc[scoreRange] = (acc[scoreRange] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setScoreDistribution(Object.keys(scoreCounts).map(key => ({\r\n      name: `${key}-${parseInt(key) + 9}`,\r\n      y: scoreCounts[key],\r\n    })));\r\n\r\n    // Score Trends Over Time\r\n    const trends = data.map(lead => ({\r\n      date: new Date(lead.createdDate).getTime(),\r\n      score: lead.score,\r\n    })).sort((a, b) => a.date - b.date);\r\n    setScoreTrends(trends);\r\n  };\r\n\r\n  // Highcharts options for Score Distribution\r\n  const scoreDistributionChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Score Distribution' },\r\n    series: [{\r\n      name: 'Leads',\r\n      colorByPoint: true,\r\n      data: scoreDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Score Trends Over Time\r\n  const scoreTrendsChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Score Trends Over Time' },\r\n    xAxis: { type: 'datetime', title: { text: 'Date' } },\r\n    yAxis: { title: { text: 'Score' } },\r\n    series: [{\r\n      name: 'Lead Score',\r\n      data: scoreTrends.map(item => [item.date, item.score]),\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Lead Scoring Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Leads</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalLeads}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Score</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageScore.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">High Value Leads</Typography>\r\n                <Typography variant=\"h4\" color=\"purple\" sx={{ fontWeight: 'bold' }}>\r\n                  {highValueLeads}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Low Value Leads</Typography>\r\n                <Typography variant=\"h4\" color=\"red\" sx={{ fontWeight: 'bold' }}>\r\n                  {lowValueLeads}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Score Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={scoreDistributionChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Score Trends Over Time Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={scoreTrendsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["LeadScoringDashboard","_ref","fetchData","leadData","setLeadData","useState","totalLeads","setTotalLeads","averageScore","setAverageScore","highValueLeads","setHighValueLeads","mediumValueLeads","setMediumValueLeads","lowValueLeads","setLowValueLeads","scoreDistribution","setScoreDistribution","scoreTrends","setScoreTrends","loading","setLoading","useEffect","async","data","processLeadData","fetchDataAsync","length","totalScore","reduce","acc","lead","Number","score","highValue","filter","mediumValue","lowValue","scoreCounts","scoreRange","Math","floor","Object","keys","map","key","name","parseInt","y","trends","date","Date","createdDate","getTime","sort","a","b","scoreDistributionChartOptions","chart","type","title","text","series","colorByPoint","scoreTrendsChartOptions","xAxis","yAxis","item","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}