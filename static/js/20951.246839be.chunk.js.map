{"version":3,"file":"static/js/20951.246839be.chunk.js","mappings":"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","sources":["pages/Analysis/MergersAcquisitions/PostMergerIntegration/SystemsIntegration.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst SystemsIntegrationAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response || []); // Ensure data is an array\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // KPIs\r\n  const totalProgress = data.reduce((sum, record) => sum + Number(record.progress), 0);\r\n  const averageProgress = (totalProgress / data.length).toFixed(2);\r\n\r\n  const statusCounts = data.reduce((acc, record) => {\r\n    acc[record.status] = (acc[record.status] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const statusDistribution = Object.keys(statusCounts).map(status => ({\r\n    name: status.charAt(0).toUpperCase() + status.slice(1),\r\n    y: statusCounts[status],\r\n  }));\r\n\r\n  // Highcharts options for Progress over Time\r\n  const progressChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Progress Over Time' },\r\n    xAxis: {\r\n      categories: data.map(record => new Date(record.startDate).getFullYear()),\r\n      title: { text: 'Year' }\r\n    },\r\n    yAxis: { title: { text: 'Progress (%)' } },\r\n    series: [{\r\n      name: 'Progress',\r\n      data: data.map(record => record.progress),\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Status Distribution\r\n  const statusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Systems Integration Status Distribution' },\r\n    series: [{\r\n      name: 'Status',\r\n      colorByPoint: true,\r\n      data: statusDistribution,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Average Progress (%)</Typography>\r\n          <Typography variant=\"h4\">{averageProgress}%</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Systems Integrations</Typography>\r\n          <Typography variant=\"h4\">{data.length}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={progressChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>IT Systems Involved</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.itSystemsInvolved}:</Typography>\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SystemsIntegrationAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","averageProgress","reduce","sum","record","Number","progress","length","toFixed","statusCounts","acc","status","statusDistribution","Object","keys","map","name","charAt","toUpperCase","slice","y","progressChartOptions","chart","type","title","text","xAxis","categories","Date","startDate","getFullYear","yAxis","series","statusChartOptions","colorByPoint","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","HighchartsReact","highcharts","Highcharts","options","index","itSystemsInvolved"],"sourceRoot":""}