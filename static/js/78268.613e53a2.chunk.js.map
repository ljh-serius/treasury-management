{"version":3,"file":"static/js/78268.613e53a2.chunk.js","mappings":"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","sources":["pages/Analysis/TrainingDevelopment/SkillDevelopment/TrainingNeedsAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function TrainingNeedsAnalysisDashboard({ fetchItems }) {\r\n  const [analysisData, setAnalysisData] = useState([]);\r\n  const [priorityDistribution, setPriorityDistribution] = useState([]);\r\n  const [departmentDistribution, setDepartmentDistribution] = useState([]);\r\n  const [analysisTrendsData, setAnalysisTrendsData] = useState([]);\r\n  const [recommendedTrainingData, setRecommendedTrainingData] = useState([]);\r\n  const [totalAnalyses, setTotalAnalyses] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setAnalysisData(data);\r\n      processAnalysisData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processAnalysisData = (data) => {\r\n    // Total Analyses\r\n    setTotalAnalyses(data.length);\r\n\r\n    // Priority Distribution\r\n    const priorityCounts = data.reduce((acc, analysis) => {\r\n      acc[analysis.priorityLevel] = (acc[analysis.priorityLevel] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setPriorityDistribution(Object.keys(priorityCounts).map(key => ({\r\n      name: key,\r\n      y: priorityCounts[key],\r\n    })));\r\n\r\n    // Analyses by Department\r\n    const departmentCounts = data.reduce((acc, analysis) => {\r\n      acc[analysis.department] = (acc[analysis.department] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setDepartmentDistribution(Object.keys(departmentCounts).map(key => ({\r\n      name: key,\r\n      y: departmentCounts[key],\r\n    })));\r\n\r\n    // Analysis Trends Over Time\r\n    const trendsData = data.reduce((acc, analysis) => {\r\n      const month = new Date(analysis.analysisDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setAnalysisTrendsData(Object.keys(trendsData).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: trendsData[key],\r\n    })));\r\n\r\n    // Recommended Training Frequency\r\n    const trainingCounts = data.reduce((acc, analysis) => {\r\n      acc[analysis.recommendedTraining] = (acc[analysis.recommendedTraining] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setRecommendedTrainingData(Object.keys(trainingCounts).map(key => ({\r\n      name: key,\r\n      y: trainingCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const priorityChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Priority Level Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Priority Level',\r\n        colorByPoint: true,\r\n        data: priorityDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const departmentChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Analyses by Department',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Department',\r\n        data: departmentDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const analysisTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Analysis Trends Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: analysisTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Analyses',\r\n        data: analysisTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const recommendedTrainingChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Recommended Training Programs',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Training',\r\n        data: recommendedTrainingData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Training Needs Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Analyses</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalAnalyses}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={priorityChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={departmentChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={analysisTrendsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={recommendedTrainingChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["TrainingNeedsAnalysisDashboard","_ref","fetchItems","analysisData","setAnalysisData","useState","priorityDistribution","setPriorityDistribution","departmentDistribution","setDepartmentDistribution","analysisTrendsData","setAnalysisTrendsData","recommendedTrainingData","setRecommendedTrainingData","totalAnalyses","setTotalAnalyses","loading","setLoading","useEffect","async","data","processAnalysisData","fetchData","length","priorityCounts","reduce","acc","analysis","priorityLevel","Object","keys","map","key","name","y","departmentCounts","department","trendsData","month","Date","analysisDate","getMonth","trainingCounts","recommendedTraining","priorityChartOptions","chart","type","title","text","series","colorByPoint","departmentChartOptions","analysisTrendsChartOptions","xAxis","categories","recommendedTrainingChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}