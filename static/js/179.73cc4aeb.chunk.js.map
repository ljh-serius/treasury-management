{"version":3,"file":"static/js/179.73cc4aeb.chunk.js","mappings":"mRAKe,SAASA,EAAwBC,GAAqB,IAApB,cAAEC,GAAeD,EAChE,MAAOE,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAsBC,IAA2BF,EAAAA,EAAAA,UAAS,KAC1DG,EAAoBC,IAAyBJ,EAAAA,EAAAA,UAAS,KACtDK,EAAyBC,IAA8BN,EAAAA,EAAAA,UAAS,KAChEO,EAAuBC,IAA4BR,EAAAA,EAAAA,UAAS,KAC5DS,EAAoBC,IAAyBV,EAAAA,EAAAA,UAAS,IACtDW,EAAsBC,IAA2BZ,EAAAA,EAAAA,UAAS,IAC1Da,EAAaC,IAAkBd,EAAAA,EAAAA,UAAS,KAE/Ce,EAAAA,EAAAA,YAAU,KACUC,WAChB,MAAMC,QAAapB,IACfoB,GAAQA,EAAKC,OAAS,GACxBnB,EAAgBkB,GAChBE,EAAmBF,IAEnBG,QAAQC,IAAI,6BACd,EAGFC,EAAW,GACV,CAACzB,IAEJ,MAAMsB,EAAsBF,IAC1B,IAAKA,GAAwB,IAAhBA,EAAKC,OAEhB,YADAE,QAAQC,IAAI,uBAKd,MAAME,EAAiBN,EAAKO,QAAO,CAACC,EAAKC,KACvCD,EAAIC,EAAQC,WAAaF,EAAIC,EAAQC,WAAa,GAAK,EAChDF,IACN,CAAC,GAEJvB,EAAwB0B,OAAOC,KAAKN,GAAgBO,KAAIC,IAAG,CACzDC,KAAMD,EACNE,EAAGV,EAAeQ,QAIpB,MAAMG,EAAejB,EAAKO,QAAO,CAACC,EAAKC,KACrCD,EAAIC,EAAQS,SAAWV,EAAIC,EAAQS,SAAW,GAAK,EAC5CV,IACN,CAAC,GAEJrB,EAAsBwB,OAAOC,KAAKK,GAAcJ,KAAIC,IAAG,CACrDC,KAAMD,EACNE,EAAGC,EAAaH,QAIlB,MAAMK,EAAoBnB,EAAKO,QAAO,CAACC,EAAKC,KAC1CD,EAAIC,EAAQW,cAAgBZ,EAAIC,EAAQW,cAAgB,GAAK,EACtDZ,IACN,CAAC,GAEJnB,EAA2BsB,OAAOC,KAAKO,GAAmBN,KAAIC,IAAG,CAC/DC,KAAMD,EACNE,EAAGG,EAAkBL,QAIvB,MAAMO,EAAkBrB,EAAKO,QAAO,CAACC,EAAKC,KACxCD,EAAIC,EAAQa,YAAcd,EAAIC,EAAQa,YAAc,GAAK,EAClDd,IACN,CAAC,GAEJjB,EAAyBoB,OAAOC,KAAKS,GAAiBR,KAAIC,IAAG,CAC3DC,KAAMD,EACNE,EAAGK,EAAgBP,QAIrB,MAAMS,EAAavB,EAAKO,QAAO,CAACC,EAAKC,IAAYD,GAAOgB,OAAOf,EAAQgB,gBAAkB,IAAI,GAC7FhC,EAAsB8B,GACtB,MAAMG,EAAe1B,EAAKC,OAASsB,EAAavB,EAAKC,OAAS,EAC9DN,EAAwB+B,GAGxB,MAAMC,EAAkB3B,EACrB4B,MAAK,CAACC,EAAGC,KAAON,OAAOM,EAAEL,gBAAkB,IAAMD,OAAOK,EAAEJ,gBAAkB,KAC5EM,MAAM,EAAG,GACZlC,EAAe8B,EAAgB,EAG3BK,EAAuB,CAC3BC,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,oCAERC,OAAQ,CACN,CACEtB,KAAM,WACNuB,cAAc,EACdtC,KAAMhB,KAKNuD,EAAqB,CACzBN,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,kCAERC,OAAQ,CACN,CACEtB,KAAM,WACNuB,cAAc,EACdtC,KAAMd,KAKNsD,EAA0B,CAC9BP,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,gCAERC,OAAQ,CACN,CACEtB,KAAM,WACNuB,cAAc,EACdtC,KAAMZ,KAKNqD,EAAwB,CAC5BR,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,mCAERC,OAAQ,CACN,CACEtB,KAAM,WACNuB,cAAc,EACdtC,KAAMV,KAKNoD,EAA0B,CAC9BT,MAAO,CACLC,KAAM,UAERC,MAAO,CACLC,KAAM,oCAERC,OAAQ,CACN,CACEtB,KAAM,iBACNf,KAAMJ,EAAYiB,KAAIJ,IAAO,CAC3BM,KAAMN,EAAQM,KACdC,EAAGQ,OAAOf,EAAQgB,sBAM1B,OACEkB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,WAAY,EAAGC,cAAe,GAAIC,UAC/DC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACL,GAAI,CAAEM,QAAS,GAAIH,SAAA,EACtBN,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAN,SAAC,gCAGtCC,EAAAA,EAAAA,MAACM,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAET,SAAA,EAEzBN,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEZ,UACvBN,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAAb,UACHC,EAAAA,EAAAA,MAACa,EAAAA,EAAW,CAAAd,SAAA,EACVN,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIL,SAAC,0BACzBC,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACC,QAAQ,KAAKU,MAAM,QAAQlB,GAAI,CAAEmB,WAAY,QAAShB,SAAA,CAAC,IAC/DzB,OAAOhC,GAAoB0E,QAAQ,OAEvCvB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,QAAOL,SAAC,sEAMlCN,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEZ,UACvBN,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAAb,UACHC,EAAAA,EAAAA,MAACa,EAAAA,EAAW,CAAAd,SAAA,EACVN,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIL,SAAC,4BACzBC,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACC,QAAQ,KAAKU,MAAM,OAAOlB,GAAI,CAAEmB,WAAY,QAAShB,SAAA,CAAC,IAC9DzB,OAAO9B,GAAsBwE,QAAQ,OAEzCvB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,QAAOL,SAAC,4DAMlCN,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEZ,UACvBN,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAAb,UACHC,EAAAA,EAAAA,MAACa,EAAAA,EAAW,CAAAd,SAAA,EACVN,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIL,SAAC,sCACzBN,EAAAA,EAAAA,KAAA,MAAAM,SACGrD,EAAYiB,KAAIJ,IACfkC,EAAAA,EAAAA,KAAA,MAAAM,UACEC,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACC,QAAQ,QAAOL,SAAA,CACxBxC,EAAQM,KAAK,cAAYS,OAAOf,EAAQgB,eAAeyC,QAAQ,OAF3DzD,EAAQ0D,gBAY3BxB,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEZ,UACvBN,EAAAA,EAAAA,KAACyB,IAAe,CAACC,WAAYC,IAAYC,QAASvC,OAEpDW,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEZ,UACvBN,EAAAA,EAAAA,KAACyB,IAAe,CAACC,WAAYC,IAAYC,QAAShC,OAEpDI,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEZ,UACvBN,EAAAA,EAAAA,KAACyB,IAAe,CAACC,WAAYC,IAAYC,QAAS/B,OAEpDG,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEZ,UACvBN,EAAAA,EAAAA,KAACyB,IAAe,CAACC,WAAYC,IAAYC,QAAS9B,OAEpDE,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAGZ,UACxBN,EAAAA,EAAAA,KAACyB,IAAe,CAACC,WAAYC,IAAYC,QAAS7B,aAM9D,C","sources":["pages/Analysis/Partners.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\n\r\nexport default function PartnerAnalysisDashboard({ fetchPartners }) {\r\n  const [partnersData, setPartnersData] = useState([]);\r\n  const [industryDistribution, setIndustryDistribution] = useState([]);\r\n  const [regionDistribution, setRegionDistribution] = useState([]);\r\n  const [partnerTypeDistribution, setPartnerTypeDistribution] = useState([]);\r\n  const [riskLevelDistribution, setRiskLevelDistribution] = useState([]);\r\n  const [totalContractValue, setTotalContractValue] = useState(0);\r\n  const [averageContractValue, setAverageContractValue] = useState(0);\r\n  const [topPartners, setTopPartners] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = await fetchPartners();\r\n      if (data && data.length > 0) {\r\n        setPartnersData(data);\r\n        processPartnerData(data);\r\n      } else {\r\n        console.log(\"No partner data available.\");\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchPartners]);\r\n\r\n  const processPartnerData = (data) => {\r\n    if (!data || data.length === 0) {\r\n      console.log(\"No data to process.\");\r\n      return;\r\n    }\r\n\r\n    // Industry Distribution\r\n    const industryCounts = data.reduce((acc, partner) => {\r\n      acc[partner.industry] = (acc[partner.industry] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setIndustryDistribution(Object.keys(industryCounts).map(key => ({\r\n      name: key,\r\n      y: industryCounts[key],\r\n    })));\r\n\r\n    // Region Distribution\r\n    const regionCounts = data.reduce((acc, partner) => {\r\n      acc[partner.region] = (acc[partner.region] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setRegionDistribution(Object.keys(regionCounts).map(key => ({\r\n      name: key,\r\n      y: regionCounts[key],\r\n    })));\r\n\r\n    // Partner Type Distribution\r\n    const partnerTypeCounts = data.reduce((acc, partner) => {\r\n      acc[partner.partnerType] = (acc[partner.partnerType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setPartnerTypeDistribution(Object.keys(partnerTypeCounts).map(key => ({\r\n      name: key,\r\n      y: partnerTypeCounts[key],\r\n    })));\r\n\r\n    // Risk Level Distribution\r\n    const riskLevelCounts = data.reduce((acc, partner) => {\r\n      acc[partner.riskLevel] = (acc[partner.riskLevel] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setRiskLevelDistribution(Object.keys(riskLevelCounts).map(key => ({\r\n      name: key,\r\n      y: riskLevelCounts[key],\r\n    })));\r\n\r\n    // Total and Average Contract Value\r\n    const totalValue = data.reduce((acc, partner) => acc + (Number(partner.contractValue) || 0), 0);\r\n    setTotalContractValue(totalValue);\r\n    const averageValue = data.length ? totalValue / data.length : 0;\r\n    setAverageContractValue(averageValue);\r\n\r\n    // Top 5 Partners by Contract Value\r\n    const topPartnersList = data\r\n      .sort((a, b) => (Number(b.contractValue) || 0) - (Number(a.contractValue) || 0))\r\n      .slice(0, 5);\r\n    setTopPartners(topPartnersList);\r\n  };\r\n\r\n  const industryChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Partner Distribution by Industry',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Partners',\r\n        colorByPoint: true,\r\n        data: industryDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const regionChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Partner Distribution by Region',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Partners',\r\n        colorByPoint: true,\r\n        data: regionDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const partnerTypeChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Partner Distribution by Type',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Partners',\r\n        colorByPoint: true,\r\n        data: partnerTypeDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const riskLevelChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Partner Risk Level Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Partners',\r\n        colorByPoint: true,\r\n        data: riskLevelDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const topPartnersChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Top 5 Partners by Contract Value',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Contract Value',\r\n        data: topPartners.map(partner => ({\r\n          name: partner.name,\r\n          y: Number(partner.contractValue),\r\n        })),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Partner Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Contract Value</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${Number(totalContractValue).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total value of all partner contracts.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Contract Value</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${Number(averageContractValue).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This is the average value per partner contract.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Partners by Contract Value</Typography>\r\n                <ol>\r\n                  {topPartners.map(partner => (\r\n                    <li key={partner.id}>\r\n                      <Typography variant=\"body2\">\r\n                        {partner.name} - Value: ${Number(partner.contractValue).toFixed(2)}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={industryChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={regionChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={partnerTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={riskLevelChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={topPartnersChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["PartnerAnalysisDashboard","_ref","fetchPartners","partnersData","setPartnersData","useState","industryDistribution","setIndustryDistribution","regionDistribution","setRegionDistribution","partnerTypeDistribution","setPartnerTypeDistribution","riskLevelDistribution","setRiskLevelDistribution","totalContractValue","setTotalContractValue","averageContractValue","setAverageContractValue","topPartners","setTopPartners","useEffect","async","data","length","processPartnerData","console","log","fetchData","industryCounts","reduce","acc","partner","industry","Object","keys","map","key","name","y","regionCounts","region","partnerTypeCounts","partnerType","riskLevelCounts","riskLevel","totalValue","Number","contractValue","averageValue","topPartnersList","sort","a","b","slice","industryChartOptions","chart","type","title","text","series","colorByPoint","regionChartOptions","partnerTypeChartOptions","riskLevelChartOptions","topPartnersChartOptions","_jsx","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsxs","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","color","fontWeight","toFixed","id","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}