{"version":3,"file":"static/js/87993.5c14984a.chunk.js","mappings":"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","sources":["pages/Analysis/TrainingDevelopment/LeadershipPrograms/ExecutiveTraining.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function ExecutiveTrainingDashboard({ fetchItems }) {\r\n  const [trainingsData, setTrainingsData] = useState([]);\r\n  const [targetGroupDistribution, setTargetGroupDistribution] = useState([]);\r\n  const [locationDistribution, setLocationDistribution] = useState([]);\r\n  const [trainerDistribution, setTrainerDistribution] = useState([]);\r\n  const [averageDuration, setAverageDuration] = useState(0);\r\n  const [totalTrainings, setTotalTrainings] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setTrainingsData(data);\r\n      processTrainingData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processTrainingData = (data) => {\r\n    // Total Trainings\r\n    setTotalTrainings(data.length);\r\n\r\n    // Trainings by Target Group\r\n    const targetGroupCounts = data.reduce((acc, training) => {\r\n      acc[training.targetGroup] = (acc[training.targetGroup] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setTargetGroupDistribution(Object.keys(targetGroupCounts).map(key => ({\r\n      name: key,\r\n      y: targetGroupCounts[key],\r\n    })));\r\n\r\n    // Trainings by Location\r\n    const locationCounts = data.reduce((acc, training) => {\r\n      acc[training.location] = (acc[training.location] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setLocationDistribution(Object.keys(locationCounts).map(key => ({\r\n      name: key,\r\n      y: locationCounts[key],\r\n    })));\r\n\r\n    // Average Duration of Trainings\r\n    const totalDuration = data.reduce((acc, training) => acc + Number(training.duration), 0);\r\n    setAverageDuration(totalDuration / data.length);\r\n\r\n    // Trainings by Trainer\r\n    const trainerCounts = data.reduce((acc, training) => {\r\n      acc[training.trainerName] = (acc[training.trainerName] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setTrainerDistribution(Object.keys(trainerCounts).map(key => ({\r\n      name: key,\r\n      y: trainerCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const targetGroupChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Trainings by Target Group',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Target Group',\r\n        colorByPoint: true,\r\n        data: targetGroupDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const locationChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Trainings by Location',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Location',\r\n        data: locationDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const trainerChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Trainings by Trainer',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Trainer',\r\n        data: trainerDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Executive Training Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Trainings</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalTrainings}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Duration (days)</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageDuration.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={targetGroupChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={locationChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={trainerChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ExecutiveTrainingDashboard","_ref","fetchItems","trainingsData","setTrainingsData","useState","targetGroupDistribution","setTargetGroupDistribution","locationDistribution","setLocationDistribution","trainerDistribution","setTrainerDistribution","averageDuration","setAverageDuration","totalTrainings","setTotalTrainings","loading","setLoading","useEffect","async","data","processTrainingData","fetchData","length","targetGroupCounts","reduce","acc","training","targetGroup","Object","keys","map","key","name","y","locationCounts","location","totalDuration","Number","duration","trainerCounts","trainerName","targetGroupChartOptions","chart","type","title","text","series","colorByPoint","locationChartOptions","trainerChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}