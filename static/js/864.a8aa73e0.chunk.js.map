{"version":3,"file":"static/js/864.a8aa73e0.chunk.js","mappings":"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","sources":["pages/Analysis/Providers.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\n\r\nexport default function ProviderAnalysisDashboard({ fetchProviders }) {\r\n  const [providersData, setProvidersData] = useState([]);\r\n  const [countryDistribution, setCountryDistribution] = useState([]);\r\n  const [industryDistribution, setIndustryDistribution] = useState([]);\r\n  const [companyTypeDistribution, setCompanyTypeDistribution] = useState([]);\r\n  const [ratingDistribution, setRatingDistribution] = useState([]);\r\n  const [annualRevenueData, setAnnualRevenueData] = useState([]);\r\n  const [totalAnnualRevenue, setTotalAnnualRevenue] = useState(0);\r\n  const [averageRating, setAverageRating] = useState(0);\r\n  const [topProviders, setTopProviders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = await fetchProviders();\r\n      if (data && data.length > 0) {\r\n        setProvidersData(data);\r\n        processProviderData(data);\r\n      } else {\r\n        console.log(\"No provider data available.\");\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchProviders]);\r\n\r\n  const processProviderData = (data) => {\r\n    if (!data || data.length === 0) {\r\n      console.log(\"No data to process.\");\r\n      return;\r\n    }\r\n\r\n    // Country Distribution\r\n    const countryCounts = data.reduce((acc, provider) => {\r\n      acc[provider.country] = (acc[provider.country] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCountryDistribution(Object.keys(countryCounts).map(key => ({\r\n      name: key,\r\n      y: countryCounts[key],\r\n    })));\r\n\r\n    // Industry Distribution\r\n    const industryCounts = data.reduce((acc, provider) => {\r\n      acc[provider.industry] = (acc[provider.industry] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setIndustryDistribution(Object.keys(industryCounts).map(key => ({\r\n      name: key,\r\n      y: industryCounts[key],\r\n    })));\r\n\r\n    // Company Type Distribution\r\n    const companyTypeCounts = data.reduce((acc, provider) => {\r\n      acc[provider.companyType] = (acc[provider.companyType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCompanyTypeDistribution(Object.keys(companyTypeCounts).map(key => ({\r\n      name: key,\r\n      y: companyTypeCounts[key],\r\n    })));\r\n\r\n    // Rating Distribution\r\n    const ratingCounts = data.reduce((acc, provider) => {\r\n      const rating = Math.round(provider.rating); // Rounding to nearest integer for rating distribution\r\n      acc[rating] = (acc[rating] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setRatingDistribution(Object.keys(ratingCounts).map(key => ({\r\n      name: `${key} Stars`,\r\n      y: ratingCounts[key],\r\n    })));\r\n\r\n    // Annual Revenue Data\r\n    const revenueSum = data.reduce((acc, provider) => acc + (Number(provider.annualRevenue) || 0), 0);\r\n    setTotalAnnualRevenue(revenueSum);\r\n\r\n    setAnnualRevenueData(data.map(provider => ({\r\n      name: provider.name,\r\n      y: Number(provider.annualRevenue) || 0,\r\n    })));\r\n\r\n    // Average Rating\r\n    const ratingSum = data.reduce((acc, provider) => acc + (Number(provider.rating) || 0), 0);\r\n    const averageRatingValue = data.length ? ratingSum / data.length : 0;\r\n    setAverageRating(averageRatingValue);\r\n\r\n    // Top 5 Providers by Annual Revenue\r\n    const topProvidersList = data\r\n      .sort((a, b) => (Number(b.annualRevenue) || 0) - (Number(a.annualRevenue) || 0))\r\n      .slice(0, 5);\r\n    setTopProviders(topProvidersList);\r\n  };\r\n\r\n  const countryChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Provider Distribution by Country',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Providers',\r\n        colorByPoint: true,\r\n        data: countryDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const industryChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Provider Distribution by Industry',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Providers',\r\n        colorByPoint: true,\r\n        data: industryDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const companyTypeChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Provider Distribution by Company Type',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Providers',\r\n        colorByPoint: true,\r\n        data: companyTypeDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const ratingChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Provider Rating Distribution',\r\n    },\r\n    xAxis: {\r\n      categories: ratingDistribution.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Providers',\r\n        data: ratingDistribution.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const annualRevenueChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Annual Revenue of Providers',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Revenue',\r\n        data: annualRevenueData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Provider Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Annual Revenue</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${Number(totalAnnualRevenue).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total annual revenue across all providers.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Provider Rating</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  {Number(averageRating).toFixed(2)} Stars\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This is the average rating of all providers.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Providers by Annual Revenue</Typography>\r\n                <ol>\r\n                  {topProviders.map(provider => (\r\n                    <li key={provider.id}>\r\n                      <Typography variant=\"body2\">\r\n                        {provider.name} - Revenue: ${Number(provider.annualRevenue).toFixed(2)}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={countryChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={industryChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={companyTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={ratingChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={annualRevenueChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ProviderAnalysisDashboard","_ref","fetchProviders","providersData","setProvidersData","useState","countryDistribution","setCountryDistribution","industryDistribution","setIndustryDistribution","companyTypeDistribution","setCompanyTypeDistribution","ratingDistribution","setRatingDistribution","annualRevenueData","setAnnualRevenueData","totalAnnualRevenue","setTotalAnnualRevenue","averageRating","setAverageRating","topProviders","setTopProviders","useEffect","async","data","length","processProviderData","console","log","fetchData","countryCounts","reduce","acc","provider","country","Object","keys","map","key","name","y","industryCounts","industry","companyTypeCounts","companyType","ratingCounts","rating","Math","round","revenueSum","Number","annualRevenue","ratingSum","averageRatingValue","topProvidersList","sort","a","b","slice","countryChartOptions","chart","type","title","text","series","colorByPoint","industryChartOptions","companyTypeChartOptions","ratingChartOptions","xAxis","categories","annualRevenueChartOptions","_jsx","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsxs","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","color","fontWeight","toFixed","id","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}