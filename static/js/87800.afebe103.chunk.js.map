{"version":3,"file":"static/js/87800.afebe103.chunk.js","mappings":"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","sources":["pages/Analysis/TrainingDevelopment/LearningManagement/LearningPaths.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function LearningPathsDashboard({ fetchItems }) {\r\n  const [learningPathsData, setLearningPathsData] = useState([]);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [departmentDistribution, setDepartmentDistribution] = useState([]);\r\n  const [averageDuration, setAverageDuration] = useState(0);\r\n  const [topSkillsData, setTopSkillsData] = useState([]);\r\n  const [totalPaths, setTotalPaths] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setLearningPathsData(data);\r\n      processLearningPathsData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processLearningPathsData = (data) => {\r\n    // Total Paths\r\n    setTotalPaths(data.length);\r\n\r\n    // Status Distribution\r\n    const statusCounts = data.reduce((acc, path) => {\r\n      acc[path.status] = (acc[path.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key,\r\n      y: statusCounts[key],\r\n    })));\r\n\r\n    // Department Distribution\r\n    const departmentCounts = data.reduce((acc, path) => {\r\n      acc[path.department] = (acc[path.department] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setDepartmentDistribution(Object.keys(departmentCounts).map(key => ({\r\n      name: key,\r\n      y: departmentCounts[key],\r\n    })));\r\n\r\n    // Average Estimated Duration\r\n    const totalDuration = data.reduce((acc, path) => acc + Number(path.estimatedDuration), 0);\r\n    setAverageDuration(totalDuration / data.length);\r\n\r\n    // Top Target Skills\r\n    const skillCounts = data.reduce((acc, path) => {\r\n      path.targetSkills.split(' ').forEach(skill => {\r\n        acc[skill] = (acc[skill] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTopSkillsData(Object.keys(skillCounts).map(key => ({\r\n      name: key,\r\n      y: skillCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const statusChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Learning Paths by Status',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Status',\r\n        colorByPoint: true,\r\n        data: statusDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const departmentChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Learning Paths by Department',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Department',\r\n        data: departmentDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const topSkillsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Top Target Skills',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Skills',\r\n        data: topSkillsData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Learning Paths Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Learning Paths</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalPaths}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Duration (hours)</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageDuration.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={departmentChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={topSkillsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["LearningPathsDashboard","_ref","fetchItems","learningPathsData","setLearningPathsData","useState","statusDistribution","setStatusDistribution","departmentDistribution","setDepartmentDistribution","averageDuration","setAverageDuration","topSkillsData","setTopSkillsData","totalPaths","setTotalPaths","loading","setLoading","useEffect","async","data","processLearningPathsData","fetchData","length","statusCounts","reduce","acc","path","status","Object","keys","map","key","name","y","departmentCounts","department","totalDuration","Number","estimatedDuration","skillCounts","targetSkills","split","forEach","skill","statusChartOptions","chart","type","title","text","series","colorByPoint","departmentChartOptions","topSkillsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}