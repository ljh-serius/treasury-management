{"version":3,"file":"static/js/81627.cca1cd82.chunk.js","mappings":"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","sources":["pages/Analysis/CustomerSupport/Feedback/FeedbackAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function FeedbackAnalysisDashboard({ fetchItems }) {\r\n  const [feedbackData, setFeedbackData] = useState([]);\r\n  const [totalFeedback, setTotalFeedback] = useState(0);\r\n  const [feedbackTypeDistribution, setFeedbackTypeDistribution] = useState([]);\r\n  const [feedbackTimeline, setFeedbackTimeline] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setFeedbackData(data);\r\n      processFeedbackData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchItems]);\r\n\r\n  const processFeedbackData = (data) => {\r\n    // Total Feedback\r\n    setTotalFeedback(data.length);\r\n\r\n    // Feedback Type Distribution for Pie Chart\r\n    const typeCounts = data.reduce((acc, feedback) => {\r\n      acc[feedback.feedbackType] = (acc[feedback.feedbackType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setFeedbackTypeDistribution(Object.keys(typeCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: typeCounts[key],\r\n    })));\r\n\r\n    // Feedback Timeline for Line Chart\r\n    const timelineData = data.map(feedback => ({\r\n      date: new Date(feedback.feedbackDate).getTime(),\r\n      label: `Feedback ${feedback.feedbackId.slice(-4)}`,\r\n    })).sort((a, b) => a.date - b.date);\r\n    setFeedbackTimeline(timelineData);\r\n  };\r\n\r\n  // Highcharts options for Feedback Type Distribution\r\n  const feedbackTypeChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Feedback Type Distribution' },\r\n    series: [{\r\n      name: 'Feedback Type',\r\n      colorByPoint: true,\r\n      data: feedbackTypeDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Feedback Timeline\r\n  const feedbackTimelineChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Feedback Entries Over Time' },\r\n    xAxis: { type: 'datetime', title: { text: 'Feedback Date' } },\r\n    yAxis: { title: { text: 'Feedback Entries' } },\r\n    series: [{\r\n      name: 'Feedback Entries',\r\n      data: feedbackTimeline.map(item => [item.date, 1]), // Y-axis is constant (1) since we're counting the occurrences\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Feedback Analysis Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Feedback</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalFeedback}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Feedback Type Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={feedbackTypeChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Feedback Timeline Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={feedbackTimelineChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["FeedbackAnalysisDashboard","_ref","fetchItems","feedbackData","setFeedbackData","useState","totalFeedback","setTotalFeedback","feedbackTypeDistribution","setFeedbackTypeDistribution","feedbackTimeline","setFeedbackTimeline","loading","setLoading","useEffect","async","data","processFeedbackData","fetchDataAsync","length","typeCounts","reduce","acc","feedback","feedbackType","Object","keys","map","key","name","charAt","toUpperCase","slice","y","timelineData","date","Date","feedbackDate","getTime","label","feedbackId","sort","a","b","feedbackTypeChartOptions","chart","type","title","text","series","colorByPoint","feedbackTimelineChartOptions","xAxis","yAxis","item","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}