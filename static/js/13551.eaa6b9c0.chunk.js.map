{"version":3,"file":"static/js/13551.eaa6b9c0.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/AccountsPayable/PaymentTerms.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function PaymentTermsDashboard({ fetchItems }) {\r\n  const [termsData, setTermsData] = useState([]);\r\n  const [isActiveDistribution, setIsActiveDistribution] = useState([]);\r\n  const [netDaysDistribution, setNetDaysDistribution] = useState([]);\r\n  const [tagsDistribution, setTagsDistribution] = useState([]);\r\n  const [monthlyCreatedData, setMonthlyCreatedData] = useState([]);\r\n  const [modificationTrendsData, setModificationTrendsData] = useState([]);\r\n  const [totalTerms, setTotalTerms] = useState(0);\r\n  const [averageNetDays, setAverageNetDays] = useState(0);\r\n  const [recentModifications, setRecentModifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setTermsData(data);\r\n      processTermsData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processTermsData = (data) => {\r\n    // Total Number of Payment Terms\r\n    setTotalTerms(data.length);\r\n\r\n    // Active vs. Inactive Payment Terms\r\n    const activeCounts = data.reduce((acc, term) => {\r\n      acc[term.isActive] = (acc[term.isActive] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setIsActiveDistribution(Object.keys(activeCounts).map(key => ({\r\n      name: key === 'yes' ? 'Active' : 'Inactive',\r\n      y: activeCounts[key],\r\n    })));\r\n\r\n    // Average Net Days\r\n    const totalNetDays = data.reduce((acc, term) => acc + Number(term.netDays || 0), 0);\r\n    setAverageNetDays(totalNetDays / data.length);\r\n\r\n    // Net Days Distribution\r\n    const netDaysCounts = data.reduce((acc, term) => {\r\n      const range = term.netDays <= 30 ? '0-30' :\r\n                    term.netDays <= 60 ? '31-60' :\r\n                    term.netDays <= 90 ? '61-90' : '91+';\r\n      acc[range] = (acc[range] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setNetDaysDistribution(Object.keys(netDaysCounts).map(key => ({\r\n      name: key,\r\n      y: netDaysCounts[key],\r\n    })));\r\n\r\n    // Tags Distribution\r\n    const tagsCounts = data.reduce((acc, term) => {\r\n      term.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagsDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n\r\n    // Monthly Created Payment Terms\r\n    const createdCounts = data.reduce((acc, term) => {\r\n      const month = new Date(term.createdDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setMonthlyCreatedData(Object.keys(createdCounts).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: createdCounts[key],\r\n    })));\r\n\r\n    // Modification Trends\r\n    const modificationCounts = data.reduce((acc, term) => {\r\n      const month = new Date(term.lastModifiedDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setModificationTrendsData(Object.keys(modificationCounts).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: modificationCounts[key],\r\n    })));\r\n\r\n    // Recent Modifications\r\n    const recentModificationsList = data\r\n      .sort((a, b) => new Date(b.lastModifiedDate) - new Date(a.lastModifiedDate))\r\n      .slice(0, 5);\r\n    setRecentModifications(recentModificationsList);\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const isActiveChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Active vs. Inactive Payment Terms',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Status',\r\n        colorByPoint: true,\r\n        data: isActiveDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const netDaysChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Net Days Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Net Days',\r\n        data: netDaysDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const tagsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Tags Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Tags',\r\n        data: tagsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const monthlyCreatedChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Monthly Created Payment Terms',\r\n    },\r\n    xAxis: {\r\n      categories: monthlyCreatedData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Terms Created',\r\n        data: monthlyCreatedData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const modificationTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Modification Trends Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: modificationTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Modifications',\r\n        data: modificationTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Payment Terms Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Payment Terms</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalTerms}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Net Days</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageNetDays.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Recent Modifications</Typography>\r\n                <ol>\r\n                  {recentModifications.map(term => (\r\n                    <li key={term.termId}>\r\n                      <Typography variant=\"body2\">\r\n                        {term.termName} - Last Modified: {new Date(term.lastModifiedDate).toLocaleDateString()}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={isActiveChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={netDaysChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={monthlyCreatedChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={modificationTrendsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["PaymentTermsDashboard","_ref","fetchItems","termsData","setTermsData","useState","isActiveDistribution","setIsActiveDistribution","netDaysDistribution","setNetDaysDistribution","tagsDistribution","setTagsDistribution","monthlyCreatedData","setMonthlyCreatedData","modificationTrendsData","setModificationTrendsData","totalTerms","setTotalTerms","averageNetDays","setAverageNetDays","recentModifications","setRecentModifications","loading","setLoading","useEffect","async","data","processTermsData","fetchData","length","activeCounts","reduce","acc","term","isActive","Object","keys","map","key","name","y","totalNetDays","Number","netDays","netDaysCounts","range","tagsCounts","tags","forEach","tag","createdCounts","month","Date","createdDate","getMonth","modificationCounts","lastModifiedDate","recentModificationsList","sort","a","b","slice","isActiveChartOptions","chart","type","title","text","series","colorByPoint","netDaysChartOptions","tagsChartOptions","monthlyCreatedChartOptions","xAxis","categories","modificationTrendsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","termName","toLocaleDateString","termId","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}