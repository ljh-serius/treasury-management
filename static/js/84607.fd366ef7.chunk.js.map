{"version":3,"file":"static/js/84607.fd366ef7.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/GeneralLedger/FiscalPeriods.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function FiscalPeriodsDashboard({ fetchItems }) {\r\n  const [fiscalPeriodsData, setFiscalPeriodsData] = useState([]);\r\n  const [periodsStatusDistribution, setPeriodsStatusDistribution] = useState([]);\r\n  const [averageDurationData, setAverageDurationData] = useState([]);\r\n  const [periodsByMonthData, setPeriodsByMonthData] = useState([]);\r\n  const [tagsDistribution, setTagsDistribution] = useState([]);\r\n  const [totalPeriods, setTotalPeriods] = useState(0);\r\n  const [openPeriods, setOpenPeriods] = useState(0);\r\n  const [closedPeriods, setClosedPeriods] = useState(0);\r\n  const [averageDuration, setAverageDuration] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setFiscalPeriodsData(data);\r\n      processFiscalPeriodsData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processFiscalPeriodsData = (data) => {\r\n    // Total Number of Fiscal Periods\r\n    setTotalPeriods(data.length);\r\n\r\n    // Count Open and Closed Periods\r\n    const statusCounts = data.reduce((acc, period) => {\r\n      if (period.isClosed === 'yes') {\r\n        acc.closed += 1;\r\n      } else {\r\n        acc.open += 1;\r\n      }\r\n      return acc;\r\n    }, { open: 0, closed: 0 });\r\n\r\n    setOpenPeriods(statusCounts.open);\r\n    setClosedPeriods(statusCounts.closed);\r\n\r\n    // Periods by Status\r\n    setPeriodsStatusDistribution([\r\n      { name: 'Open', y: statusCounts.open },\r\n      { name: 'Closed', y: statusCounts.closed },\r\n    ]);\r\n\r\n    // Average Duration of Fiscal Periods\r\n    const totalDuration = data.reduce((acc, period) => {\r\n      const start = new Date(period.startDate);\r\n      const end = new Date(period.endDate);\r\n      const duration = (end - start) / (1000 * 60 * 60 * 24); // Convert milliseconds to days\r\n      return acc + duration;\r\n    }, 0);\r\n\r\n    setAverageDuration(totalDuration / data.length);\r\n\r\n    // Calculate Average Duration for Open and Closed Periods Separately\r\n    const durationByStatus = data.reduce((acc, period) => {\r\n      const start = new Date(period.startDate);\r\n      const end = new Date(period.endDate);\r\n      const duration = (end - start) / (1000 * 60 * 60 * 24);\r\n      if (period.isClosed === 'yes') {\r\n        acc.closed.totalDuration += duration;\r\n        acc.closed.count += 1;\r\n      } else {\r\n        acc.open.totalDuration += duration;\r\n        acc.open.count += 1;\r\n      }\r\n      return acc;\r\n    }, { open: { totalDuration: 0, count: 0 }, closed: { totalDuration: 0, count: 0 } });\r\n\r\n    setAverageDurationData([\r\n      { name: 'Open', y: durationByStatus.open.totalDuration / durationByStatus.open.count || 0 },\r\n      { name: 'Closed', y: durationByStatus.closed.totalDuration / durationByStatus.closed.count || 0 },\r\n    ]);\r\n\r\n    // Number of Periods by Month\r\n    const periodsByMonth = data.reduce((acc, period) => {\r\n      const startMonth = new Date(period.startDate).getMonth() + 1;\r\n      acc[startMonth] = (acc[startMonth] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setPeriodsByMonthData(Object.keys(periodsByMonth).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: periodsByMonth[key],\r\n    })));\r\n\r\n    // Tags Distribution\r\n    const tagsCounts = data.reduce((acc, period) => {\r\n      period.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagsDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const periodsStatusChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Periods by Status',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Status',\r\n        colorByPoint: true,\r\n        data: periodsStatusDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const averageDurationChartOptions = {\r\n    chart: {\r\n      type: 'bar',\r\n    },\r\n    title: {\r\n      text: 'Average Duration of Fiscal Periods',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Average Duration (Days)',\r\n        data: averageDurationData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const periodsByMonthChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Number of Periods by Month',\r\n    },\r\n    xAxis: {\r\n      categories: periodsByMonthData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Periods',\r\n        data: periodsByMonthData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const tagsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Tags Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Tags',\r\n        data: tagsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Fiscal Periods Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Periods</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalPeriods}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Open Periods</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {openPeriods}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Closed Periods</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  {closedPeriods}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Duration (Days)</Typography>\r\n                <Typography variant=\"h4\" color=\"purple\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageDuration.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={periodsStatusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={averageDurationChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={periodsByMonthChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["FiscalPeriodsDashboard","_ref","fetchItems","fiscalPeriodsData","setFiscalPeriodsData","useState","periodsStatusDistribution","setPeriodsStatusDistribution","averageDurationData","setAverageDurationData","periodsByMonthData","setPeriodsByMonthData","tagsDistribution","setTagsDistribution","totalPeriods","setTotalPeriods","openPeriods","setOpenPeriods","closedPeriods","setClosedPeriods","averageDuration","setAverageDuration","loading","setLoading","useEffect","async","data","processFiscalPeriodsData","fetchData","length","statusCounts","reduce","acc","period","isClosed","closed","open","name","y","totalDuration","start","Date","startDate","endDate","durationByStatus","duration","count","periodsByMonth","startMonth","getMonth","Object","keys","map","key","tagsCounts","tags","forEach","tag","periodsStatusChartOptions","chart","type","title","text","series","colorByPoint","averageDurationChartOptions","periodsByMonthChartOptions","xAxis","categories","tagsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}