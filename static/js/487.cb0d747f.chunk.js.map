{"version":3,"file":"static/js/487.cb0d747f.chunk.js","mappings":"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","sources":["pages/Analysis/Entities.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Grid, Card, CardContent, Typography, Container, Box } from '@mui/material';\r\n\r\nconst EntitiesAnalysis = ({ fetchItems }) => {\r\n    const [entitiesData, setEntitiesData] = useState([]);\r\n    const [statusDistribution, setStatusDistribution] = useState([]);\r\n    const [typeDistribution, setTypeDistribution] = useState([]);\r\n    const [regionDistribution, setRegionDistribution] = useState([]);\r\n    const [entitiesByManager, setEntitiesByManager] = useState([]);\r\n    const [entitiesOverTime, setEntitiesOverTime] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function loadData() {\r\n            const entities = await fetchItems();\r\n            setEntitiesData(entities);\r\n            analyzeData(entities);\r\n        }\r\n\r\n        loadData();\r\n    }, [fetchItems]);\r\n\r\n    const analyzeData = (entities) => {\r\n        // Calculate distribution by status\r\n        const statusDist = entities.reduce((acc, entity) => {\r\n            acc[entity.status] = (acc[entity.status] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n        const statusData = Object.keys(statusDist).map(key => ({\r\n            name: key,\r\n            y: statusDist[key],\r\n        }));\r\n        setStatusDistribution(statusData);\r\n\r\n        // Calculate distribution by type\r\n        const typeDist = entities.reduce((acc, entity) => {\r\n            acc[entity.type] = (acc[entity.type] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n        const typeData = Object.keys(typeDist).map(key => ({\r\n            name: key,\r\n            y: typeDist[key],\r\n        }));\r\n        setTypeDistribution(typeData);\r\n\r\n        // Calculate distribution by region\r\n        const regionDist = entities.reduce((acc, entity) => {\r\n            acc[entity.region] = (acc[entity.region] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n        const regionData = Object.keys(regionDist).map(key => ({\r\n            name: key,\r\n            y: regionDist[key],\r\n        }));\r\n        setRegionDistribution(regionData);\r\n\r\n        // Calculate entities managed by each manager\r\n        const managerDist = entities.reduce((acc, entity) => {\r\n            acc[entity.managerId] = (acc[entity.managerId] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n        const managerData = Object.keys(managerDist).map(key => ({\r\n            name: key,\r\n            y: managerDist[key],\r\n        }));\r\n        setEntitiesByManager(managerData);\r\n\r\n        // Calculate entities added over time (monthly)\r\n        const timeDist = entities.reduce((acc, entity) => {\r\n            const month = new Date(entity.creationDate).toLocaleString('default', { month: 'short', year: 'numeric' });\r\n            acc[month] = (acc[month] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n        const timeData = Object.keys(timeDist).map(key => ({\r\n            name: key,\r\n            y: timeDist[key],\r\n        }));\r\n        setEntitiesOverTime(timeData);\r\n    };\r\n\r\n    // Highcharts options for status distribution\r\n    const statusOptions = {\r\n        chart: {\r\n            type: 'pie',\r\n        },\r\n        title: {\r\n            text: 'Entities by Status',\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Entities',\r\n                colorByPoint: true,\r\n                data: statusDistribution,\r\n            },\r\n        ],\r\n    };\r\n\r\n    // Highcharts options for type distribution\r\n    const typeOptions = {\r\n        chart: {\r\n            type: 'pie',\r\n        },\r\n        title: {\r\n            text: 'Entities by Type',\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Entities',\r\n                colorByPoint: true,\r\n                data: typeDistribution,\r\n            },\r\n        ],\r\n    };\r\n\r\n    // Highcharts options for region distribution\r\n    const regionOptions = {\r\n        chart: {\r\n            type: 'column',\r\n        },\r\n        title: {\r\n            text: 'Entities by Region',\r\n        },\r\n        xAxis: {\r\n            categories: regionDistribution.map(region => region.name),\r\n            title: {\r\n                text: 'Region',\r\n            },\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: 'Number of Entities',\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Entities',\r\n                data: regionDistribution.map(region => region.y),\r\n            },\r\n        ],\r\n    };\r\n\r\n    // Highcharts options for entities by manager\r\n    const managerOptions = {\r\n        chart: {\r\n            type: 'bar',\r\n        },\r\n        title: {\r\n            text: 'Entities Managed by Each Manager',\r\n        },\r\n        xAxis: {\r\n            categories: entitiesByManager.map(manager => manager.name),\r\n            title: {\r\n                text: 'Manager',\r\n            },\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: 'Number of Entities',\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Entities',\r\n                data: entitiesByManager.map(manager => manager.y),\r\n            },\r\n        ],\r\n    };\r\n\r\n    // Highcharts options for entities over time\r\n    const timeOptions = {\r\n        chart: {\r\n            type: 'line',\r\n        },\r\n        title: {\r\n            text: 'Entities Added Over Time',\r\n        },\r\n        xAxis: {\r\n            categories: entitiesOverTime.map(time => time.name),\r\n            title: {\r\n                text: 'Time (Monthly)',\r\n            },\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: 'Number of Entities',\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: 'Entities',\r\n                data: entitiesOverTime.map(time => time.y),\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n            <Box sx={{ padding: 4 }}>\r\n                <Grid container spacing={3}>\r\n                    {/* Status Distribution Chart */}\r\n                    <Grid item xs={12} md={6}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h6\" component=\"div\">\r\n                                    Entities by Status\r\n                                </Typography>\r\n                                <HighchartsReact highcharts={Highcharts} options={statusOptions} />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    {/* Type Distribution Chart */}\r\n                    <Grid item xs={12} md={6}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h6\" component=\"div\">\r\n                                    Entities by Type\r\n                                </Typography>\r\n                                <HighchartsReact highcharts={Highcharts} options={typeOptions} />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    {/* Region Distribution Chart */}\r\n                    <Grid item xs={12} md={6}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h6\" component=\"div\">\r\n                                    Entities by Region\r\n                                </Typography>\r\n                                <HighchartsReact highcharts={Highcharts} options={regionOptions} />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    {/* Entities by Manager Chart */}\r\n                    <Grid item xs={12} md={6}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h6\" component=\"div\">\r\n                                    Entities Managed by Each Manager\r\n                                </Typography>\r\n                                <HighchartsReact highcharts={Highcharts} options={managerOptions} />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    {/* Entities Over Time Chart */}\r\n                    <Grid item xs={12}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h6\" component=\"div\">\r\n                                    Entities Added Over Time\r\n                                </Typography>\r\n                                <HighchartsReact highcharts={Highcharts} options={timeOptions} />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EntitiesAnalysis;\r\n"],"names":["_ref","fetchItems","entitiesData","setEntitiesData","useState","statusDistribution","setStatusDistribution","typeDistribution","setTypeDistribution","regionDistribution","setRegionDistribution","entitiesByManager","setEntitiesByManager","entitiesOverTime","setEntitiesOverTime","useEffect","async","entities","analyzeData","loadData","statusDist","reduce","acc","entity","status","statusData","Object","keys","map","key","name","y","typeDist","type","typeData","regionDist","region","regionData","managerDist","managerId","managerData","timeDist","month","Date","creationDate","toLocaleString","year","timeData","statusOptions","chart","title","text","series","colorByPoint","data","typeOptions","regionOptions","xAxis","categories","yAxis","min","managerOptions","manager","timeOptions","time","_jsx","Container","maxWidth","sx","paddingTop","paddingBottom","children","Box","padding","_jsxs","Grid","container","spacing","item","xs","md","Card","CardContent","Typography","variant","component","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}