{"version":3,"file":"static/js/62.a85ee906.chunk.js","mappings":"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","sources":["pages/Analysis/Risks.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\n\r\nexport default function ExtendedRiskAnalysisDashboard({ fetchItems }) {\r\n  const [risksData, setRisksData] = useState([]);\r\n  const [riskSeverityDistribution, setRiskSeverityDistribution] = useState([]);\r\n  const [riskTypeDistribution, setRiskTypeDistribution] = useState([]);\r\n  const [riskTrendData, setRiskTrendData] = useState([]);\r\n  const [financialImpactData, setFinancialImpactData] = useState([]);\r\n  const [riskOwnerDistribution, setRiskOwnerDistribution] = useState([]);\r\n  const [overallRiskLevel, setOverallRiskLevel] = useState('Safe');\r\n  const [totalFinancialImpact, setTotalFinancialImpact] = useState(0);\r\n  const [topRisks, setTopRisks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = await fetchItems();\r\n      setRisksData(data);\r\n      processRiskData(data);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processRiskData = (data) => {\r\n    // Risk Severity Distribution\r\n    const severityCounts = data.reduce((acc, risk) => {\r\n      acc[risk.severity] = (acc[risk.severity] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setRiskSeverityDistribution(Object.keys(severityCounts).map(key => ({\r\n      name: key,\r\n      y: severityCounts[key],\r\n      riskNames: data.filter(risk => risk.severity === key).map(risk => risk.riskName).join(', ')\r\n    })));\r\n\r\n    // Risk Type Distribution\r\n    const typeCounts = data.reduce((acc, risk) => {\r\n      acc[risk.riskType] = (acc[risk.riskType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setRiskTypeDistribution(Object.keys(typeCounts).map(key => ({\r\n      name: key,\r\n      y: typeCounts[key],\r\n      riskNames: data.filter(risk => risk.riskType === key).map(risk => risk.riskName).join(', ')\r\n    })));\r\n\r\n    // Risk Trend Data (Monthly trends of new risks)\r\n    const trendCounts = data.reduce((acc, risk) => {\r\n      const month = new Date(risk.createdDate).getMonth() + 1; // Get month from date\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setRiskTrendData(Object.keys(trendCounts).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: trendCounts[key],\r\n    })));\r\n\r\n    // Financial Impact Data\r\n    const financialImpact = data.reduce((acc, risk) => {\r\n      const impact = Number(risk.financialImpact) || 0; // Ensure financialImpact is a number\r\n      acc.total += impact;\r\n      acc.breakdown.push({ name: risk.riskName, y: impact });\r\n      return acc;\r\n    }, { total: 0, breakdown: [] });\r\n\r\n    setTotalFinancialImpact(financialImpact.total);\r\n    setFinancialImpactData(financialImpact.breakdown);\r\n\r\n    // Risk Owner Distribution\r\n    const ownerCounts = data.reduce((acc, risk) => {\r\n      acc[risk.owner] = (acc[risk.owner] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setRiskOwnerDistribution(Object.keys(ownerCounts).map(key => ({\r\n      name: key,\r\n      y: ownerCounts[key],\r\n    })));\r\n\r\n    // Overall Risk Level (simplified logic)\r\n    const highOrCriticalRisks = data.filter(risk => risk.severity === 'High' || risk.severity === 'Critical');\r\n    setOverallRiskLevel(highOrCriticalRisks.length > 10 ? 'Threatened' : 'Safe');\r\n\r\n    // Top 5 Risks (by severity and impact)\r\n    const topRisksList = data\r\n      .sort((a, b) => (b.severity === 'Critical' ? 1 : 0) - (a.severity === 'Critical' ? 1 : 0) || (Number(b.financialImpact) || 0) - (Number(a.financialImpact) || 0))\r\n      .slice(0, 5);\r\n    setTopRisks(topRisksList);\r\n  };\r\n\r\n  const severityChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Risk Severity Distribution',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '{point.name}: <b>{point.y}</b><br/>Risks: {point.riskNames}'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Risks',\r\n        colorByPoint: true,\r\n        data: riskSeverityDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const typeChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Risk Type Distribution',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '{point.name}: <b>{point.y}</b><br/>Risks: {point.riskNames}'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Risks',\r\n        colorByPoint: true,\r\n        data: riskTypeDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const trendChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Risk Trends Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: riskTrendData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Risks',\r\n        data: riskTrendData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const financialImpactChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Financial Impact of Risks',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '<b>{point.name}</b>: ${point.y:.2f}'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Financial Impact',\r\n        data: financialImpactData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const ownerDistributionChartOptions = {\r\n    chart: {\r\n      type: 'bar',\r\n    },\r\n    title: {\r\n      text: 'Risk Ownership Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Risks',\r\n        data: riskOwnerDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Risk Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Overall Risk Level</Typography>\r\n                <Typography\r\n                  variant=\"h4\"\r\n                  color={overallRiskLevel === 'Safe' ? 'green' : 'red'}\r\n                  sx={{ fontWeight: 'bold' }}\r\n                >\r\n                  {overallRiskLevel}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  {overallRiskLevel === 'Safe'\r\n                    ? 'The company is currently in a safe state with manageable risks.'\r\n                    : 'The company is threatened by high or critical risks.'}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Financial Impact</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalFinancialImpact.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total financial exposure due to identified risks.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Risks</Typography>\r\n                <ol>\r\n                  {topRisks.map(risk => (\r\n                    <li key={risk.riskId}>\r\n                      <Typography variant=\"body2\">\r\n                        {risk.riskName} - Severity: {risk.severity} - Impact: ${Number(risk.financialImpact || 0).toFixed(2)}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={severityChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={typeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={trendChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={financialImpactChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={ownerDistributionChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ExtendedRiskAnalysisDashboard","_ref","fetchItems","risksData","setRisksData","useState","riskSeverityDistribution","setRiskSeverityDistribution","riskTypeDistribution","setRiskTypeDistribution","riskTrendData","setRiskTrendData","financialImpactData","setFinancialImpactData","riskOwnerDistribution","setRiskOwnerDistribution","overallRiskLevel","setOverallRiskLevel","totalFinancialImpact","setTotalFinancialImpact","topRisks","setTopRisks","useEffect","async","data","processRiskData","fetchData","severityCounts","reduce","acc","risk","severity","Object","keys","map","key","name","y","riskNames","filter","riskName","join","typeCounts","riskType","trendCounts","month","Date","createdDate","getMonth","financialImpact","impact","Number","total","breakdown","push","ownerCounts","owner","highOrCriticalRisks","length","topRisksList","sort","a","b","slice","severityChartOptions","chart","type","title","text","tooltip","pointFormat","series","colorByPoint","typeChartOptions","trendChartOptions","xAxis","categories","financialImpactChartOptions","ownerDistributionChartOptions","_jsx","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsxs","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","color","fontWeight","toFixed","riskId","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}