{"version":3,"file":"static/js/95180.8e430bff.chunk.js","mappings":"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","sources":["pages/Analysis/EnvironmentalSocialGovernance/SustainabilityReports/WasteManagement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst WasteManagementAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response);\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // Calculate KPIs\r\n  const totalWasteGenerated = data.reduce((sum, record) => sum + record.totalWasteGenerated, 0);\r\n  const totalWasteDisposed = data.reduce((sum, record) => sum + record.wasteDisposed, 0);\r\n  const totalWasteRecycled = data.reduce((sum, record) => sum + record.wasteRecycled, 0);\r\n  const avgReductionTarget = data.reduce((sum, record) => sum + record.reductionTarget, 0) / data.length;\r\n  const avgAchievedReduction = data.reduce((sum, record) => sum + record.achievedReduction, 0) / data.length;\r\n\r\n  // Highcharts options for waste generation\r\n  const wasteChartOptions = {\r\n    title: { text: 'Total Waste Generated Over Time (tons)' },\r\n    xAxis: { categories: data.map((record) => record.year) },\r\n    yAxis: { title: { text: 'Waste Generated (tons)' } },\r\n    series: [\r\n      { name: 'Total Waste Generated', data: data.map((record) => record.totalWasteGenerated) },\r\n      { name: 'Waste Disposed', data: data.map((record) => record.wasteDisposed) },\r\n      { name: 'Waste Recycled', data: data.map((record) => record.wasteRecycled) },\r\n    ],\r\n  };\r\n\r\n  // Highcharts options for waste reduction target vs achieved reduction\r\n  const reductionChartOptions = {\r\n    title: { text: 'Waste Reduction Target vs Achieved (%)' },\r\n    xAxis: { categories: data.map((record) => record.year) },\r\n    yAxis: { title: { text: 'Reduction (%)' } },\r\n    series: [\r\n      { name: 'Reduction Target', data: data.map((record) => record.reductionTarget) },\r\n      { name: 'Achieved Reduction', data: data.map((record) => record.achievedReduction) },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Waste Generated (tons)</Typography>\r\n          <Typography variant=\"h4\">{totalWasteGenerated.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Waste Disposed (tons)</Typography>\r\n          <Typography variant=\"h4\">{totalWasteDisposed.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Waste Recycled (tons)</Typography>\r\n          <Typography variant=\"h4\">{totalWasteRecycled.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Average Reduction Target (%)</Typography>\r\n          <Typography variant=\"h4\">{avgReductionTarget.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Average Achieved Reduction (%)</Typography>\r\n          <Typography variant=\"h4\">{avgAchievedReduction.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={wasteChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={reductionChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.year}:</Typography>\r\n              {record.tags.map((tag) => (\r\n                <Chip key={tag.id} label={tag.label} style={{ margin: '5px' }} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default WasteManagementAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalWasteGenerated","reduce","sum","record","totalWasteDisposed","wasteDisposed","totalWasteRecycled","wasteRecycled","avgReductionTarget","reductionTarget","length","avgAchievedReduction","achievedReduction","wasteChartOptions","title","text","xAxis","categories","map","year","yAxis","series","name","reductionChartOptions","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","toFixed","HighchartsReact","highcharts","Highcharts","options","index","tags","tag","Chip","label","style","margin","id"],"sourceRoot":""}