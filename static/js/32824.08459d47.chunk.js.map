{"version":3,"file":"static/js/32824.08459d47.chunk.js","mappings":"wTAKe,SAASA,EAAwBC,GAAkB,IAAjB,WAAEC,GAAYD,EAC7D,MAAOE,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,IAChDG,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,EAAiBC,IAAsBN,EAAAA,EAAAA,UAAS,KAChDO,EAASC,IAAcR,EAAAA,EAAAA,WAAS,IAEvCS,EAAAA,EAAAA,YAAU,KACUC,WAChBF,GAAW,GACX,MAAMG,QAAad,IACnBE,EAAgBY,GAChBC,EAAoBD,GACpBH,GAAW,EAAM,EAGnBK,EAAW,GACV,CAAChB,IAEJ,MAAMe,EAAuBD,IAC3BT,EAAmBS,EAAKG,QAGxB,MAAMC,EAAc,CAAC,EACrBJ,EAAKK,SAASC,IACZ,MAAMC,EAAOD,EAAKE,aAClBJ,EAAYG,IAASH,EAAYG,IAAS,GAAK,CAAC,IAElD,MAAME,EAAgBC,OAAOC,QAAQP,GAAaQ,KAAIC,IAAA,IAAEN,EAAMO,GAAMD,EAAA,MAAM,CACxEE,KAAMR,EACNS,EAAGF,EACJ,IACDrB,EAAoBgB,GAGpBd,EACEK,EAAKY,KAAKN,IAAI,CACZS,KAAMT,EAAKW,YACXD,EAAGV,EAAKY,gBAEX,EAIGC,EAA2B,CAC/BC,MAAO,CAAEb,KAAM,OACfc,MAAO,CAAEC,KAAM,uCACfC,OAAQ,CACN,CACER,KAAM,aACNf,KAAMR,KAMNgC,EAA0B,CAC9BJ,MAAO,CAAEb,KAAM,OACfc,MAAO,CAAEC,KAAM,2BACfG,MAAO,CAAElB,KAAM,WAAYc,MAAO,CAAEC,KAAM,iBAC1CI,MAAO,CAAEL,MAAO,CAAEC,KAAM,iBACxBC,OAAQ,CACN,CACER,KAAM,UACNf,KAAMN,KAKZ,OACEiC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,WAAY,EAAGC,cAAe,GAAIC,SAAA,EAC/DC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACL,GAAI,CAAEM,MAAO,OAAQC,OAASC,GAAUA,EAAMD,OAAOE,OAAS,GAAKC,KAAM5C,EAAQqC,UACzFC,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,CAACL,MAAM,eAE1BT,EAAAA,EAAAA,MAACe,EAAAA,EAAG,CAACZ,GAAI,CAAEa,QAAS,GAAIV,SAAA,EACtBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAb,SAAC,gCAItCC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEhB,UAEzBC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACzC,MAAI,EAAC4C,GAAI,GAAIC,GAAI,EAAElB,UACvBC,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CAAAnB,UACHN,EAAAA,EAAAA,MAAC0B,EAAAA,EAAW,CAAApB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,8BACzBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,QAAQN,GAAI,CAAEwB,WAAY,QAASrB,SAC/D3C,cAOXqC,EAAAA,EAAAA,MAACoB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGnB,GAAI,CAAEyB,UAAW,GAAItB,SAAA,EAE/CC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACzC,MAAI,EAAC4C,GAAI,GAAIC,GAAI,EAAElB,UACvBC,EAAAA,EAAAA,KAACsB,IAAe,CAACC,WAAYC,IAAYC,QAASxC,OAIpDe,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACzC,MAAI,EAAC4C,GAAI,GAAIC,GAAI,EAAElB,UACvBC,EAAAA,EAAAA,KAACsB,IAAe,CAACC,WAAYC,IAAYC,QAASnC,cAM9D,C","sources":["pages/Analysis/InformationTechnology/NetworkManagement/NetworkTopology.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function NetworkTopologyDashboard({ fetchItems }) {\r\n  const [topologyData, setTopologyData] = useState([]);\r\n  const [totalTopologies, setTotalTopologies] = useState(0);\r\n  const [topologyTypeData, setTopologyTypeData] = useState([]);\r\n  const [deviceCountData, setDeviceCountData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setTopologyData(data);\r\n      processTopologyData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processTopologyData = (data) => {\r\n    setTotalTopologies(data.length);\r\n\r\n    // Aggregate Topology Types\r\n    const topologyMap = {};\r\n    data.forEach((item) => {\r\n      const type = item.topologyType;\r\n      topologyMap[type] = (topologyMap[type] || 0) + 1;\r\n    });\r\n    const topologyArray = Object.entries(topologyMap).map(([type, count]) => ({\r\n      name: type,\r\n      y: count,\r\n    }));\r\n    setTopologyTypeData(topologyArray);\r\n\r\n    // Aggregate Device Counts\r\n    setDeviceCountData(\r\n      data.map((item) => ({\r\n        name: item.networkName,\r\n        y: item.deviceCount,\r\n      }))\r\n    );\r\n  };\r\n\r\n  // Highcharts options for Topology Types\r\n  const topologyTypeChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Network Topology Types Distribution' },\r\n    series: [\r\n      {\r\n        name: 'Topologies',\r\n        data: topologyTypeData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Highcharts options for Device Count\r\n  const deviceCountChartOptions = {\r\n    chart: { type: 'bar' },\r\n    title: { text: 'Device Count by Network' },\r\n    xAxis: { type: 'category', title: { text: 'Network Name' } },\r\n    yAxis: { title: { text: 'Device Count' } },\r\n    series: [\r\n      {\r\n        name: 'Devices',\r\n        data: deviceCountData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Network Topology Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Network Topologies</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalTopologies}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Topology Types Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={topologyTypeChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Device Count Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={deviceCountChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["NetworkTopologyDashboard","_ref","fetchItems","topologyData","setTopologyData","useState","totalTopologies","setTotalTopologies","topologyTypeData","setTopologyTypeData","deviceCountData","setDeviceCountData","loading","setLoading","useEffect","async","data","processTopologyData","fetchData","length","topologyMap","forEach","item","type","topologyType","topologyArray","Object","entries","map","_ref2","count","name","y","networkName","deviceCount","topologyTypeChartOptions","chart","title","text","series","deviceCountChartOptions","xAxis","yAxis","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}