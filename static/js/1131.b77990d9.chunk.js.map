{"version":3,"file":"static/js/1131.b77990d9.chunk.js","mappings":"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","sources":["pages/Analysis/CustomerSupport/Feedback/NetPromoterScore.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst NPSAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response);\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // KPIs\r\n  const totalResponses = data.length;\r\n  const promoters = data.filter((item) => item.score >= 9).length;\r\n  const passives = data.filter((item) => item.score >= 7 && item.score <= 8).length;\r\n  const detractors = data.filter((item) => item.score <= 6).length;\r\n\r\n  // Calculate NPS\r\n  const npsScore = ((promoters - detractors) / totalResponses) * 100;\r\n\r\n  // Highcharts options for NPS distribution\r\n  const npsDistributionOptions = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'NPS Score Distribution' },\r\n    xAxis: {\r\n      categories: ['Promoters (9-10)', 'Passives (7-8)', 'Detractors (0-6)'],\r\n      crosshair: true,\r\n    },\r\n    yAxis: {\r\n      min: 0,\r\n      title: { text: 'Number of Responses' },\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Responses',\r\n        data: [promoters, passives, detractors],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={3}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Responses</Typography>\r\n          <Typography variant=\"h4\">{totalResponses}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={3}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Promoters</Typography>\r\n          <Typography variant=\"h4\">{promoters}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={3}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Passives</Typography>\r\n          <Typography variant=\"h4\">{passives}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={3}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Detractors</Typography>\r\n          <Typography variant=\"h4\">{detractors}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={3}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>NPS Score</Typography>\r\n          <Typography variant=\"h4\">{npsScore.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12} md={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={npsDistributionOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{`Response ${index + 1}:`}</Typography>\r\n              {record.tags.map((tag) => (\r\n                <Chip key={tag.id} label={tag.label} style={{ margin: '5px' }} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default NPSAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalResponses","length","promoters","filter","item","score","passives","detractors","npsScore","npsDistributionOptions","chart","type","title","text","xAxis","categories","crosshair","yAxis","min","series","name","_jsxs","Grid","container","spacing","xs","md","Card","variant","gutterBottom","toFixed","HighchartsReact","highcharts","Highcharts","options","map","record","index","tags","tag","Chip","label","style","margin","id"],"sourceRoot":""}