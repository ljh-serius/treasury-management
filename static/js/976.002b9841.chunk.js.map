{"version":3,"file":"static/js/976.002b9841.chunk.js","mappings":"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","sources":["pages/Analysis/Invoices.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\n\r\nexport default function InvoiceAnalysisDashboard({ fetchInvoices }) {\r\n  const [invoicesData, setInvoicesData] = useState([]);\r\n  const [invoiceTypeDistribution, setInvoiceTypeDistribution] = useState([]);\r\n  const [invoiceCategoryDistribution, setInvoiceCategoryDistribution] = useState([]);\r\n  const [paymentMethodDistribution, setPaymentMethodDistribution] = useState([]);\r\n  const [monthlyTrendsData, setMonthlyTrendsData] = useState([]);\r\n  const [topVendors, setTopVendors] = useState([]);\r\n  const [totalIssuedValue, setTotalIssuedValue] = useState(0);\r\n  const [totalReceivedValue, setTotalReceivedValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = await fetchInvoices();\r\n      setInvoicesData(data);\r\n      processInvoiceData(data);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchInvoices]);\r\n  \r\n\r\n  const processInvoiceData = (data) => {\r\n    // Invoice Type Distribution\r\n    const typeCounts = data.reduce((acc, invoice) => {\r\n      acc[invoice.invoiceType] = (acc[invoice.invoiceType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setInvoiceTypeDistribution(Object.keys(typeCounts).map(key => ({\r\n      name: key,\r\n      y: typeCounts[key],\r\n      invoiceNames: data.filter(invoice => invoice.invoiceType === key).map(invoice => invoice.providerDetails).join(', '),\r\n    })));\r\n\r\n    // Invoice Category Distribution\r\n    const categoryCounts = data.reduce((acc, invoice) => {\r\n      acc[invoice.invoiceCategory] = (acc[invoice.invoiceCategory] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setInvoiceCategoryDistribution(Object.keys(categoryCounts).map(key => ({\r\n      name: key,\r\n      y: categoryCounts[key],\r\n      invoiceNames: data.filter(invoice => invoice.invoiceCategory === key).map(invoice => invoice.providerDetails).join(', '),\r\n    })));\r\n\r\n    // Payment Method Distribution\r\n    const paymentCounts = data.reduce((acc, invoice) => {\r\n      acc[invoice.paymentMethod] = (acc[invoice.paymentMethod] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setPaymentMethodDistribution(Object.keys(paymentCounts).map(key => ({\r\n      name: key,\r\n      y: paymentCounts[key],\r\n      invoiceNames: data.filter(invoice => invoice.paymentMethod === key).map(invoice => invoice.providerDetails).join(', '),\r\n    })));\r\n\r\n    // Monthly Trends Data\r\n    const trendCounts = data.reduce((acc, invoice) => {\r\n      const month = new Date(invoice.issuedAt).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setMonthlyTrendsData(Object.keys(trendCounts).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: trendCounts[key],\r\n    })));\r\n\r\n    // Total Issued & Received Invoice Values\r\n    const totals = data.reduce(\r\n      (acc, invoice) => {\r\n        const value = Number(invoice.contractValue) || 0;\r\n        if (invoice.invoiceType === 'issued') {\r\n          acc.issued += value;\r\n        } else {\r\n          acc.received += value;\r\n        }\r\n        return acc;\r\n      },\r\n      { issued: 0, received: 0 }\r\n    );\r\n\r\n    setTotalIssuedValue(totals.issued);\r\n    setTotalReceivedValue(totals.received);\r\n\r\n    // Top 5 Vendors by Invoice Value\r\n    const topVendorsList = data\r\n      .sort((a, b) => Number(b.contractValue) - Number(a.contractValue))\r\n      .slice(0, 5);\r\n    setTopVendors(topVendorsList);\r\n  };\r\n\r\n  const invoiceTypeChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Invoice Type Distribution',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '{point.name}: <b>{point.y}</b><br/>Providers: {point.invoiceNames}'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Invoices',\r\n        colorByPoint: true,\r\n        data: invoiceTypeDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const invoiceCategoryChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Invoice Category Distribution',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '{point.name}: <b>{point.y}</b><br/>Providers: {point.invoiceNames}'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Categories',\r\n        colorByPoint: true,\r\n        data: invoiceCategoryDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const paymentMethodChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Payment Method Distribution',\r\n    },\r\n    tooltip: {\r\n      pointFormat: '{point.name}: <b>{point.y}</b> invoices'\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Payment Methods',\r\n        data: paymentMethodDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const monthlyTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Monthly Invoice Trends',\r\n    },\r\n    xAxis: {\r\n      categories: monthlyTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Invoices',\r\n        data: monthlyTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Invoice Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Issued Invoice Value</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalIssuedValue.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total value of all issued invoices.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Received Invoice Value</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalReceivedValue.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total value of all received invoices.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Vendors by Invoice Value</Typography>\r\n                <ol>\r\n                  {topVendors.map(invoice => (\r\n                    <li key={invoice.id}>\r\n                      <Typography variant=\"body2\">\r\n                        {invoice.providerDetails} - Value: ${Number(invoice.contractValue).toFixed(2)}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={invoiceTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={invoiceCategoryChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={paymentMethodChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={monthlyTrendsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["InvoiceAnalysisDashboard","_ref","fetchInvoices","invoicesData","setInvoicesData","useState","invoiceTypeDistribution","setInvoiceTypeDistribution","invoiceCategoryDistribution","setInvoiceCategoryDistribution","paymentMethodDistribution","setPaymentMethodDistribution","monthlyTrendsData","setMonthlyTrendsData","topVendors","setTopVendors","totalIssuedValue","setTotalIssuedValue","totalReceivedValue","setTotalReceivedValue","useEffect","async","data","processInvoiceData","fetchData","typeCounts","reduce","acc","invoice","invoiceType","Object","keys","map","key","name","y","invoiceNames","filter","providerDetails","join","categoryCounts","invoiceCategory","paymentCounts","paymentMethod","trendCounts","month","Date","issuedAt","getMonth","totals","value","Number","contractValue","issued","received","topVendorsList","sort","a","b","slice","invoiceTypeChartOptions","chart","type","title","text","tooltip","pointFormat","series","colorByPoint","invoiceCategoryChartOptions","paymentMethodChartOptions","monthlyTrendsChartOptions","xAxis","categories","_jsx","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsxs","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","color","fontWeight","toFixed","id","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}