{"version":3,"file":"static/js/8237.1f15f702.chunk.js","mappings":"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","sources":["pages/Analysis/SalesMarketing/ClientsCustomers/CustomerHistory.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function CustomerHistoryDashboard({ fetchData }) {\r\n  const [historyData, setHistoryData] = useState([]);\r\n  const [interactionTypeDistribution, setInteractionTypeDistribution] = useState([]);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [totalInteractions, setTotalInteractions] = useState(0);\r\n  const [pendingFollowUps, setPendingFollowUps] = useState(0);\r\n  const [resolvedCases, setResolvedCases] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchData();\r\n      setHistoryData(data);\r\n      processHistoryData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchData]);\r\n\r\n  const processHistoryData = (data) => {\r\n    // Total Interactions\r\n    setTotalInteractions(data.length);\r\n\r\n    // Count Pending Follow-Ups\r\n    const followUps = data.filter(history => history.tags.includes('follow-up') && !history.tags.includes('resolved'));\r\n    setPendingFollowUps(followUps.length);\r\n\r\n    // Count Resolved Cases\r\n    const resolved = data.filter(history => history.tags.includes('resolved'));\r\n    setResolvedCases(resolved.length);\r\n\r\n    // Interaction Type Distribution\r\n    const interactionTypeCounts = data.reduce((acc, history) => {\r\n      acc[history.interactionType] = (acc[history.interactionType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setInteractionTypeDistribution(Object.keys(interactionTypeCounts).map(key => ({\r\n      name: key,\r\n      y: interactionTypeCounts[key],\r\n    })));\r\n\r\n    // Status Distribution (resolved, pending, etc.)\r\n    const statusCounts = {\r\n      resolved: resolved.length,\r\n      pending: followUps.length,\r\n      others: data.length - resolved.length - followUps.length,\r\n    };\r\n\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: statusCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Highcharts Options\r\n  const interactionTypeChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Interaction Type Distribution' },\r\n    series: [{\r\n      name: 'Interaction Types',\r\n      colorByPoint: true,\r\n      data: interactionTypeDistribution,\r\n    }],\r\n  };\r\n\r\n  const statusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Status Distribution' },\r\n    series: [{\r\n      name: 'Status',\r\n      colorByPoint: true,\r\n      data: statusDistribution,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Customer History Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Interactions</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalInteractions}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Pending Follow-Ups</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  {pendingFollowUps}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Resolved Cases</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {resolvedCases}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Interaction Type Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={interactionTypeChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Status Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["CustomerHistoryDashboard","_ref","fetchData","historyData","setHistoryData","useState","interactionTypeDistribution","setInteractionTypeDistribution","statusDistribution","setStatusDistribution","totalInteractions","setTotalInteractions","pendingFollowUps","setPendingFollowUps","resolvedCases","setResolvedCases","loading","setLoading","useEffect","async","data","processHistoryData","fetchDataAsync","length","followUps","filter","history","tags","includes","resolved","interactionTypeCounts","reduce","acc","interactionType","Object","keys","map","key","name","y","statusCounts","pending","others","charAt","toUpperCase","slice","interactionTypeChartOptions","chart","type","title","text","series","colorByPoint","statusChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}