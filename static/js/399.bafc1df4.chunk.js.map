{"version":3,"file":"static/js/399.bafc1df4.chunk.js","mappings":"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","sources":["components/Management/Providers.js","utils/firebaseCrudHelpers.js"],"sourcesContent":["import {\r\n    fetchDocuments,\r\n    addDocument,\r\n    updateDocument,\r\n    deleteDocument,\r\n    fetchDocumentsBySelectValue,\r\n    fetchDocumentsByFieldValue\r\n} from '../../utils/firebaseCrudHelpers';\r\nconst organizationId = JSON.parse(localStorage.getItem('userData')).organizationId;\r\n\r\nexport const fieldsConfig = {\r\n    name: { label: 'Provider Name', type: 'text', faker: 'company.name' },\r\n    taxId: { label: 'Tax ID', type: 'text', faker: 'finance.iban' },\r\n    address: { label: 'Address', type: 'text', faker: 'address.streetAddress' },\r\n    contactEmail: { label: 'Email', type: 'email', faker: 'internet.email' },\r\n    contactPhone: { label: 'Phone', type: 'text', faker: 'phone.imei' },\r\n    companyType: {\r\n        label: 'Company Type',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'public', label: 'Public' },\r\n            { id: 'private', label: 'Private' },\r\n            { id: 'partnership', label: 'Partnership' },\r\n            { id: 'non_profit', label: 'Non-Profit' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    country: {\r\n        label: 'Country',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'us', label: 'United States' },\r\n            { id: 'ca', label: 'Canada' },\r\n            { id: 'uk', label: 'United Kingdom' },\r\n            { id: 'au', label: 'Australia' },\r\n            { id: 'in', label: 'India' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    state: { label: 'State/Province', type: 'text', faker: 'address.state' },\r\n    zipCode: { label: 'Zip/Postal Code', type: 'text', faker: 'address.zipCode' },\r\n    website: { label: 'Website', type: 'text', faker: 'internet.url' },\r\n    industry: {\r\n        label: 'Industry',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'finance', label: 'Finance' },\r\n            { id: 'healthcare', label: 'Healthcare' },\r\n            { id: 'it', label: 'IT' },\r\n            { id: 'manufacturing', label: 'Manufacturing' },\r\n            { id: 'retail', label: 'Retail' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    establishedDate: { label: 'Established Date', type: 'date', faker: 'date.past' },\r\n    contractValue: { label: 'Contract Value', type: 'number', faker: 'finance.amount' },\r\n    paymentTerms: {\r\n        label: 'Payment Terms',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'net_30', label: 'Net 30' },\r\n            { id: 'net_60', label: 'Net 60' },\r\n            { id: 'net_90', label: 'Net 90' },\r\n            { id: 'upon_receipt', label: 'Upon Receipt' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    bankAccount: { label: 'Bank Account', type: 'text', faker: 'finance.account' },\r\n    swiftCode: { label: 'SWIFT Code', type: 'text', faker: 'finance.bic' },\r\n    accountManager: { label: 'Account Manager', type: 'text', faker: 'name.fullName' },\r\n    servicesProvided: {\r\n        label: 'Services Provided',\r\n        type: 'select',\r\n        multiple: true,\r\n        options: [\r\n            { id: 'health_insurance', label: 'Health Insurance' },\r\n            { id: 'software_development', label: 'Software Development' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    preferredContactMethod: {\r\n        label: 'Preferred Contact Method',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'email', label: 'Email' },\r\n            { id: 'phone', label: 'Phone' },\r\n            { id: 'in_person', label: 'In Person' },\r\n            { id: 'online_chat', label: 'Online Chat' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    rating: { label: 'Rating', type: 'number', faker: 'datatype.float' },\r\n    regulatoryCompliance: {\r\n        label: 'Regulatory Compliance',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'compliant', label: 'Compliant' },\r\n            { id: 'non_compliant', label: 'Non-Compliant' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    businessRegistrationNumber: { label: 'Business Registration Number', type: 'text', faker: 'finance.account' },\r\n    additionalContactName: { label: 'Additional Contact Name', type: 'text', faker: 'name.fullName' },\r\n    additionalContactEmail: { label: 'Additional Contact Email', type: 'email', faker: 'internet.email' },\r\n    additionalContactPhone: { label: 'Additional Contact Phone', type: 'text', faker: 'phone.imei' },\r\n    businessHours: { label: 'Business Hours', type: 'text', faker: 'lorem.sentence' },\r\n    emergencyContactName: { label: 'Emergency Contact Name', type: 'text', faker: 'name.fullName' },\r\n    emergencyContactPhone: { label: 'Emergency Contact Phone', type: 'text', faker: 'phone.imei' },\r\n    customerSupportEmail: { label: 'Customer Support Email', type: 'email', faker: 'internet.email' },\r\n    customerSupportPhone: { label: 'Customer Support Phone', type: 'text', faker: 'phone.imei' },\r\n    supportHours: { label: 'Support Hours', type: 'text', faker: 'lorem.sentence' },\r\n    tradeLicenseNumber: { label: 'Trade License Number', type: 'text', faker: 'finance.account' },\r\n    vatNumber: { label: 'VAT Number', type: 'text', faker: 'finance.iban' },\r\n    businessInsurance: {\r\n        label: 'Business Insurance',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'insured', label: 'Insured' },\r\n            { id: 'not_insured', label: 'Not Insured' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    legalEntity: {\r\n        label: 'Legal Entity',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'corporation', label: 'Corporation' },\r\n            { id: 'llc', label: 'LLC' },\r\n            { id: 'sole_proprietorship', label: 'Sole Proprietorship' },\r\n            { id: 'partnership', label: 'Partnership' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n    keyPersonnel: { label: 'Key Personnel', type: 'text', faker: 'name.jobTitle' },\r\n    socialMediaLinks: { label: 'Social Media Links', type: 'text', faker: 'internet.url' },\r\n    annualRevenue: { label: 'Annual Revenue', type: 'number', faker: 'finance.amount' },\r\n    numberOfEmployees: { label: 'Number of Employees', type: 'number', faker: 'datatype.number' },\r\n    headquartersLocation: { label: 'Headquarters Location', type: 'text', faker: 'address.city' },\r\n    branchOffices: { label: 'Branch Offices', type: 'text', faker: 'address.streetAddress' },\r\n    certifications: { label: 'Certifications', type: 'text', faker: 'lorem.words' },\r\n    environmentalPolicy: {\r\n        label: 'Environmental Policy',\r\n        type: 'select',\r\n        options: [\r\n            { id: 'green', label: 'Green' },\r\n            { id: 'non_green', label: 'Non-Green' },\r\n        ],\r\n        faker: 'random.arrayElement',\r\n    },\r\n};\r\n\r\nexport const headCells = Object.keys(fieldsConfig).map(key => ({\r\n    id: key,\r\n    label: fieldsConfig[key].label,\r\n}));\r\n\r\nexport const entityName = 'Providers';\r\n\r\nexport async function fetchItems() {\r\n    return await fetchDocuments(organizationId, 'providers');\r\n}\r\n\r\nexport async function fetchItemsBySelectValue(selectMenu, value) {\r\n    return await fetchDocumentsBySelectValue(organizationId, 'providers', selectMenu, value);\r\n}\r\n\r\nexport const addItem = (item) => addDocument(organizationId, 'providers', item);\r\nexport const updateItem = (id, item) => updateDocument(organizationId, 'providers', id, item);\r\nexport const deleteItem = (id) => deleteDocument(organizationId, 'providers', id);\r\n\r\n","import { db } from './firebaseConfig'; // Assuming you have a Firebase config file\r\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query, where } from 'firebase/firestore';\r\n\r\n// Function to fetch documents specific to an organization from a subcollection\r\nexport const fetchDocuments = async (organizationId, subcollectionName) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const snapshot = await getDocs(subcollectionRef);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${subcollectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to add a new document linked to an organization in a subcollection\r\nexport const addDocument = async (organizationId, subcollectionName, documentData) => {\r\n  try {\r\n    documentData.organizationId = organizationId;\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const docRef = await addDoc(subcollectionRef, documentData);\r\n    return docRef.id; // Return the ID of the newly created document\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${subcollectionName}:`, error);\r\n    throw new Error(`Could not add document to ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to update an existing document in a subcollection\r\nexport const updateDocument = async (organizationId, subcollectionName, documentId, documentData) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await updateDoc(docRef, documentData);\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${subcollectionName}:`, error);\r\n    throw new Error(`Could not update document in ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to delete a document from a subcollection\r\nexport const deleteDocument = async (organizationId, subcollectionName, documentId) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${subcollectionName}:`, error);\r\n    throw new Error(`Could not delete document from ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n\r\nexport const fetchDocumentsBySelectValue = async (organizationId, relativeCollection, foreignKey, foreignValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(foreignKey, 'array-contains', foreignValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const fetchDocumentsByFieldValue = async (organizationId, relativeCollection, fieldName, fieldValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(fieldName, '==', fieldValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}"],"names":["organizationId","JSON","parse","localStorage","getItem","fieldsConfig","name","label","type","faker","taxId","address","contactEmail","contactPhone","companyType","options","id","country","state","zipCode","website","industry","establishedDate","contractValue","paymentTerms","bankAccount","swiftCode","accountManager","servicesProvided","multiple","preferredContactMethod","rating","regulatoryCompliance","businessRegistrationNumber","additionalContactName","additionalContactEmail","additionalContactPhone","businessHours","emergencyContactName","emergencyContactPhone","customerSupportEmail","customerSupportPhone","supportHours","tradeLicenseNumber","vatNumber","businessInsurance","legalEntity","keyPersonnel","socialMediaLinks","annualRevenue","numberOfEmployees","headquartersLocation","branchOffices","certifications","environmentalPolicy","headCells","Object","keys","map","key","entityName","async","fetchItems","fetchDocuments","fetchItemsBySelectValue","selectMenu","value","fetchDocumentsBySelectValue","addItem","item","addDocument","updateItem","updateDocument","deleteItem","deleteDocument","subcollectionName","subcollectionRef","collection","db","snapshot","getDocs","docs","doc","data","error","console","documentData","addDoc","Error","documentId","docRef","updateDoc","deleteDoc","relativeCollection","foreignKey","foreignValue","q","query","where","fetchDocumentsByFieldValue","fieldName","fieldValue"],"sourceRoot":""}