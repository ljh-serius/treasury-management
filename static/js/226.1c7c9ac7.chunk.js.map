{"version":3,"file":"static/js/226.1c7c9ac7.chunk.js","mappings":"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","sources":["components/Management/Entities.js","utils/firebaseCrudHelpers.js"],"sourcesContent":["import {\r\n    fetchDocuments,\r\n    addDocument,\r\n    updateDocument,\r\n    deleteDocument,\r\n    fetchDocumentsBySelectValue,\r\n    fetchDocumentsByFieldValue\r\n} from '../../utils/firebaseCrudHelpers';\r\n\r\nconst organizationId = JSON.parse(localStorage.getItem('userData')).organizationId;\r\n\r\nconst getEntitiesOptions = async (types) => {\r\n  console.log(\"launched NOW\")\r\n  return (await fetchItems()).filter((entity) => {\r\n    return types.includes(entity.type);\r\n  }).map((entity) => {\r\n    return {\r\n      id: entity.id,\r\n      label: entity.name\r\n    }\r\n  });\r\n}\r\n\r\nconsole.log(\"fetched items\", await getEntitiesOptions(['store']))\r\n\r\nexport const fieldsConfig = {\r\n  name: { label: 'name', type: 'text', faker: 'company.name' },\r\n  type: {\r\n    label: 'Type',\r\n    type: 'select',\r\n    options: [\r\n      {\r\n        id: 'store',\r\n        label: 'Store'\r\n      },\r\n      {\r\n        id: 'agency',\r\n        label: 'Agency'\r\n      },\r\n      {\r\n        id: 'department',\r\n        label: 'Department'\r\n      },\r\n      {\r\n        id: 'service',\r\n        label: 'Service'\r\n      },\r\n      {\r\n        id: 'organization',\r\n        label: 'Organization'\r\n      },\r\n    ],\r\n    multiple: false,\r\n    faker: 'random.arrayElement'\r\n  },\r\n  entityId: { label: 'Entity ID', type: 'text', faker: 'datatype.uuid' },\r\n  parentId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['store', 'agency', 'department', 'service', 'organization']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n        return await getEntitiesOptions(['store', 'agency', 'department', 'service', 'organization']);\r\n    }\r\n  },\r\n  storeId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['store']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['store']);\r\n    }\r\n  },\r\n  agencyId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['agency']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['agency']);\r\n    }\r\n  },\r\n  departmentId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['department']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['department']);\r\n    }\r\n  },\r\n  serviceId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['service']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['service']);\r\n    }\r\n  },\r\n  orgnizationId: {\r\n    label: 'Parent Entity ID',\r\n    type: 'select',\r\n    options: await getEntitiesOptions(['organization']), // Populated with relevant parent entities\r\n    multiple: true,\r\n    faker: 'random.arrayElement',\r\n    refreshOptions: async () => {\r\n      return await getEntitiesOptions(['organization']);\r\n    }\r\n  },\r\n  locationId: { label: 'Location ID', type: 'text', faker: 'datatype.uuid' },\r\n  regionId: { label: 'Region ID', type: 'text', faker: 'datatype.uuid' },\r\n  countryId: { label: 'Country ID', type: 'text', faker: 'address.countryCode' },\r\n  managerId: {\r\n    label: 'Manager ID',\r\n    type: 'select',\r\n    options: [], // Populated with relevant managers\r\n    multiple: false,\r\n    faker: 'random.arrayElement'\r\n  },\r\n  status: {\r\n    label: 'Status',\r\n    type: 'select',\r\n    options: [\r\n      { id: 'active', label: 'Active' },\r\n      { id: 'inactive', label: 'Inactive' }\r\n    ],\r\n    faker: 'random.arrayElement'\r\n  },\r\n  creationDate: { label: 'Creation Date', type: 'date', faker: 'date.past' },\r\n  modifiedDate: { label: 'Modified Date', type: 'date', faker: 'date.recent' },\r\n  notes: { label: 'Notes', type: 'text', faker: 'lorem.paragraph' },\r\n};\r\n\r\nexport const headCells = Object.keys(fieldsConfig).map(key => ({\r\n  id: key,\r\n  label: fieldsConfig[key].label,\r\n}));\r\n\r\nexport const entityName = 'Entities';\r\n\r\nexport async function fetchItems() {\r\n    return await fetchDocuments(organizationId, 'entities');\r\n}\r\n\r\nexport const addItem = (item) => addDocument(organizationId, 'entities', item);\r\nexport const updateItem = (id, item) => updateDocument(organizationId, 'entities', id, item);\r\nexport const deleteItem = (id) => deleteDocument(organizationId, 'entities', id);\r\n","import { db } from './firebaseConfig'; // Assuming you have a Firebase config file\r\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query, where } from 'firebase/firestore';\r\n\r\n// Function to fetch documents specific to an organization from a subcollection\r\nexport const fetchDocuments = async (organizationId, subcollectionName) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const snapshot = await getDocs(subcollectionRef);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${subcollectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to add a new document linked to an organization in a subcollection\r\nexport const addDocument = async (organizationId, subcollectionName, documentData) => {\r\n  try {\r\n    documentData.organizationId = organizationId;\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const docRef = await addDoc(subcollectionRef, documentData);\r\n    return docRef.id; // Return the ID of the newly created document\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${subcollectionName}:`, error);\r\n    throw new Error(`Could not add document to ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to update an existing document in a subcollection\r\nexport const updateDocument = async (organizationId, subcollectionName, documentId, documentData) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await updateDoc(docRef, documentData);\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${subcollectionName}:`, error);\r\n    throw new Error(`Could not update document in ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to delete a document from a subcollection\r\nexport const deleteDocument = async (organizationId, subcollectionName, documentId) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${subcollectionName}:`, error);\r\n    throw new Error(`Could not delete document from ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n\r\nexport const fetchDocumentsBySelectValue = async (organizationId, relativeCollection, foreignKey, foreignValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(foreignKey, 'array-contains', foreignValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const fetchDocumentsByFieldValue = async (organizationId, relativeCollection, fieldName, fieldValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(fieldName, '==', fieldValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}"],"names":["organizationId","JSON","parse","localStorage","getItem","getEntitiesOptions","async","console","log","fetchItems","filter","entity","types","includes","type","map","id","label","name","fieldsConfig","faker","options","multiple","entityId","parentId","refreshOptions","storeId","agencyId","departmentId","serviceId","orgnizationId","locationId","regionId","countryId","managerId","status","creationDate","modifiedDate","notes","headCells","Object","keys","key","entityName","fetchDocuments","addItem","item","addDocument","updateItem","updateDocument","deleteItem","deleteDocument","subcollectionName","subcollectionRef","collection","db","snapshot","getDocs","docs","doc","data","error","documentData","addDoc","Error","documentId","docRef","updateDoc","deleteDoc","fetchDocumentsBySelectValue","relativeCollection","foreignKey","foreignValue","q","query","where","fetchDocumentsByFieldValue","fieldName","fieldValue"],"sourceRoot":""}