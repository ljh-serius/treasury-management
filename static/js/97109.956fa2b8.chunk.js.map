{"version":3,"file":"static/js/97109.956fa2b8.chunk.js","mappings":"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","sources":["pages/Analysis/CorporateCommunication/ExternalCommunication/PublicStatements.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Grid, Typography, Card, CardContent, CircularProgress } from '@mui/material';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nconst PublicStatementsAnalytics = ({ fetchItems }) => {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const result = await fetchItems();\r\n            setData(result);\r\n            setLoading(false);\r\n        }\r\n        fetchData();\r\n    }, [fetchItems]);\r\n\r\n    if (loading) {\r\n        return <CircularProgress />;\r\n    }\r\n\r\n    // Calculate KPIs\r\n    const totalStatements = data.length;\r\n    const urgentStatements = data.filter(item => item.tags.includes('urgent')).length;\r\n    const statementsByAudience = {\r\n        public: data.filter(item => item.audience === 'public').length,\r\n        investors: data.filter(item => item.audience === 'investors').length,\r\n        customers: data.filter(item => item.audience === 'customers').length,\r\n    };\r\n\r\n    // Highcharts options\r\n    const distributionChannelOptions = {\r\n        chart: { type: 'pie' },\r\n        title: { text: 'Distribution Channels' },\r\n        series: [\r\n            {\r\n                name: 'Channels',\r\n                colorByPoint: true,\r\n                data: [\r\n                    { name: 'Website', y: data.filter(item => item.distributionChannels === 'website').length },\r\n                    { name: 'Email', y: data.filter(item => item.distributionChannels === 'email').length },\r\n                    { name: 'Social Media', y: data.filter(item => item.distributionChannels === 'social-media').length },\r\n                ],\r\n            },\r\n        ],\r\n    };\r\n\r\n    const audienceOptions = {\r\n        chart: { type: 'bar' },\r\n        title: { text: 'Statements by Audience' },\r\n        xAxis: { categories: ['Public', 'Investors', 'Customers'] },\r\n        series: [\r\n            {\r\n                name: 'Audience',\r\n                data: [statementsByAudience.public, statementsByAudience.investors, statementsByAudience.customers],\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Typography variant=\"h4\">Public Statements Analytics</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\">Total Statements</Typography>\r\n                        <Typography variant=\"h4\">{totalStatements}</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\">Urgent Statements</Typography>\r\n                        <Typography variant=\"h4\">{urgentStatements}</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n                <HighchartsReact highcharts={Highcharts} options={distributionChannelOptions} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n                <HighchartsReact highcharts={Highcharts} options={audienceOptions} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PublicStatementsAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","result","fetchData","_jsx","CircularProgress","totalStatements","length","urgentStatements","filter","item","tags","includes","statementsByAudience","public","audience","investors","customers","distributionChannelOptions","chart","type","title","text","series","name","colorByPoint","y","distributionChannels","audienceOptions","xAxis","categories","_jsxs","Grid","container","spacing","children","xs","Typography","variant","md","Card","CardContent","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}