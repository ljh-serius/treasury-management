{"version":3,"file":"static/js/78644.553b2baa.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/AccountsPayable/CreditorsLedger.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function CreditorsLedgerDashboard({ fetchItems }) {\r\n  const [ledgerData, setLedgerData] = useState([]);\r\n  const [currencyDistribution, setCurrencyDistribution] = useState([]);\r\n  const [amountDistribution, setAmountDistribution] = useState([]);\r\n  const [monthlyTrendsData, setMonthlyTrendsData] = useState([]);\r\n  const [balanceTrendsData, setBalanceTrendsData] = useState([]);\r\n  const [tagsDistribution, setTagsDistribution] = useState([]);\r\n  const [totalTransactions, setTotalTransactions] = useState(0);\r\n  const [totalAmount, setTotalAmount] = useState(0);\r\n  const [totalBalance, setTotalBalance] = useState(0);\r\n  const [averageTransactionAmount, setAverageTransactionAmount] = useState(0);\r\n  const [recentTransactions, setRecentTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setLedgerData(data);\r\n      processLedgerData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processLedgerData = (data) => {\r\n    // Total Number of Transactions\r\n    setTotalTransactions(data.length);\r\n\r\n    // Total Amount and Balance\r\n    const totalAmounts = data.reduce(\r\n      (acc, ledger) => {\r\n        acc.amount += Number(ledger.amount) || 0;\r\n        acc.balance += Number(ledger.balance) || 0;\r\n        return acc;\r\n      },\r\n      { amount: 0, balance: 0 }\r\n    );\r\n\r\n    setTotalAmount(totalAmounts.amount);\r\n    setTotalBalance(totalAmounts.balance);\r\n    setAverageTransactionAmount(totalAmounts.amount / data.length);\r\n\r\n    // Transactions by Currency\r\n    const currencyCounts = data.reduce((acc, ledger) => {\r\n      acc[ledger.currency] = (acc[ledger.currency] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCurrencyDistribution(Object.keys(currencyCounts).map(key => ({\r\n      name: key,\r\n      y: currencyCounts[key],\r\n    })));\r\n\r\n    // Transactions by Tags\r\n    const tagsCounts = data.reduce((acc, ledger) => {\r\n      ledger.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagsDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n\r\n    // Transaction Amount Distribution\r\n    const amountRanges = data.reduce((acc, ledger) => {\r\n      const amount = Number(ledger.amount) || 0;\r\n      const range = amount <= 100 ? '0-100' :\r\n                    amount <= 500 ? '101-500' :\r\n                    amount <= 1000 ? '501-1000' : '1001+';\r\n      acc[range] = (acc[range] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setAmountDistribution(Object.keys(amountRanges).map(key => ({\r\n      name: key,\r\n      y: amountRanges[key],\r\n    })));\r\n\r\n    // Monthly Transactions Trend\r\n    const transactionCounts = data.reduce((acc, ledger) => {\r\n      const month = new Date(ledger.transactionDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setMonthlyTrendsData(Object.keys(transactionCounts).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: transactionCounts[key],\r\n    })));\r\n\r\n    // Balance Over Time\r\n    const balanceOverTime = data.reduce((acc, ledger) => {\r\n      const month = new Date(ledger.transactionDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + Number(ledger.balance);\r\n      return acc;\r\n    }, {});\r\n\r\n    setBalanceTrendsData(Object.keys(balanceOverTime).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: balanceOverTime[key],\r\n    })));\r\n\r\n    // Recent Transactions\r\n    const recentTransactionsList = data\r\n      .sort((a, b) => new Date(b.transactionDate) - new Date(a.transactionDate))\r\n      .slice(0, 5);\r\n    setRecentTransactions(recentTransactionsList);\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const currencyChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Transactions by Currency',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Currencies',\r\n        colorByPoint: true,\r\n        data: currencyDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const amountChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Transaction Amount Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Amount Range',\r\n        data: amountDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const monthlyTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Monthly Transactions Trend',\r\n    },\r\n    xAxis: {\r\n      categories: monthlyTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Transactions',\r\n        data: monthlyTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const balanceTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Balance Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: balanceTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Balance',\r\n        data: balanceTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const tagsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Tags Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Tags',\r\n        data: tagsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Creditors Ledger Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Transactions</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalTransactions}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalAmount.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Balance</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalBalance.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Transaction Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"purple\" sx={{ fontWeight: 'bold' }}>\r\n                  ${averageTransactionAmount.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={currencyChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={amountChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={monthlyTrendsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={balanceTrendsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["CreditorsLedgerDashboard","_ref","fetchItems","ledgerData","setLedgerData","useState","currencyDistribution","setCurrencyDistribution","amountDistribution","setAmountDistribution","monthlyTrendsData","setMonthlyTrendsData","balanceTrendsData","setBalanceTrendsData","tagsDistribution","setTagsDistribution","totalTransactions","setTotalTransactions","totalAmount","setTotalAmount","totalBalance","setTotalBalance","averageTransactionAmount","setAverageTransactionAmount","recentTransactions","setRecentTransactions","loading","setLoading","useEffect","async","data","processLedgerData","fetchData","length","totalAmounts","reduce","acc","ledger","amount","Number","balance","currencyCounts","currency","Object","keys","map","key","name","y","tagsCounts","tags","forEach","tag","amountRanges","range","transactionCounts","month","Date","transactionDate","getMonth","balanceOverTime","recentTransactionsList","sort","a","b","slice","currencyChartOptions","chart","type","title","text","series","colorByPoint","amountChartOptions","monthlyTrendsChartOptions","xAxis","categories","balanceTrendsChartOptions","tagsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}