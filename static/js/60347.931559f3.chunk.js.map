{"version":3,"file":"static/js/60347.931559f3.chunk.js","mappings":"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","sources":["pages/Analysis/SalesMarketing/Invoices/PaymentTracking.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function PaymentTrackingDashboard({ fetchItems }) {\r\n  const [paymentData, setPaymentData] = useState([]);\r\n  const [totalPayments, setTotalPayments] = useState(0);\r\n  const [totalAmountPaid, setTotalAmountPaid] = useState(0);\r\n  const [paymentStatusDistribution, setPaymentStatusDistribution] = useState([]);\r\n  const [paymentMethodDistribution, setPaymentMethodDistribution] = useState([]);\r\n  const [paidCount, setPaidCount] = useState(0);\r\n  const [pendingCount, setPendingCount] = useState(0);\r\n  const [failedCount, setFailedCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setPaymentData(data);\r\n      processPaymentData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchItems]);\r\n\r\n  const processPaymentData = (data) => {\r\n    // Total Payments\r\n    setTotalPayments(data.length);\r\n\r\n    // Total Amount Paid\r\n    const totalPaid = data.reduce((acc, payment) => acc + Number(payment.amountPaid), 0);\r\n    setTotalAmountPaid(totalPaid);\r\n\r\n    // Count Paid, Pending, and Failed Payments\r\n    const paid = data.filter(payment => payment.status === 'paid').length;\r\n    const pending = data.filter(payment => payment.status === 'pending').length;\r\n    const failed = data.filter(payment => payment.status === 'failed').length;\r\n    setPaidCount(paid);\r\n    setPendingCount(pending);\r\n    setFailedCount(failed);\r\n\r\n    // Payment Status Distribution for Pie Chart\r\n    setPaymentStatusDistribution([\r\n      { name: 'Paid', y: paid },\r\n      { name: 'Pending', y: pending },\r\n      { name: 'Failed', y: failed },\r\n    ]);\r\n\r\n    // Payment Method Distribution for Pie Chart\r\n    const methodCounts = data.reduce((acc, payment) => {\r\n      acc[payment.paymentMethod] = (acc[payment.paymentMethod] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setPaymentMethodDistribution(Object.keys(methodCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1).replace('_', ' '),\r\n      y: methodCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Highcharts options for Payment Status Distribution\r\n  const paymentStatusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Payment Status Distribution' },\r\n    series: [{\r\n      name: 'Payments',\r\n      colorByPoint: true,\r\n      data: paymentStatusDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Payment Method Distribution\r\n  const paymentMethodChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Payment Method Distribution' },\r\n    series: [{\r\n      name: 'Payment Methods',\r\n      colorByPoint: true,\r\n      data: paymentMethodDistribution,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Payment Tracking Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Payments</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalPayments}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Amount Paid</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalAmountPaid.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Paid Payments</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {paidCount}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Pending Payments</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  {pendingCount}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Failed Payments</Typography>\r\n                <Typography variant=\"h4\" color=\"red\" sx={{ fontWeight: 'bold' }}>\r\n                  {failedCount}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Payment Status Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={paymentStatusChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Payment Method Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={paymentMethodChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["PaymentTrackingDashboard","_ref","fetchItems","paymentData","setPaymentData","useState","totalPayments","setTotalPayments","totalAmountPaid","setTotalAmountPaid","paymentStatusDistribution","setPaymentStatusDistribution","paymentMethodDistribution","setPaymentMethodDistribution","paidCount","setPaidCount","pendingCount","setPendingCount","failedCount","setFailedCount","loading","setLoading","useEffect","async","data","processPaymentData","fetchDataAsync","length","totalPaid","reduce","acc","payment","Number","amountPaid","paid","filter","status","pending","failed","name","y","methodCounts","paymentMethod","Object","keys","map","key","charAt","toUpperCase","slice","replace","paymentStatusChartOptions","chart","type","title","text","series","colorByPoint","paymentMethodChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}