{"version":3,"file":"static/js/97109.4f582d71.chunk.js","mappings":"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","sources":["pages/Analysis/CorporateCommunication/ExternalCommunication/PublicStatements.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst PublicStatementsAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response || []); // Ensure data is an array\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // KPIs\r\n  const totalStatements = data.length;\r\n\r\n  // Audience Distribution\r\n  const audienceCount = data.reduce((acc, record) => {\r\n    acc[record.audience] = (acc[record.audience] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const audienceDistribution = Object.keys(audienceCount).map(audience => ({\r\n    name: audience.charAt(0).toUpperCase() + audience.slice(1),\r\n    y: audienceCount[audience],\r\n  }));\r\n\r\n  // Distribution Channels\r\n  const channelCount = data.reduce((acc, record) => {\r\n    acc[record.distributionChannels] = (acc[record.distributionChannels] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const distributionChannelData = Object.keys(channelCount).map(channel => ({\r\n    name: channel.charAt(0).toUpperCase() + channel.slice(1).replace(/-/g, ' '),\r\n    y: channelCount[channel],\r\n  }));\r\n\r\n  // Highcharts options for Audience Distribution\r\n  const audienceChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Audience Distribution' },\r\n    series: [{\r\n      name: 'Audience',\r\n      colorByPoint: true,\r\n      data: audienceDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Distribution Channels\r\n  const distributionChannelsChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Distribution Channels' },\r\n    series: [{\r\n      name: 'Channels',\r\n      colorByPoint: true,\r\n      data: distributionChannelData,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Public Statements</Typography>\r\n          <Typography variant=\"h4\">{totalStatements}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={audienceChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={distributionChannelsChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.title}:</Typography>\r\n              {Array.isArray(record.tags) ? record.tags.map((tag, tagIndex) => (\r\n                <Chip key={tagIndex} label={tag.label} style={{ margin: '5px' }} />\r\n              )) : 'No Tags'}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PublicStatementsAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalStatements","length","audienceCount","reduce","acc","record","audience","audienceDistribution","Object","keys","map","name","charAt","toUpperCase","slice","y","channelCount","distributionChannels","audienceChartOptions","chart","type","title","text","series","colorByPoint","distributionChannelsChartOptions","channel","replace","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","HighchartsReact","highcharts","Highcharts","options","index","Array","isArray","tags","tag","tagIndex","Chip","label","style","margin"],"sourceRoot":""}