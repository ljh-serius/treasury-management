{"version":3,"file":"static/js/15881.6de7b467.chunk.js","mappings":"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","sources":["pages/Analysis/SalesMarketing/ClientsCustomers/CustomerSatisfaction.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function CustomerSatisfactionDashboard({ fetchData }) {\r\n  const [satisfactionData, setSatisfactionData] = useState([]);\r\n  const [satisfactionDistribution, setSatisfactionDistribution] = useState([]);\r\n  const [feedbackDistribution, setFeedbackDistribution] = useState([]);\r\n  const [totalResponses, setTotalResponses] = useState(0);\r\n  const [averageScore, setAverageScore] = useState(0);\r\n  const [highSatisfactionCount, setHighSatisfactionCount] = useState(0);\r\n  const [lowSatisfactionCount, setLowSatisfactionCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchData();\r\n      setSatisfactionData(data);\r\n      processSatisfactionData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchData]);\r\n\r\n  const processSatisfactionData = (data) => {\r\n    // Total Responses\r\n    setTotalResponses(data.length);\r\n\r\n    // Average Satisfaction Score\r\n    const totalScore = data.reduce((acc, survey) => acc + Number(survey.satisfactionScore), 0);\r\n    setAverageScore(totalScore / data.length);\r\n\r\n    // High and Low Satisfaction Count\r\n    const highSatisfaction = data.filter(survey => survey.satisfactionScore >= 8).length;\r\n    const lowSatisfaction = data.filter(survey => survey.satisfactionScore <= 3).length;\r\n    setHighSatisfactionCount(highSatisfaction);\r\n    setLowSatisfactionCount(lowSatisfaction);\r\n\r\n    // Satisfaction Score Distribution\r\n    const satisfactionCounts = data.reduce((acc, survey) => {\r\n      const scoreRange = `${Math.floor(survey.satisfactionScore / 2) * 2}-${Math.floor(survey.satisfactionScore / 2) * 2 + 1}`;\r\n      acc[scoreRange] = (acc[scoreRange] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setSatisfactionDistribution(Object.keys(satisfactionCounts).map(key => ({\r\n      name: key,\r\n      y: satisfactionCounts[key],\r\n    })));\r\n\r\n    // Feedback Distribution (Positive vs Negative)\r\n    const feedbackCounts = {\r\n      'Positive Feedback': data.filter(survey => survey.tags.includes('positive-feedback')).length,\r\n      'Negative Feedback': data.filter(survey => survey.tags.includes('negative-feedback')).length,\r\n    };\r\n    setFeedbackDistribution(Object.keys(feedbackCounts).map(key => ({\r\n      name: key,\r\n      y: feedbackCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Highcharts options\r\n  const satisfactionChartOptions = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'Satisfaction Score Distribution' },\r\n    series: [{\r\n      name: 'Scores',\r\n      data: satisfactionDistribution,\r\n    }],\r\n  };\r\n\r\n  const feedbackChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Feedback Distribution' },\r\n    series: [{\r\n      name: 'Feedback',\r\n      colorByPoint: true,\r\n      data: feedbackDistribution,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Customer Satisfaction Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Responses</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalResponses}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Satisfaction Score</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  {averageScore.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">High Satisfaction</Typography>\r\n                <Typography variant=\"h4\" color=\"purple\" sx={{ fontWeight: 'bold' }}>\r\n                  {highSatisfactionCount}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Low Satisfaction</Typography>\r\n                <Typography variant=\"h4\" color=\"red\" sx={{ fontWeight: 'bold' }}>\r\n                  {lowSatisfactionCount}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Satisfaction Score Distribution */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={satisfactionChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Feedback Distribution */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={feedbackChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["CustomerSatisfactionDashboard","_ref","fetchData","satisfactionData","setSatisfactionData","useState","satisfactionDistribution","setSatisfactionDistribution","feedbackDistribution","setFeedbackDistribution","totalResponses","setTotalResponses","averageScore","setAverageScore","highSatisfactionCount","setHighSatisfactionCount","lowSatisfactionCount","setLowSatisfactionCount","loading","setLoading","useEffect","async","data","processSatisfactionData","fetchDataAsync","length","totalScore","reduce","acc","survey","Number","satisfactionScore","highSatisfaction","filter","lowSatisfaction","satisfactionCounts","scoreRange","Math","floor","Object","keys","map","key","name","y","feedbackCounts","tags","includes","satisfactionChartOptions","chart","type","title","text","series","feedbackChartOptions","colorByPoint","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}