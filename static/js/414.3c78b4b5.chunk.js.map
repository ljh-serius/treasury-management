{"version":3,"file":"static/js/414.3c78b4b5.chunk.js","mappings":"wNA2EA,QAvEA,SAAwBA,GAAoB,IAAnB,aAAEC,GAAcD,EACvC,MAAOE,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,CAAEG,aAAc,EAAGC,cAAe,EAAGC,eAAgB,KAEtFC,EAAAA,EAAAA,YAAU,KACSC,WACf,MAAMC,QAAaX,IACnBE,EAAeS,GAGf,MAAML,EAAeK,EAAKC,OACpBL,EAAgBI,EAAKE,QAAOC,GAAkC,WAAxBA,EAAOC,eAA2BH,OACxEJ,EAAiBG,EAAKK,QAAO,CAACC,EAAKH,IAAWG,GAAOH,EAAOI,eAAiB,IAAI,GAAKZ,EAE5FD,EAAQ,CAAEC,eAAcC,gBAAeC,kBAAiB,EAG1DW,EAAU,GACT,IAEH,MAAMC,EAAsB,CAC1BC,MAAO,CAAEC,KAAM,+BACfC,OAAQ,CACN,CACEC,KAAM,UACNb,KAAMV,EAAYwB,KAAIX,GAAUA,EAAOI,kBAG3CQ,MAAO,CAAEC,WAAY1B,EAAYwB,KAAIX,GAAUA,EAAOc,cACtDC,MAAO,CAAER,MAAO,CAAEC,KAAM,aAGpBQ,EAA4B,CAChCC,MAAO,CAAEC,KAAM,OACfX,MAAO,CAAEC,KAAM,8BACfC,OAAQ,CACN,CACEC,KAAM,UACNS,cAAc,EACdtB,KAAM,CACJ,CAAEa,KAAM,SAAUU,EAAG9B,EAAKG,eAC1B,CAAEiB,KAAM,WAAYU,EAAGjC,EAAYY,QAAOC,GAAkC,aAAxBA,EAAOC,eAA6BH,QACxF,CAAEY,KAAM,WAAYU,EAAGjC,EAAYY,QAAOC,GAAkC,aAAxBA,EAAOC,eAA6BH,YAMhG,OACEuB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJD,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBJ,SAAA,EAC9DD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIhC,EAAKE,mBAEX6B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIhC,EAAKG,oBAEX4B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,IAAEhC,EAAKI,eAAeiC,QAAQ,aAGrCJ,EAAAA,EAAAA,KAACK,IAAe,CAACC,WAAYC,IAAYC,QAASzB,KAClDiB,EAAAA,EAAAA,KAACK,IAAe,CAACC,WAAYC,IAAYC,QAASf,MAGxD,C","sources":["pages/Analysis/Clients.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nfunction ClientsAnalysis({ fetchClients }) {\r\n  const [clientsData, setClientsData] = useState([]);\r\n  const [kpis, setKpis] = useState({ totalClients: 0, activeClients: 0, averageRevenue: 0 });\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      const data = await fetchClients();\r\n      setClientsData(data);\r\n\r\n      // Calculate KPIs\r\n      const totalClients = data.length;\r\n      const activeClients = data.filter(client => client.clientStatus === 'active').length;\r\n      const averageRevenue = data.reduce((sum, client) => sum + (client.annualRevenue || 0), 0) / totalClients;\r\n\r\n      setKpis({ totalClients, activeClients, averageRevenue });\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  const revenueChartOptions = {\r\n    title: { text: 'Annual Revenue Distribution' },\r\n    series: [\r\n      {\r\n        name: 'Revenue',\r\n        data: clientsData.map(client => client.annualRevenue),\r\n      },\r\n    ],\r\n    xAxis: { categories: clientsData.map(client => client.clientName) },\r\n    yAxis: { title: { text: 'Revenue' } },\r\n  };\r\n\r\n  const clientsStatusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Client Status Distribution' },\r\n    series: [\r\n      {\r\n        name: 'Clients',\r\n        colorByPoint: true,\r\n        data: [\r\n          { name: 'Active', y: kpis.activeClients },\r\n          { name: 'Inactive', y: clientsData.filter(client => client.clientStatus === 'inactive').length },\r\n          { name: 'Prospect', y: clientsData.filter(client => client.clientStatus === 'prospect').length },\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Clients Dashboard</h2>\r\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n        <div>\r\n          <h3>Total Clients</h3>\r\n          <p>{kpis.totalClients}</p>\r\n        </div>\r\n        <div>\r\n          <h3>Active Clients</h3>\r\n          <p>{kpis.activeClients}</p>\r\n        </div>\r\n        <div>\r\n          <h3>Average Revenue</h3>\r\n          <p>${kpis.averageRevenue.toFixed(2)}</p>\r\n        </div>\r\n      </div>\r\n      <HighchartsReact highcharts={Highcharts} options={revenueChartOptions} />\r\n      <HighchartsReact highcharts={Highcharts} options={clientsStatusChartOptions} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClientsAnalysis;\r\n"],"names":["_ref","fetchClients","clientsData","setClientsData","useState","kpis","setKpis","totalClients","activeClients","averageRevenue","useEffect","async","data","length","filter","client","clientStatus","reduce","sum","annualRevenue","loadData","revenueChartOptions","title","text","series","name","map","xAxis","categories","clientName","yAxis","clientsStatusChartOptions","chart","type","colorByPoint","y","_jsxs","children","_jsx","style","display","justifyContent","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}