{"version":3,"file":"static/js/90216.08e5c18a.chunk.js","mappings":"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","sources":["pages/Analysis/EnvironmentalSocialGovernance/SustainabilityReports/CarbonFootprintTracking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst CarbonFootprintAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response);\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // Calculate KPIs\r\n  const totalEmissions = data.reduce((sum, record) => sum + record.totalEmissions, 0);\r\n  const totalScope1 = data.reduce((sum, record) => sum + record.scope1Emissions, 0);\r\n  const totalScope2 = data.reduce((sum, record) => sum + record.scope2Emissions, 0);\r\n  const totalScope3 = data.reduce((sum, record) => sum + record.scope3Emissions, 0);\r\n  const avgReductionTarget = data.reduce((sum, record) => sum + record.reductionTarget, 0) / data.length;\r\n  const avgAchievedReduction = data.reduce((sum, record) => sum + record.achievedReduction, 0) / data.length;\r\n\r\n  // Highcharts options for total emissions over time\r\n  const emissionsChartOptions = {\r\n    title: { text: 'Total Emissions Over Time (tons CO2e)' },\r\n    xAxis: { categories: data.map((record) => record.year) },\r\n    yAxis: { title: { text: 'Emissions (tons CO2e)' } },\r\n    series: [\r\n      { name: 'Total Emissions', data: data.map((record) => record.totalEmissions) },\r\n      { name: 'Scope 1 Emissions', data: data.map((record) => record.scope1Emissions) },\r\n      { name: 'Scope 2 Emissions', data: data.map((record) => record.scope2Emissions) },\r\n      { name: 'Scope 3 Emissions', data: data.map((record) => record.scope3Emissions) },\r\n    ],\r\n  };\r\n\r\n  // Highcharts options for achieved vs target reduction\r\n  const reductionChartOptions = {\r\n    title: { text: 'Reduction Target vs Achieved Reduction (%)' },\r\n    xAxis: { categories: data.map((record) => record.year) },\r\n    yAxis: { title: { text: 'Reduction (%)' } },\r\n    series: [\r\n      { name: 'Reduction Target', data: data.map((record) => record.reductionTarget) },\r\n      { name: 'Achieved Reduction', data: data.map((record) => record.achievedReduction) },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Emissions (tons CO2e)</Typography>\r\n          <Typography variant=\"h4\">{totalEmissions.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Scope 1 Emissions (tons CO2e)</Typography>\r\n          <Typography variant=\"h4\">{totalScope1.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Scope 2 Emissions (tons CO2e)</Typography>\r\n          <Typography variant=\"h4\">{totalScope2.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Scope 3 Emissions (tons CO2e)</Typography>\r\n          <Typography variant=\"h4\">{totalScope3.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Average Reduction Target (%)</Typography>\r\n          <Typography variant=\"h4\">{avgReductionTarget.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Average Achieved Reduction (%)</Typography>\r\n          <Typography variant=\"h4\">{avgAchievedReduction.toFixed(2)}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={emissionsChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={reductionChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.year}:</Typography>\r\n              {record.tags.map((tag) => (\r\n                <Chip key={tag.id} label={tag.label} style={{ margin: '5px' }} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CarbonFootprintAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalEmissions","reduce","sum","record","totalScope1","scope1Emissions","totalScope2","scope2Emissions","totalScope3","scope3Emissions","avgReductionTarget","reductionTarget","length","avgAchievedReduction","achievedReduction","emissionsChartOptions","title","text","xAxis","categories","map","year","yAxis","series","name","reductionChartOptions","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","toFixed","HighchartsReact","highcharts","Highcharts","options","index","tags","tag","Chip","label","style","margin","id"],"sourceRoot":""}