{"version":3,"file":"static/js/414.76a57eda.chunk.js","mappings":"sPAyFA,QAlFA,SAAwBA,GAAkB,IAAjB,WAAEC,GAAYD,EACrC,MAAOE,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,CAAEG,aAAc,EAAGC,cAAe,EAAGC,eAAgB,KAC/EC,EAASC,IAAcP,EAAAA,EAAAA,WAAS,IAEvCQ,EAAAA,EAAAA,YAAU,KACSC,WACfF,GAAW,GACX,MAAMG,QAAab,IACnBE,EAAeW,GAGf,MAAMP,EAAeO,EAAKC,OACpBP,EAAgBM,EAAKE,QAAOC,GAAkC,WAAxBA,EAAOC,eAA2BH,OACxEN,EAAiBF,EAAe,EACpCO,EAAKK,QAAO,CAACC,EAAKH,IAAWG,GAAOH,EAAOI,eAAiB,IAAI,GAAKd,EAAe,EAEtFD,EAAQ,CAAEC,eAAcC,gBAAeC,mBACvCE,GAAW,EAAM,EAGnBW,EAAU,GACT,IAEH,MAAMC,EAAsB,CAC1BC,MAAO,CAAEC,KAAM,+BACfC,OAAQ,CACN,CACEC,KAAM,UACNb,KAAMZ,EAAY0B,KAAIX,GAAUA,EAAOI,kBAG3CQ,MAAO,CAAEC,WAAY5B,EAAY0B,KAAIX,GAAUA,EAAOc,cACtDC,MAAO,CAAER,MAAO,CAAEC,KAAM,aAGpBQ,EAA4B,CAChCC,MAAO,CAAEC,KAAM,OACfX,MAAO,CAAEC,KAAM,8BACfC,OAAQ,CACN,CACEC,KAAM,UACNS,cAAc,EACdtB,KAAM,CACJ,CAAEa,KAAM,SAAUU,EAAGhC,EAAKG,eAC1B,CAAEmB,KAAM,WAAYU,EAAGnC,EAAYc,QAAOC,GAAkC,aAAxBA,EAAOC,eAA6BH,QACxF,CAAEY,KAAM,WAAYU,EAAGnC,EAAYc,QAAOC,GAAkC,aAAxBA,EAAOC,eAA6BH,YAMhG,OACEuB,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,WAAY,EAAGC,cAAe,GAAIC,SAAA,EAC/DC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACL,GAAI,CAAEM,MAAO,OAAQC,OAASC,GAAUA,EAAMD,OAAOE,OAAS,GAAKC,KAAMzC,EAAQkC,UACzFC,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,CAACL,MAAM,eAExBrC,IACA4B,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAAT,SAAA,EACEN,EAAAA,EAAAA,MAAA,OAAKgB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBZ,SAAA,EAC9DN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIvC,EAAKE,mBAEX+B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIvC,EAAKG,oBAEX8B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJN,EAAAA,EAAAA,MAAA,KAAAM,SAAA,CAAG,IAAEvC,EAAKI,eAAegD,QAAQ,aAGrCZ,EAAAA,EAAAA,KAACa,IAAe,CAACC,WAAYC,IAAYC,QAAStC,KAClDsB,EAAAA,EAAAA,KAACa,IAAe,CAACC,WAAYC,IAAYC,QAAS5B,SAK5D,C","sources":["pages/Analysis/Clients.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport { Container } from '@mui/material';\r\n\r\nfunction ClientsAnalysis({ fetchItems }) {\r\n  const [clientsData, setClientsData] = useState([]);\r\n  const [kpis, setKpis] = useState({ totalClients: 0, activeClients: 0, averageRevenue: 0 });\r\n  const [loading, setLoading] = useState(true); // Add loading state\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      setLoading(true); // Start loading\r\n      const data = await fetchItems();\r\n      setClientsData(data);\r\n\r\n      // Calculate KPIs\r\n      const totalClients = data.length;\r\n      const activeClients = data.filter(client => client.clientStatus === 'active').length;\r\n      const averageRevenue = totalClients > 0 ? \r\n        data.reduce((sum, client) => sum + (client.annualRevenue || 0), 0) / totalClients : 0;\r\n\r\n      setKpis({ totalClients, activeClients, averageRevenue });\r\n      setLoading(false); // Stop loading\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  const revenueChartOptions = {\r\n    title: { text: 'Annual Revenue Distribution' },\r\n    series: [\r\n      {\r\n        name: 'Revenue',\r\n        data: clientsData.map(client => client.annualRevenue),\r\n      },\r\n    ],\r\n    xAxis: { categories: clientsData.map(client => client.clientName) },\r\n    yAxis: { title: { text: 'Revenue' } },\r\n  };\r\n\r\n  const clientsStatusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Client Status Distribution' },\r\n    series: [\r\n      {\r\n        name: 'Clients',\r\n        colorByPoint: true,\r\n        data: [\r\n          { name: 'Active', y: kpis.activeClients },\r\n          { name: 'Inactive', y: clientsData.filter(client => client.clientStatus === 'inactive').length },\r\n          { name: 'Prospect', y: clientsData.filter(client => client.clientStatus === 'prospect').length },\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <h2>Clients Dashboard</h2>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      {!loading && (\r\n        <>\r\n          <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n            <div>\r\n              <h3>Total Clients</h3>\r\n              <p>{kpis.totalClients}</p>\r\n            </div>\r\n            <div>\r\n              <h3>Active Clients</h3>\r\n              <p>{kpis.activeClients}</p>\r\n            </div>\r\n            <div>\r\n              <h3>Average Revenue</h3>\r\n              <p>${kpis.averageRevenue.toFixed(2)}</p>\r\n            </div>\r\n          </div>\r\n          <HighchartsReact highcharts={Highcharts} options={revenueChartOptions} />\r\n          <HighchartsReact highcharts={Highcharts} options={clientsStatusChartOptions} />\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ClientsAnalysis;\r\n"],"names":["_ref","fetchItems","clientsData","setClientsData","useState","kpis","setKpis","totalClients","activeClients","averageRevenue","loading","setLoading","useEffect","async","data","length","filter","client","clientStatus","reduce","sum","annualRevenue","loadData","revenueChartOptions","title","text","series","name","map","xAxis","categories","clientName","yAxis","clientsStatusChartOptions","chart","type","colorByPoint","y","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","_Fragment","style","display","justifyContent","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}