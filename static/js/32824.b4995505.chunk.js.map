{"version":3,"file":"static/js/32824.b4995505.chunk.js","mappings":"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","sources":["pages/Analysis/InformationTechnology/NetworkManagement/NetworkTopology.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function NetworkTopologyAnalytics({ fetchItems }) {\r\n  const [topologyData, setTopologyData] = useState([]);\r\n  const [totalTopologies, setTotalTopologies] = useState(0);\r\n  const [criticalTopologies, setCriticalTopologies] = useState(0);\r\n  const [topologyTypeDistribution, setTopologyTypeDistribution] = useState([]);\r\n  const [deviceCountDistribution, setDeviceCountDistribution] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setTopologyData(data);\r\n      processTopologyData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processTopologyData = (data) => {\r\n    // Total Topologies\r\n    setTotalTopologies(data.length);\r\n  \r\n    // Count Critical Topologies (ensure tags exists and is an array)\r\n    const critical = data.filter(topology => Array.isArray(topology.tags) && topology.tags.includes('critical')).length;\r\n    setCriticalTopologies(critical);\r\n  \r\n    // Topology Type Distribution for Pie Chart\r\n    const typeCounts = data.reduce((acc, topology) => {\r\n      acc[topology.topologyType] = (acc[topology.topologyType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setTopologyTypeDistribution(Object.keys(typeCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: typeCounts[key],\r\n    })));\r\n  \r\n    // Device Count Distribution for Bar Chart\r\n    const deviceCounts = data.map(topology => ({\r\n      name: topology.networkName,\r\n      y: Number(topology.deviceCount),\r\n    }));\r\n    setDeviceCountDistribution(deviceCounts);\r\n  };\r\n\r\n  // Highcharts options for Topology Type Distribution\r\n  const topologyTypeChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Network Topology Types Distribution' },\r\n    series: [{\r\n      name: 'Topologies',\r\n      colorByPoint: true,\r\n      data: topologyTypeDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Device Count Distribution\r\n  const deviceCountChartOptions = {\r\n    chart: { type: 'bar' },\r\n    title: { text: 'Device Count by Network' },\r\n    xAxis: { type: 'category', title: { text: 'Network Name' } },\r\n    yAxis: { title: { text: 'Device Count' } },\r\n    series: [{\r\n      name: 'Devices',\r\n      data: deviceCountDistribution,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Network Topology Analytics\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Network Topologies</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalTopologies}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Critical Topologies</Typography>\r\n                <Typography variant=\"h4\" color=\"red\" sx={{ fontWeight: 'bold' }}>\r\n                  {criticalTopologies}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Topology Type Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={topologyTypeChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Device Count Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={deviceCountChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["NetworkTopologyAnalytics","_ref","fetchItems","topologyData","setTopologyData","useState","totalTopologies","setTotalTopologies","criticalTopologies","setCriticalTopologies","topologyTypeDistribution","setTopologyTypeDistribution","deviceCountDistribution","setDeviceCountDistribution","loading","setLoading","useEffect","async","data","processTopologyData","fetchData","length","critical","filter","topology","Array","isArray","tags","includes","typeCounts","reduce","acc","topologyType","Object","keys","map","key","name","charAt","toUpperCase","slice","y","deviceCounts","networkName","Number","deviceCount","topologyTypeChartOptions","chart","type","title","text","series","colorByPoint","deviceCountChartOptions","xAxis","yAxis","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}