{"version":3,"file":"static/js/15922.268dbefc.chunk.js","mappings":"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","sources":["pages/Analysis/CorporateCommunication/InternalCommunication/Announcements.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst AnnouncementsAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response || []); // Ensure data is an array\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // KPIs\r\n  const totalAnnouncements = data.length;\r\n\r\n  // Grouping announcements by audience\r\n  const audienceCounts = data.reduce((acc, record) => {\r\n    acc[record.audience] = (acc[record.audience] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const audienceDistribution = Object.keys(audienceCounts).map(audience => ({\r\n    name: audience.charAt(0).toUpperCase() + audience.slice(1).replace(/-/g, ' '),\r\n    y: audienceCounts[audience],\r\n  }));\r\n\r\n  // Highcharts options for audience distribution\r\n  const audienceChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Audience Distribution of Announcements' },\r\n    series: [{\r\n      name: 'Audience',\r\n      colorByPoint: true,\r\n      data: audienceDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for announcement frequency over time\r\n  const announcementDateChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Announcements Over Time' },\r\n    xAxis: {\r\n      categories: data.map(record => new Date(record.announcementDate).toLocaleDateString()),\r\n      title: { text: 'Announcement Date' },\r\n    },\r\n    yAxis: { title: { text: 'Number of Announcements' } },\r\n    series: [{\r\n      name: 'Announcements',\r\n      data: data.map(() => 1), // Each announcement counts as one\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Announcements</Typography>\r\n          <Typography variant=\"h4\">{totalAnnouncements}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={audienceChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={announcementDateChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.title}:</Typography>\r\n              {Array.isArray(record.tags) ? record.tags.map((tag, tagIndex) => (\r\n                <Chip key={tagIndex} label={tag.label} style={{ margin: '5px' }} />\r\n              )) : 'No Tags'}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AnnouncementsAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalAnnouncements","length","audienceCounts","reduce","acc","record","audience","audienceChartOptions","chart","type","title","text","series","name","colorByPoint","Object","keys","map","charAt","toUpperCase","slice","replace","y","announcementDateChartOptions","xAxis","categories","Date","announcementDate","toLocaleDateString","yAxis","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","HighchartsReact","highcharts","Highcharts","options","index","Array","isArray","tags","tag","tagIndex","Chip","label","style","margin"],"sourceRoot":""}