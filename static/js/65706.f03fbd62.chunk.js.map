{"version":3,"file":"static/js/65706.f03fbd62.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/AccountsReceivable/CustomerInvoices.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function CustomerInvoicesDashboard({ fetchItems }) {\r\n  const [invoicesData, setInvoicesData] = useState([]);\r\n  const [currencyDistribution, setCurrencyDistribution] = useState([]);\r\n  const [paymentTermsDistribution, setPaymentTermsDistribution] = useState([]);\r\n  const [monthlyTrendsData, setMonthlyTrendsData] = useState([]);\r\n  const [totalAmountTrendsData, setTotalAmountTrendsData] = useState([]);\r\n  const [tagsDistribution, setTagsDistribution] = useState([]);\r\n  const [totalInvoices, setTotalInvoices] = useState(0);\r\n  const [totalAmountExclVAT, setTotalAmountExclVAT] = useState(0);\r\n  const [totalAmountInclVAT, setTotalAmountInclVAT] = useState(0);\r\n  const [averageInvoiceAmount, setAverageInvoiceAmount] = useState(0);\r\n  const [overdueInvoices, setOverdueInvoices] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setInvoicesData(data);\r\n      processInvoicesData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processInvoicesData = (data) => {\r\n    // Total Number of Invoices\r\n    setTotalInvoices(data.length);\r\n\r\n    // Total Amounts Excluding and Including VAT\r\n    const totals = data.reduce(\r\n      (acc, invoice) => {\r\n        acc.exclVAT += Number(invoice.totalAmountExclVAT) || 0;\r\n        acc.inclVAT += Number(invoice.totalAmountInclVAT) || 0;\r\n        return acc;\r\n      },\r\n      { exclVAT: 0, inclVAT: 0 }\r\n    );\r\n\r\n    setTotalAmountExclVAT(totals.exclVAT);\r\n    setTotalAmountInclVAT(totals.inclVAT);\r\n    setAverageInvoiceAmount(totals.exclVAT / data.length);\r\n\r\n    // Invoices by Currency\r\n    const currencyCounts = data.reduce((acc, invoice) => {\r\n      acc[invoice.preferredCurrency] = (acc[invoice.preferredCurrency] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCurrencyDistribution(Object.keys(currencyCounts).map(key => ({\r\n      name: key,\r\n      y: currencyCounts[key],\r\n    })));\r\n\r\n    // Invoices by Payment Terms\r\n    const paymentTermsCounts = data.reduce((acc, invoice) => {\r\n      acc[invoice.paymentTerms] = (acc[invoice.paymentTerms] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setPaymentTermsDistribution(Object.keys(paymentTermsCounts).map(key => ({\r\n      name: key,\r\n      y: paymentTermsCounts[key],\r\n    })));\r\n\r\n    // Tags Distribution\r\n    const tagsCounts = data.reduce((acc, invoice) => {\r\n      invoice.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagsDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n\r\n    // Monthly Invoice Trends\r\n    const trendCounts = data.reduce((acc, invoice) => {\r\n      const month = new Date(invoice.issuedAt).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setMonthlyTrendsData(Object.keys(trendCounts).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: trendCounts[key],\r\n    })));\r\n\r\n    // Total Amount Over Time\r\n    const amountTrends = data.reduce((acc, invoice) => {\r\n      const month = new Date(invoice.issuedAt).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + Number(invoice.totalAmountExclVAT);\r\n      return acc;\r\n    }, {});\r\n\r\n    setTotalAmountTrendsData(Object.keys(amountTrends).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: amountTrends[key],\r\n    })));\r\n\r\n    // Overdue Invoices\r\n    const today = new Date();\r\n    const overdueList = data.filter(invoice => new Date(invoice.dueDate) < today);\r\n    setOverdueInvoices(overdueList);\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const currencyChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Invoices by Currency',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Currencies',\r\n        colorByPoint: true,\r\n        data: currencyDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const paymentTermsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Invoices by Payment Terms',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Payment Terms',\r\n        data: paymentTermsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const monthlyTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Monthly Invoice Trends',\r\n    },\r\n    xAxis: {\r\n      categories: monthlyTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Invoices',\r\n        data: monthlyTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const totalAmountTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Total Amount Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: totalAmountTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Total Amount Excl. VAT',\r\n        data: totalAmountTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const tagsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Tags Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Tags',\r\n        data: tagsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Customer Invoices Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Invoices</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalInvoices}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Amount (Excl. VAT)</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalAmountExclVAT.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Amount (Incl. VAT)</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalAmountInclVAT.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Invoice Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"purple\" sx={{ fontWeight: 'bold' }}>\r\n                  ${averageInvoiceAmount.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={currencyChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={paymentTermsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={monthlyTrendsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={totalAmountTrendsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagsChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Overdue Invoices Section */}\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Overdue Invoices</Typography>\r\n                <ol>\r\n                  {overdueInvoices.map(invoice => (\r\n                    <li key={invoice.invoiceId}>\r\n                      <Typography variant=\"body2\">\r\n                        {invoice.invoiceName} - Due Date: {new Date(invoice.dueDate).toLocaleDateString()}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["CustomerInvoicesDashboard","_ref","fetchItems","invoicesData","setInvoicesData","useState","currencyDistribution","setCurrencyDistribution","paymentTermsDistribution","setPaymentTermsDistribution","monthlyTrendsData","setMonthlyTrendsData","totalAmountTrendsData","setTotalAmountTrendsData","tagsDistribution","setTagsDistribution","totalInvoices","setTotalInvoices","totalAmountExclVAT","setTotalAmountExclVAT","totalAmountInclVAT","setTotalAmountInclVAT","averageInvoiceAmount","setAverageInvoiceAmount","overdueInvoices","setOverdueInvoices","loading","setLoading","useEffect","async","data","processInvoicesData","fetchData","length","totals","reduce","acc","invoice","exclVAT","Number","inclVAT","currencyCounts","preferredCurrency","Object","keys","map","key","name","y","paymentTermsCounts","paymentTerms","tagsCounts","tags","forEach","tag","trendCounts","month","Date","issuedAt","getMonth","amountTrends","today","overdueList","filter","dueDate","currencyChartOptions","chart","type","title","text","series","colorByPoint","paymentTermsChartOptions","monthlyTrendsChartOptions","xAxis","categories","totalAmountTrendsChartOptions","tagsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options","invoiceName","toLocaleDateString","invoiceId"],"sourceRoot":""}