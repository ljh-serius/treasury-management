{"version":3,"file":"static/js/26.f1428f85.chunk.js","mappings":"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","sources":["components/Management/Partners.js","utils/firebaseCrudHelpers.js"],"sourcesContent":["import {\r\n    fetchDocuments,\r\n    addDocument,\r\n    updateDocument,\r\n    deleteDocument,\r\n    fetchDocumentsBySelectValue,\r\n    fetchDocumentsByFieldValue\r\n} from '../../utils/firebaseCrudHelpers';\r\n\r\n// partners\r\nconst organizationId = JSON.parse(localStorage.getItem('userData')).organizationId;\r\n\r\nexport const fieldsConfig = {\r\n    name: { label: 'Partner Name', type: 'text', faker: 'company.name' },\r\n    service: {\r\n      label: 'Service',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'consulting', label: 'Consulting' },\r\n        { id: 'development', label: 'Development' },\r\n        { id: 'design', label: 'Design' },\r\n        { id: 'marketing', label: 'Marketing' },\r\n        { id: 'support', label: 'Support' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    partnerType: {\r\n      label: 'Partner Type',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'strategic', label: 'Strategic' },\r\n        { id: 'channel', label: 'Channel' },\r\n        { id: 'technology', label: 'Technology' },\r\n        { id: 'alliance', label: 'Alliance' },\r\n        { id: 'health_inssurance', label: 'Health Insurance' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    contactName: { label: 'Contact Name', type: 'text', faker: 'name.fullName' },\r\n    contactEmail: { label: 'Contact Email', type: 'email', faker: 'internet.email' },\r\n    contactPhone: { label: 'Contact Phone', type: 'tel', faker: 'phone.imei' },\r\n    address: { label: 'Address', type: 'text', faker: 'address.streetAddress' },\r\n    website: { label: 'Website', type: 'url', faker: 'internet.url' },\r\n    servicesProvided: {\r\n      label: 'Services Provided',\r\n      type: 'select',\r\n      multiple: true,\r\n      options: [\r\n        { id: 'health_insurance', label: 'Health Insurance' },\r\n        { id: 'software_development', label: 'Software Development' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    industry: {\r\n      label: 'Industry',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'finance', label: 'Finance' },\r\n        { id: 'technology', label: 'Technology' },\r\n        { id: 'healthcare', label: 'Healthcare' },\r\n        { id: 'retail', label: 'Retail' },\r\n        { id: 'education', label: 'Education' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    agreementDate: { label: 'Agreement Date', type: 'date', faker: 'date.past' },\r\n    contractValue: { label: 'Contract Value', type: 'number', faker: 'finance.amount' },\r\n    startDate: { label: 'Start Date', type: 'date', faker: 'date.past' },\r\n    endDate: { label: 'End Date', type: 'date', faker: 'date.future' },\r\n    renewalDate: { label: 'Renewal Date', type: 'date', faker: 'date.future' },\r\n    riskLevel: {\r\n      label: 'Risk Level',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'low', label: 'Low' },\r\n        { id: 'medium', label: 'Medium' },\r\n        { id: 'high', label: 'High' },\r\n        { id: 'critical', label: 'Critical' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    region: {\r\n      label: 'Region',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'north_america', label: 'North America' },\r\n        { id: 'europe', label: 'Europe' },\r\n        { id: 'asia_pacific', label: 'Asia Pacific' },\r\n        { id: 'latin_america', label: 'Latin America' },\r\n        { id: 'middle_east_africa', label: 'Middle East & Africa' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    paymentTerms: {\r\n      label: 'Payment Terms',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'net_30', label: 'Net 30' },\r\n        { id: 'net_60', label: 'Net 60' },\r\n        { id: 'net_90', label: 'Net 90' },\r\n        { id: 'upon_receipt', label: 'Upon Receipt' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    complianceStatus: {\r\n      label: 'Compliance Status',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'compliant', label: 'Compliant' },\r\n        { id: 'non_compliant', label: 'Non-compliant' },\r\n        { id: 'under_review', label: 'Under Review' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    notes: { label: 'Notes', type: 'text', multiline: true, rows: 4, faker: 'lorem.paragraph' },\r\n    vendorCode: { label: 'Vendor Code', type: 'text', faker: 'datatype.uuid' },\r\n    billingCycle: {\r\n      label: 'Billing Cycle',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'monthly', label: 'Monthly' },\r\n        { id: 'quarterly', label: 'Quarterly' },\r\n        { id: 'annually', label: 'Annually' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    sla: { label: 'Service Level Agreement (SLA)', type: 'text', faker: 'lorem.sentence' },\r\n    paymentMethod: {\r\n      label: 'Payment Method',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'bank_transfer', label: 'Bank Transfer' },\r\n        { id: 'credit_card', label: 'Credit Card' },\r\n        { id: 'paypal', label: 'PayPal' },\r\n        { id: 'crypto', label: 'Cryptocurrency' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    discountRate: { label: 'Discount Rate', type: 'number', faker: 'datatype.float' },\r\n    preferredCurrency: {\r\n      label: 'Preferred Currency',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'usd', label: 'USD' },\r\n        { id: 'eur', label: 'EUR' },\r\n        { id: 'gbp', label: 'GBP' },\r\n        { id: 'jpy', label: 'JPY' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    lastAuditDate: { label: 'Last Audit Date', type: 'date', faker: 'date.past' },\r\n    supportContact: { label: 'Support Contact', type: 'text', faker: 'name.fullName' },\r\n    supportEmail: { label: 'Support Email', type: 'email', faker: 'internet.email' },\r\n    supportPhone: { label: 'Support Phone', type: 'tel', faker: 'phone.imei' },\r\n    accountManager: { label: 'Account Manager', type: 'text', faker: 'name.fullName' },\r\n    partnerRating: {\r\n      label: 'Partner Rating',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'excellent', label: 'Excellent' },\r\n        { id: 'good', label: 'Good' },\r\n        { id: 'average', label: 'Average' },\r\n        { id: 'poor', label: 'Poor' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    partnershipStartDate: { label: 'Partnership Start Date', type: 'date', faker: 'date.past' },\r\n    partnershipEndDate: { label: 'Partnership End Date', type: 'date', faker: 'date.future' },\r\n    numberOfEmployees: { label: 'Number of Employees', type: 'number', faker: 'datatype.number' },\r\n    annualRevenue: { label: 'Annual Revenue', type: 'number', faker: 'finance.amount' },\r\n    partnershipLevel: {\r\n      label: 'Partnership Level',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'bronze', label: 'Bronze' },\r\n        { id: 'silver', label: 'Silver' },\r\n        { id: 'gold', label: 'Gold' },\r\n        { id: 'platinum', label: 'Platinum' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n    preferredLanguage: {\r\n      label: 'Preferred Language',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'english', label: 'English' },\r\n        { id: 'french', label: 'Français' },\r\n        { id: 'spanish', label: 'Español' },\r\n        { id: 'german', label: 'Deutsch' },\r\n      ],\r\n      multiple: false,\r\n      faker: 'random.arrayElement',\r\n    },\r\n    taxExemptionStatus: {\r\n      label: 'Tax Exemption Status',\r\n      type: 'select',\r\n      options: [\r\n        { id: 'exempt', label: 'Exempt' },\r\n        { id: 'non_exempt', label: 'Non-Exempt' },\r\n      ],\r\n      faker: 'random.arrayElement',\r\n    },\r\n  };\r\n  // Generate head cells dynamically from the config object\r\n  export const headCells = Object.keys(fieldsConfig).map(key => ({\r\n    id: key,\r\n    label: fieldsConfig[key].label,\r\n  }));\r\n  \r\n  export const entityName = 'Partners';\r\n  \r\n  export async function fetchItems() {\r\n    return await fetchDocuments(organizationId, 'partners');\r\n  }\r\n  \r\n  export async function fetchItemsBySelectValue(selectMenu, value) {\r\n    return await fetchDocumentsBySelectValue(organizationId, 'partners', selectMenu, value);\r\n  }\r\n  \r\n  export const addItem = (item) => addDocument(organizationId, 'partners', item);\r\n  export const updateItem = (id, item) => updateDocument(organizationId, 'partners', id, item);\r\n  export const deleteItem = (id) => deleteDocument(organizationId, 'partners', id);\r\n  ","import { db } from './firebaseConfig'; // Assuming you have a Firebase config file\r\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query, where } from 'firebase/firestore';\r\n\r\n// Function to fetch documents specific to an organization from a subcollection\r\nexport const fetchDocuments = async (organizationId, subcollectionName) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const snapshot = await getDocs(subcollectionRef);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${subcollectionName}:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to add a new document linked to an organization in a subcollection\r\nexport const addDocument = async (organizationId, subcollectionName, documentData) => {\r\n  try {\r\n    documentData.organizationId = organizationId;\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, subcollectionName);\r\n    const docRef = await addDoc(subcollectionRef, documentData);\r\n    return docRef.id; // Return the ID of the newly created document\r\n  } catch (error) {\r\n    console.error(`Error adding document to ${subcollectionName}:`, error);\r\n    throw new Error(`Could not add document to ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to update an existing document in a subcollection\r\nexport const updateDocument = async (organizationId, subcollectionName, documentId, documentData) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await updateDoc(docRef, documentData);\r\n  } catch (error) {\r\n    console.error(`Error updating document in ${subcollectionName}:`, error);\r\n    throw new Error(`Could not update document in ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n// Function to delete a document from a subcollection\r\nexport const deleteDocument = async (organizationId, subcollectionName, documentId) => {\r\n  try {\r\n    const docRef = doc(db, 'organizations', organizationId, subcollectionName, documentId);\r\n    await deleteDoc(docRef);\r\n  } catch (error) {\r\n    console.error(`Error deleting document from ${subcollectionName}:`, error);\r\n    throw new Error(`Could not delete document from ${subcollectionName}`);\r\n  }\r\n};\r\n\r\n\r\nexport const fetchDocumentsBySelectValue = async (organizationId, relativeCollection, foreignKey, foreignValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(foreignKey, 'array-contains', foreignValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport const fetchDocumentsByFieldValue = async (organizationId, relativeCollection, fieldName, fieldValue) => {\r\n  try {\r\n    const subcollectionRef = collection(db, 'organizations', organizationId, relativeCollection);\r\n    \r\n    // Create a query against the collection\r\n    const q = query(subcollectionRef, where(fieldName, '==', fieldValue));\r\n    \r\n    // Execute the query and get the documents\r\n    const snapshot = await getDocs(q);\r\n    const documentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    return documentsList;\r\n  } catch (error) {\r\n    console.error(`Error fetching documents from ${relativeCollection}:`, error);\r\n    return [];\r\n  }\r\n}"],"names":["organizationId","JSON","parse","localStorage","getItem","fieldsConfig","name","label","type","faker","service","options","id","partnerType","contactName","contactEmail","contactPhone","address","website","servicesProvided","multiple","industry","agreementDate","contractValue","startDate","endDate","renewalDate","riskLevel","region","paymentTerms","complianceStatus","notes","multiline","rows","vendorCode","billingCycle","sla","paymentMethod","discountRate","preferredCurrency","lastAuditDate","supportContact","supportEmail","supportPhone","accountManager","partnerRating","partnershipStartDate","partnershipEndDate","numberOfEmployees","annualRevenue","partnershipLevel","preferredLanguage","taxExemptionStatus","headCells","Object","keys","map","key","entityName","async","fetchItems","fetchDocuments","fetchItemsBySelectValue","selectMenu","value","fetchDocumentsBySelectValue","addItem","item","addDocument","updateItem","updateDocument","deleteItem","deleteDocument","subcollectionName","subcollectionRef","collection","db","snapshot","getDocs","docs","doc","data","error","console","documentData","addDoc","Error","documentId","docRef","updateDoc","deleteDoc","relativeCollection","foreignKey","foreignValue","q","query","where","fetchDocumentsByFieldValue","fieldName","fieldValue"],"sourceRoot":""}