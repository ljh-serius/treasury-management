{"version":3,"file":"static/js/14737.9894e74a.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/BankAccounts/ReconciliationStatements.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function ReconciliationStatementsDashboard({ fetchItems }) {\r\n  const [statementsData, setStatementsData] = useState([]);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [balanceByCurrency, setBalanceByCurrency] = useState([]);\r\n  const [statementsOverTimeData, setStatementsOverTimeData] = useState([]);\r\n  const [averageBalanceByStatus, setAverageBalanceByStatus] = useState([]);\r\n  const [tagsDistribution, setTagsDistribution] = useState([]);\r\n  const [totalStatements, setTotalStatements] = useState(0);\r\n  const [totalBalance, setTotalBalance] = useState(0);\r\n  const [averageBalance, setAverageBalance] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setStatementsData(data);\r\n      processStatementsData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processStatementsData = (data) => {\r\n    // Total Number of Reconciliation Statements\r\n    setTotalStatements(data.length);\r\n\r\n    // Total Balance\r\n    const totalBalance = data.reduce((acc, statement) => acc + Number(statement.balance), 0);\r\n    setTotalBalance(totalBalance);\r\n\r\n    // Average Balance\r\n    setAverageBalance(totalBalance / data.length);\r\n\r\n    // Reconciliation Status Distribution\r\n    const statusCounts = data.reduce((acc, statement) => {\r\n      acc[statement.status] = (acc[statement.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),  // Capitalize status\r\n      y: statusCounts[key],\r\n    })));\r\n\r\n    // Total Balance by Currency\r\n    const balanceByCurrency = data.reduce((acc, statement) => {\r\n      acc[statement.currency] = (acc[statement.currency] || 0) + Number(statement.balance);\r\n      return acc;\r\n    }, {});\r\n\r\n    setBalanceByCurrency(Object.keys(balanceByCurrency).map(key => ({\r\n      name: key,\r\n      y: balanceByCurrency[key],\r\n    })));\r\n\r\n    // Reconciliation Statements Over Time\r\n    const statementsByMonth = data.reduce((acc, statement) => {\r\n      const month = new Date(statement.reconciliationDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setStatementsOverTimeData(Object.keys(statementsByMonth).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: statementsByMonth[key],\r\n    })));\r\n\r\n    // Average Balance by Status\r\n    const balanceByStatus = data.reduce((acc, statement) => {\r\n      acc[statement.status] = acc[statement.status] || { totalBalance: 0, count: 0 };\r\n      acc[statement.status].totalBalance += Number(statement.balance);\r\n      acc[statement.status].count += 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setAverageBalanceByStatus(Object.keys(balanceByStatus).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: balanceByStatus[key].totalBalance / balanceByStatus[key].count || 0,\r\n    })));\r\n\r\n    // Tags Distribution\r\n    const tagsCounts = data.reduce((acc, statement) => {\r\n      statement.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagsDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const statusChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Reconciliation Status Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Status',\r\n        colorByPoint: true,\r\n        data: statusDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const balanceByCurrencyChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Total Balance by Currency',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Balance',\r\n        data: balanceByCurrency,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const statementsOverTimeChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Reconciliation Statements Over Time',\r\n    },\r\n    xAxis: {\r\n      categories: statementsOverTimeData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Statements',\r\n        data: statementsOverTimeData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const averageBalanceByStatusChartOptions = {\r\n    chart: {\r\n      type: 'bar',\r\n    },\r\n    title: {\r\n      text: 'Average Balance by Status',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Average Balance',\r\n        data: averageBalanceByStatus,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const tagsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Tags Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Tags',\r\n        data: tagsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Reconciliation Statements Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Statements</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalStatements}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Balance</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalBalance.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Balance</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  ${averageBalance.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={balanceByCurrencyChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statementsOverTimeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={averageBalanceByStatusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ReconciliationStatementsDashboard","_ref","fetchItems","statementsData","setStatementsData","useState","statusDistribution","setStatusDistribution","balanceByCurrency","setBalanceByCurrency","statementsOverTimeData","setStatementsOverTimeData","averageBalanceByStatus","setAverageBalanceByStatus","tagsDistribution","setTagsDistribution","totalStatements","setTotalStatements","totalBalance","setTotalBalance","averageBalance","setAverageBalance","loading","setLoading","useEffect","async","data","processStatementsData","fetchData","length","reduce","acc","statement","Number","balance","statusCounts","status","Object","keys","map","key","name","charAt","toUpperCase","slice","y","currency","statementsByMonth","month","Date","reconciliationDate","getMonth","balanceByStatus","count","tagsCounts","tags","forEach","tag","statusChartOptions","chart","type","title","text","series","colorByPoint","balanceByCurrencyChartOptions","statementsOverTimeChartOptions","xAxis","categories","averageBalanceByStatusChartOptions","tagsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}