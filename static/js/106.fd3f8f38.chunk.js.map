{"version":3,"file":"static/js/106.fd3f8f38.chunk.js","mappings":"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","sources":["pages/Analysis/Projects.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, Backdrop, CircularProgress } from '@mui/material';\r\n\r\nexport default function ProjectAnalysisDashboard({ fetchItems }) {\r\n  const [projectsData, setProjectsData] = useState([]);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [progressData, setProgressData] = useState([]);\r\n  const [budgetDistribution, setBudgetDistribution] = useState([]);\r\n  const [monthlyTrendsData, setMonthlyTrendsData] = useState([]);\r\n  const [priorityDistribution, setPriorityDistribution] = useState([]);\r\n  const [totalBudget, setTotalBudget] = useState(0);\r\n  const [totalRevenue, setTotalRevenue] = useState(0);\r\n  const [averageProgress, setAverageProgress] = useState(0);\r\n  const [topProjects, setTopProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true); // Add loading state\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true); // Start loading\r\n      const data = await fetchItems();\r\n      if (data && data.length > 0) {\r\n        setProjectsData(data);\r\n        processProjectData(data);\r\n      } else {\r\n        console.log(\"No project data available.\");\r\n      }\r\n      setLoading(false); // Stop loading\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processProjectData = (data) => {\r\n    if (!data || data.length === 0) {\r\n      console.log(\"No data to process.\");\r\n      return;\r\n    }\r\n\r\n    // Status Distribution\r\n    const statusCounts = data.reduce((acc, project) => {\r\n      acc[project.status] = (acc[project.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key,\r\n      y: statusCounts[key],\r\n    })));\r\n\r\n    // Progress Data\r\n    const progressSum = data.reduce((acc, project) => acc + (Number(project.progress) || 0), 0);\r\n    const averageProgressValue = data.length ? progressSum / data.length : 0;\r\n    setAverageProgress(averageProgressValue);\r\n\r\n    setProgressData(data.map(project => ({\r\n      name: project.name,\r\n      y: Number(project.progress) || 0,\r\n    })));\r\n\r\n    // Budget Distribution\r\n    const budgetSum = data.reduce((acc, project) => acc + (Number(project.budget) || 0), 0);\r\n    setTotalBudget(budgetSum);\r\n\r\n    setBudgetDistribution(data.map(project => ({\r\n      name: project.name,\r\n      y: Number(project.budget) || 0,\r\n    })));\r\n\r\n    // Monthly Trends Data (Projects started each month)\r\n    const trendCounts = data.reduce((acc, project) => {\r\n      const month = new Date(project.startDate).getMonth() + 1;\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setMonthlyTrendsData(Object.keys(trendCounts).map(key => ({\r\n      name: `Month ${key}`,\r\n      y: trendCounts[key],\r\n    })));\r\n\r\n    // Priority Distribution\r\n    const priorityCounts = data.reduce((acc, project) => {\r\n      acc[project.priority] = (acc[project.priority] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setPriorityDistribution(Object.keys(priorityCounts).map(key => ({\r\n      name: key,\r\n      y: priorityCounts[key],\r\n    })));\r\n\r\n    // Total Revenue\r\n    const revenueSum = data.reduce((acc, project) => acc + (Number(project.revenueGenerated) || 0), 0);\r\n    setTotalRevenue(revenueSum);\r\n\r\n    // Top 5 Projects by Budget\r\n    const topProjectsList = data\r\n      .sort((a, b) => (Number(b.budget) || 0) - (Number(a.budget) || 0))\r\n      .slice(0, 5);\r\n    setTopProjects(topProjectsList);\r\n  };\r\n\r\n  const statusChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Project Status Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Projects',\r\n        colorByPoint: true,\r\n        data: statusDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const progressChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Project Progress (%)',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Progress',\r\n        data: progressData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const budgetChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Budget Allocation per Project',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Budget',\r\n        data: budgetDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const monthlyTrendsChartOptions = {\r\n    chart: {\r\n      type: 'line',\r\n    },\r\n    title: {\r\n      text: 'Monthly Project Start Trends',\r\n    },\r\n    xAxis: {\r\n      categories: monthlyTrendsData.map(data => data.name),\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Number of Projects',\r\n        data: monthlyTrendsData.map(data => data.y),\r\n      },\r\n    ],\r\n  };\r\n\r\n  const priorityChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Project Priority Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Projects',\r\n        colorByPoint: true,\r\n        data: priorityDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Project Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Budget</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${Number(totalBudget).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total budget allocated across all projects.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Revenue Generated</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${Number(totalRevenue).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This represents the total revenue generated by all projects.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Project Progress</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  {Number(averageProgress).toFixed(2)}%\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  This is the average progress of all ongoing projects.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Top 5 Projects by Budget</Typography>\r\n                <ol>\r\n                  {topProjects.map(project => (\r\n                    <li key={project.id}>\r\n                      <Typography variant=\"body2\">\r\n                        {project.name} - Budget: ${Number(project.budget).toFixed(2)}\r\n                      </Typography>\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={progressChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={budgetChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={monthlyTrendsChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={priorityChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ProjectAnalysisDashboard","_ref","fetchItems","projectsData","setProjectsData","useState","statusDistribution","setStatusDistribution","progressData","setProgressData","budgetDistribution","setBudgetDistribution","monthlyTrendsData","setMonthlyTrendsData","priorityDistribution","setPriorityDistribution","totalBudget","setTotalBudget","totalRevenue","setTotalRevenue","averageProgress","setAverageProgress","topProjects","setTopProjects","loading","setLoading","useEffect","async","data","length","processProjectData","console","log","fetchData","statusCounts","reduce","acc","project","status","Object","keys","map","key","name","y","progressSum","Number","progress","averageProgressValue","budgetSum","budget","trendCounts","month","Date","startDate","getMonth","priorityCounts","priority","revenueSum","revenueGenerated","topProjectsList","sort","a","b","slice","statusChartOptions","chart","type","title","text","series","colorByPoint","progressChartOptions","budgetChartOptions","monthlyTrendsChartOptions","xAxis","categories","priorityChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","id","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}