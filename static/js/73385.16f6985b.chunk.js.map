{"version":3,"file":"static/js/73385.16f6985b.chunk.js","mappings":"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","sources":["pages/Analysis/CorporateCommunication/ExternalCommunication/PressReleases.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst PressReleasesAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response || []); // Ensure data is an array\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // KPIs\r\n  const totalPressReleases = data.length;\r\n\r\n  // Distribution Channels Analysis\r\n  const channelsCount = data.reduce((acc, record) => {\r\n    if (Array.isArray(record.distributionChannels)) {\r\n      record.distributionChannels.forEach(channel => {\r\n        acc[channel] = (acc[channel] || 0) + 1;\r\n      });\r\n    } else {\r\n      acc[record.distributionChannels] = (acc[record.distributionChannels] || 0) + 1;\r\n    }\r\n    return acc;\r\n  }, {});\r\n\r\n  const channelsDistribution = Object.keys(channelsCount).map(channel => ({\r\n    name: channel.charAt(0).toUpperCase() + channel.slice(1).replace(/-/g, ' '),\r\n    y: channelsCount[channel],\r\n  }));\r\n\r\n  // Highcharts options for Distribution Channels\r\n  const distributionChannelsChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Distribution Channels' },\r\n    series: [{\r\n      name: 'Channels',\r\n      colorByPoint: true,\r\n      data: channelsDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for press release trends over time\r\n  const pressReleasesChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Press Releases Over Time' },\r\n    xAxis: {\r\n      categories: data.map(record => new Date(record.releaseDate).toLocaleDateString()),\r\n      title: { text: 'Release Date' },\r\n    },\r\n    yAxis: { title: { text: 'Number of Releases' } },\r\n    series: [{\r\n      name: 'Releases',\r\n      data: data.map(() => 1), // Each release counts as one\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Press Releases</Typography>\r\n          <Typography variant=\"h4\">{totalPressReleases}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={distributionChannelsChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={pressReleasesChartOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{record.title}:</Typography>\r\n              {Array.isArray(record.tags) ? record.tags.map((tag, tagIndex) => (\r\n                <Chip key={tagIndex} label={tag.label} style={{ margin: '5px' }} />\r\n              )) : 'No Tags'}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PressReleasesAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalPressReleases","length","channelsCount","reduce","acc","record","Array","isArray","distributionChannels","forEach","channel","distributionChannelsChartOptions","chart","type","title","text","series","name","colorByPoint","Object","keys","map","charAt","toUpperCase","slice","replace","y","pressReleasesChartOptions","xAxis","categories","Date","releaseDate","toLocaleDateString","yAxis","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","HighchartsReact","highcharts","Highcharts","options","index","tags","tag","tagIndex","Chip","label","style","margin"],"sourceRoot":""}