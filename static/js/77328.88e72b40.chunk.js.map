{"version":3,"file":"static/js/77328.88e72b40.chunk.js","mappings":"wTAOe,SAASA,EAAoBC,GAAkB,IAAjB,WAAEC,GAAYD,EACzD,MAAOE,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,KAClDG,EAAoBC,IAAyBJ,EAAAA,EAAAA,UAAS,IACtDK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAEvCO,EAAAA,EAAAA,YAAU,KACUC,WAChBF,GAAW,GACX,MAAMG,QAAaZ,IACnBE,EAAgBU,GAChBC,EAAoBD,GACpBH,GAAW,EAAM,EAGnBK,EAAW,GACV,CAACd,IAEJ,MAAMa,EAAuBD,IAE3B,MAAMG,EAAuBH,EAAKI,KAAIC,IAAI,CACxCC,SAAUC,OAAOF,EAAKG,gBACtBC,OAAQF,OAAOF,EAAKK,kBAGtBjB,EAAoBU,GAGpB,MAAMQ,EAAgBX,EAAKY,QAAO,CAACC,EAAKR,IAASQ,EAAMN,OAAOF,EAAKX,qBAAqB,GACxFC,EAAsBgB,EAAgBX,EAAKc,OAAO,EAG9CC,EAA+B,CACnCC,MAAO,CAAEC,KAAM,UACfC,MAAO,CAAEC,KAAM,8BACfC,OAAQ,CACN,CAAEC,KAAM,kBAAmBrB,KAAMR,EAAiBY,KAAIC,GAAQA,EAAKC,YACnE,CAAEe,KAAM,gBAAiBrB,KAAMR,EAAiBY,KAAIC,GAAQA,EAAKI,YAIrE,OACEa,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,WAAY,EAAGC,cAAe,GAAIC,SAAA,EAC/DC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACL,GAAI,CAAEM,MAAO,OAAQC,OAASC,GAAUA,EAAMD,OAAOE,OAAS,GAAKC,KAAMvC,EAAQgC,UACzFC,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,CAACL,MAAM,eAE1BT,EAAAA,EAAAA,MAACe,EAAAA,EAAG,CAACZ,GAAI,CAAEa,QAAS,GAAIV,SAAA,EACtBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAb,SAAC,2BACtCN,EAAAA,EAAAA,MAACoB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEhB,SAAA,EAEzBC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACrC,MAAI,EAACwC,GAAI,GAAGjB,UAChBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAAAlB,UACHN,EAAAA,EAAAA,MAACyB,EAAAA,EAAW,CAAAnB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,+BACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,QAAQN,GAAI,CAAEuB,WAAY,QAASpB,SAAA,CAC/DlC,EAAmBuD,QAAQ,GAAG,eAOvCpB,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACrC,MAAI,EAACwC,GAAI,GAAGjB,UAChBC,EAAAA,EAAAA,KAACqB,IAAe,CAACC,WAAYC,IAAYC,QAAStC,cAM9D,C","sources":["pages/Analysis/FinancialManagement/Budget/Forecasting.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function ForecastingAnalytics({ fetchItems }) {\r\n  const [forecastData, setForecastData] = useState([]);\r\n  const [forecastVsActual, setForecastVsActual] = useState([]);\r\n  const [accuracyPercentage, setAccuracyPercentage] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setForecastData(data);\r\n      processForecastData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processForecastData = (data) => {\r\n    // Forecast vs Actual\r\n    const forecastVsActualData = data.map(item => ({\r\n      forecast: Number(item.forecastAmount),\r\n      actual: Number(item.actualAmount),\r\n    }));\r\n\r\n    setForecastVsActual(forecastVsActualData);\r\n\r\n    // Average Accuracy Percentage\r\n    const totalAccuracy = data.reduce((sum, item) => sum + Number(item.accuracyPercentage), 0);\r\n    setAccuracyPercentage(totalAccuracy / data.length);\r\n  };\r\n\r\n  const forecastVsActualChartOptions = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'Forecast vs Actual Amounts' },\r\n    series: [\r\n      { name: 'Forecast Amount', data: forecastVsActual.map(item => item.forecast) },\r\n      { name: 'Actual Amount', data: forecastVsActual.map(item => item.actual) },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>Forecasting Analytics</Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Forecast Accuracy</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {accuracyPercentage.toFixed(2)}%\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={forecastVsActualChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ForecastingAnalytics","_ref","fetchItems","forecastData","setForecastData","useState","forecastVsActual","setForecastVsActual","accuracyPercentage","setAccuracyPercentage","loading","setLoading","useEffect","async","data","processForecastData","fetchData","forecastVsActualData","map","item","forecast","Number","forecastAmount","actual","actualAmount","totalAccuracy","reduce","sum","length","forecastVsActualChartOptions","chart","type","title","text","series","name","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}