{"version":3,"file":"static/js/27221.f6c20c91.chunk.js","mappings":"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","sources":["pages/Analysis/OperationsAssetManagement/Assets/AssetDepreciation.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function AssetDepreciationDashboard({ fetchItems }) {\r\n  const [assetData, setAssetData] = useState([]);\r\n  const [totalAssets, setTotalAssets] = useState(0);\r\n  const [totalDepreciation, setTotalDepreciation] = useState(0);\r\n  const [currentAssetValue, setCurrentAssetValue] = useState(0);\r\n  const [activeAssets, setActiveAssets] = useState(0);\r\n  const [depreciationTrends, setDepreciationTrends] = useState([]);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setAssetData(data);\r\n      processAssetData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchItems]);\r\n\r\n  const processAssetData = (data) => {\r\n    // Total Assets\r\n    setTotalAssets(data.length);\r\n\r\n    // Total Depreciation and Current Value\r\n    const totalDepreciationValue = data.reduce((acc, asset) => acc + (Number(asset.purchasePrice) - Number(asset.currentValue)), 0);\r\n    setTotalDepreciation(totalDepreciationValue);\r\n    const totalCurrentValue = data.reduce((acc, asset) => acc + Number(asset.currentValue), 0);\r\n    setCurrentAssetValue(totalCurrentValue);\r\n\r\n    // Count Active Assets\r\n    const active = data.filter(asset => asset.status === 'active').length;\r\n    setActiveAssets(active);\r\n\r\n    // Depreciation Trends for Line Chart\r\n    const trendData = data.map(asset => ({\r\n      date: new Date(asset.lastModifiedDate).getTime(),\r\n      value: Number(asset.currentValue),\r\n    })).sort((a, b) => a.date - b.date);\r\n    setDepreciationTrends(trendData);\r\n\r\n    // Status Distribution for Pie Chart\r\n    const statusCounts = data.reduce((acc, asset) => {\r\n      acc[asset.status] = (acc[asset.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: statusCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Highcharts options for Depreciation Trends\r\n  const depreciationChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Asset Depreciation Trends' },\r\n    xAxis: { type: 'datetime', title: { text: 'Date' } },\r\n    yAxis: { title: { text: 'Current Value' } },\r\n    series: [{\r\n      name: 'Current Value',\r\n      data: depreciationTrends.map(item => [item.date, item.value]),\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Status Distribution\r\n  const statusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Asset Status Distribution' },\r\n    series: [{\r\n      name: 'Assets',\r\n      colorByPoint: true,\r\n      data: statusDistribution,\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Assets Depreciation Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Assets</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalAssets}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Depreciation</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalDepreciation.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Current Asset Value</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${currentAssetValue.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Active Assets</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {activeAssets}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Depreciation Trends Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={depreciationChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Status Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["AssetDepreciationDashboard","_ref","fetchItems","assetData","setAssetData","useState","totalAssets","setTotalAssets","totalDepreciation","setTotalDepreciation","currentAssetValue","setCurrentAssetValue","activeAssets","setActiveAssets","depreciationTrends","setDepreciationTrends","statusDistribution","setStatusDistribution","loading","setLoading","useEffect","async","data","processAssetData","fetchDataAsync","length","totalDepreciationValue","reduce","acc","asset","Number","purchasePrice","currentValue","totalCurrentValue","active","filter","status","trendData","map","date","Date","lastModifiedDate","getTime","value","sort","a","b","statusCounts","Object","keys","key","name","charAt","toUpperCase","slice","y","depreciationChartOptions","chart","type","title","text","xAxis","yAxis","series","item","statusChartOptions","colorByPoint","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}