{"version":3,"file":"static/js/25526.46c8ca84.chunk.js","mappings":"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","sources":["pages/Analysis/LogisticsSupplyChain/LogisticsPartners/CostAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function CostAnalysisDashboard({ fetchItems }) {\r\n  const [costData, setCostData] = useState([]);\r\n  const [totalCost, setTotalCost] = useState(0);\r\n  const [costBreakdown, setCostBreakdown] = useState('');\r\n  const [costTrends, setCostTrends] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setCostData(data);\r\n      processCostData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processCostData = (data) => {\r\n    // Total Cost\r\n    const total = data.reduce((acc, item) => acc + parseFloat(item.totalCost), 0);\r\n    setTotalCost(total);\r\n  \r\n    // Cost Breakdown (latest analysis)\r\n    if (data.length > 0) {\r\n      setCostBreakdown(data[data.length - 1].costBreakdown);\r\n    }\r\n  \r\n    // Cost Trends for Line Chart\r\n    const trendsData = data.map(item => ({\r\n      date: new Date(item.analysisDate).getTime(), // Ensure date is a timestamp\r\n      cost: parseFloat(item.totalCost), // Ensure cost is a number\r\n    })).sort((a, b) => a.date - b.date);\r\n    setCostTrends(trendsData);\r\n  };\r\n  \r\n  // Highcharts options for Cost Trends\r\n  const costChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Cost Trends Over Time' },\r\n    xAxis: { type: 'datetime', title: { text: 'Analysis Date' } },\r\n    yAxis: { title: { text: 'Total Cost' } },\r\n    series: [{\r\n      name: 'Total Cost',\r\n      data: costTrends.map(item => [item.date, item.cost]), // Properly formatted date and cost\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Cost Analysis Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Cost</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalCost.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Cost Breakdown */}\r\n          <Grid item xs={12} md={12}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Cost Breakdown (Latest)</Typography>\r\n                <Typography variant=\"body1\">{costBreakdown}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Cost Trends Chart */}\r\n          <Grid item xs={12} md={12} sx={{ marginTop: 4 }}>\r\n            <HighchartsReact highcharts={Highcharts} options={costChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["CostAnalysisDashboard","_ref","fetchItems","costData","setCostData","useState","totalCost","setTotalCost","costBreakdown","setCostBreakdown","costTrends","setCostTrends","loading","setLoading","useEffect","async","data","processCostData","fetchData","total","reduce","acc","item","parseFloat","length","trendsData","map","date","Date","analysisDate","getTime","cost","sort","a","b","costChartOptions","chart","type","title","text","xAxis","yAxis","series","name","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}