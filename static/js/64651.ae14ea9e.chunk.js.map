{"version":3,"file":"static/js/64651.ae14ea9e.chunk.js","mappings":"4QAKA,MAoFA,EApFiCA,IAAqB,IAApB,WAAEC,GAAYD,EAC9C,MAAOE,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GAWvC,IATAG,EAAAA,EAAAA,YAAU,MACRC,iBACE,MAAMC,QAAiBR,IACvBE,EAAQM,GACRH,GAAW,EACb,CACAI,EAAW,GACV,CAACT,IAEAI,EAAS,OAAOM,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAC,SAAC,eAGhC,MAAMC,EAAeZ,EAAKa,OACpBC,GACJd,EAAKe,QAAO,CAACC,EAAKC,IAAWD,EAAME,SAASD,EAAOE,kBAAmB,KAAK,GAAKP,GAChFQ,QAAQ,GAGJC,EAA2B,CAC/BC,MAAO,CAAEC,KAAM,UACfC,MAAO,CAAEC,KAAM,mCACfC,MAAO,CACLC,WAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KACjCH,MAAO,CAAEC,KAAM,UAEjBG,MAAO,CACLC,IAAK,EACLL,MAAO,CAAEC,KAAM,wBAEjBK,OAAQ,CACN,CACEC,KAAM,YACN/B,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGgC,KACnBC,GAAUjC,EAAKkC,QAAQjB,GAAWA,EAAOE,oBAAsBgB,OAAOF,KAAQpB,YAMvF,OACEuB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE5B,SAAA,EAEzBF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE/B,UACvByB,EAAAA,EAAAA,MAACO,EAAAA,EAAI,CAAAhC,SAAA,EACHF,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACkC,QAAQ,KAAKC,cAAY,EAAAlC,SAAC,mBACtCF,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACkC,QAAQ,KAAIjC,SAAEC,UAG9BH,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE/B,UACvByB,EAAAA,EAAAA,MAACO,EAAAA,EAAI,CAAAhC,SAAA,EACHF,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACkC,QAAQ,KAAKC,cAAY,EAAAlC,SAAC,gCACtCF,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACkC,QAAQ,KAAIjC,SAAEG,UAK9BL,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAG9B,UAChBF,EAAAA,EAAAA,KAACkC,EAAAA,EAAI,CAAAhC,UACHF,EAAAA,EAAAA,KAACqC,IAAe,CAACC,WAAYC,IAAYC,QAAS5B,SAKtDZ,EAAAA,EAAAA,KAAC4B,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAG9B,UAChByB,EAAAA,EAAAA,MAACO,EAAAA,EAAI,CAAAhC,SAAA,EACHF,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACkC,QAAQ,KAAKC,cAAY,EAAAlC,SAAC,SACrCX,EAAKgC,KAAI,CAACf,EAAQiC,KACjBd,EAAAA,EAAAA,MAAA,OAAAzB,SAAA,EACEF,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACkC,QAAQ,YAAWjC,SAAE,UAAUuC,EAAQ,OAClDjC,EAAOkC,KAAKnB,KAAKoB,IAChB3C,EAAAA,EAAAA,KAAC4C,EAAAA,EAAI,CAAcC,MAAOF,EAAIE,MAAOC,MAAO,CAAEC,OAAQ,QAA3CJ,EAAIK,QAHTP,YASX,C","sources":["pages/Analysis/CustomerSupport/Feedback/CustomerSurveys.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Card, Grid, Typography, Chip } from '@mui/material';\r\n\r\nconst CustomerSurveysAnalytics = ({ fetchItems }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await fetchItems();\r\n      setData(response);\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n\r\n  // Calculate KPIs\r\n  const totalSurveys = data.length;\r\n  const averageSatisfactionScore = (\r\n    data.reduce((sum, record) => sum + parseInt(record.satisfactionScore, 10), 0) / totalSurveys\r\n  ).toFixed(2);\r\n\r\n  // Highcharts options for satisfaction score distribution\r\n  const satisfactionScoreOptions = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'Satisfaction Score Distribution' },\r\n    xAxis: {\r\n      categories: ['1', '2', '3', '4', '5'],\r\n      title: { text: 'Score' },\r\n    },\r\n    yAxis: {\r\n      min: 0,\r\n      title: { text: 'Number of Responses' },\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Responses',\r\n        data: [1, 2, 3, 4, 5].map(\r\n          (score) => data.filter((record) => record.satisfactionScore === String(score)).length\r\n        ),\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={4}>\r\n      {/* KPI Cards */}\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Total Surveys</Typography>\r\n          <Typography variant=\"h4\">{totalSurveys}</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={12} md={4}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Average Satisfaction Score</Typography>\r\n          <Typography variant=\"h4\">{averageSatisfactionScore}</Typography>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Highcharts */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <HighchartsReact highcharts={Highcharts} options={satisfactionScoreOptions} />\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Tags */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n          {data.map((record, index) => (\r\n            <div key={index}>\r\n              <Typography variant=\"subtitle1\">{`Survey ${index + 1}:`}</Typography>\r\n              {record.tags.map((tag) => (\r\n                <Chip key={tag.id} label={tag.label} style={{ margin: '5px' }} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CustomerSurveysAnalytics;\r\n"],"names":["_ref","fetchItems","data","setData","useState","loading","setLoading","useEffect","async","response","fetchData","_jsx","Typography","children","totalSurveys","length","averageSatisfactionScore","reduce","sum","record","parseInt","satisfactionScore","toFixed","satisfactionScoreOptions","chart","type","title","text","xAxis","categories","yAxis","min","series","name","map","score","filter","String","_jsxs","Grid","container","spacing","item","xs","md","Card","variant","gutterBottom","HighchartsReact","highcharts","Highcharts","options","index","tags","tag","Chip","label","style","margin","id"],"sourceRoot":""}