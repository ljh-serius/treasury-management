{"version":3,"file":"static/js/22314.6ad68de8.chunk.js","mappings":"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","sources":["pages/Analysis/FinancialManagement/GeneralLedger/ChartOfAccounts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function ChartOfAccountsDashboard({ fetchItems }) {\r\n  const [accountsData, setAccountsData] = useState([]);\r\n  const [accountTypeDistribution, setAccountTypeDistribution] = useState([]);\r\n  const [balanceByAccountType, setBalanceByAccountType] = useState([]);\r\n  const [currencyDistribution, setCurrencyDistribution] = useState([]);\r\n  const [averageBalanceByAccountType, setAverageBalanceByAccountType] = useState([]);\r\n  const [tagsDistribution, setTagsDistribution] = useState([]);\r\n  const [totalAccounts, setTotalAccounts] = useState(0);\r\n  const [totalBalance, setTotalBalance] = useState(0);\r\n  const [averageAccountBalance, setAverageAccountBalance] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setAccountsData(data);\r\n      processAccountsData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processAccountsData = (data) => {\r\n    // Total Number of Accounts\r\n    setTotalAccounts(data.length);\r\n\r\n    // Total Balance\r\n    const totalBalance = data.reduce((acc, account) => acc + Number(account.balance), 0);\r\n    setTotalBalance(totalBalance);\r\n\r\n    // Average Account Balance\r\n    setAverageAccountBalance(totalBalance / data.length);\r\n\r\n    // Accounts by Type\r\n    const accountTypeCounts = data.reduce((acc, account) => {\r\n      acc[account.accountType] = (acc[account.accountType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setAccountTypeDistribution(Object.keys(accountTypeCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),  // Capitalize account type\r\n      y: accountTypeCounts[key],\r\n    })));\r\n\r\n    // Total Balance by Account Type\r\n    const balanceByType = data.reduce((acc, account) => {\r\n      acc[account.accountType] = (acc[account.accountType] || 0) + Number(account.balance);\r\n      return acc;\r\n    }, {});\r\n\r\n    setBalanceByAccountType(Object.keys(balanceByType).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),  // Capitalize account type\r\n      y: balanceByType[key],\r\n    })));\r\n\r\n    // Average Balance by Account Type\r\n    const accountCounts = Object.values(accountTypeCounts);\r\n    setAverageBalanceByAccountType(Object.keys(balanceByType).map((key, index) => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: balanceByType[key] / accountCounts[index],\r\n    })));\r\n\r\n    // Accounts by Currency\r\n    const currencyCounts = data.reduce((acc, account) => {\r\n      acc[account.currency] = (acc[account.currency] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setCurrencyDistribution(Object.keys(currencyCounts).map(key => ({\r\n      name: key,\r\n      y: currencyCounts[key],\r\n    })));\r\n\r\n    // Tags Distribution\r\n    const tagsCounts = data.reduce((acc, account) => {\r\n      account.tags.forEach(tag => {\r\n        acc[tag] = (acc[tag] || 0) + 1;\r\n      });\r\n      return acc;\r\n    }, {});\r\n\r\n    setTagsDistribution(Object.keys(tagsCounts).map(key => ({\r\n      name: key,\r\n      y: tagsCounts[key],\r\n    })));\r\n  };\r\n\r\n  // Chart options for each chart\r\n  const accountTypeChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Accounts by Type',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Account Types',\r\n        colorByPoint: true,\r\n        data: accountTypeDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const balanceByAccountTypeChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Total Balance by Account Type',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Total Balance',\r\n        data: balanceByAccountType,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const currencyChartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    title: {\r\n      text: 'Accounts by Currency',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Currencies',\r\n        colorByPoint: true,\r\n        data: currencyDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const averageBalanceByAccountTypeChartOptions = {\r\n    chart: {\r\n      type: 'bar',\r\n    },\r\n    title: {\r\n      text: 'Average Balance by Account Type',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Average Balance',\r\n        data: averageBalanceByAccountType,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const tagsChartOptions = {\r\n    chart: {\r\n      type: 'column',\r\n    },\r\n    title: {\r\n      text: 'Tags Distribution',\r\n    },\r\n    series: [\r\n      {\r\n        name: 'Tags',\r\n        data: tagsDistribution,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Chart Of Accounts Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Accounts</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {totalAccounts}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Balance</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalBalance.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Average Account Balance</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  ${averageAccountBalance.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={accountTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={balanceByAccountTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={currencyChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={averageBalanceByAccountTypeChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <HighchartsReact highcharts={Highcharts} options={tagsChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ChartOfAccountsDashboard","_ref","fetchItems","accountsData","setAccountsData","useState","accountTypeDistribution","setAccountTypeDistribution","balanceByAccountType","setBalanceByAccountType","currencyDistribution","setCurrencyDistribution","averageBalanceByAccountType","setAverageBalanceByAccountType","tagsDistribution","setTagsDistribution","totalAccounts","setTotalAccounts","totalBalance","setTotalBalance","averageAccountBalance","setAverageAccountBalance","loading","setLoading","useEffect","async","data","processAccountsData","fetchData","length","reduce","acc","account","Number","balance","accountTypeCounts","accountType","Object","keys","map","key","name","charAt","toUpperCase","slice","y","balanceByType","accountCounts","values","index","currencyCounts","currency","tagsCounts","tags","forEach","tag","accountTypeChartOptions","chart","type","title","text","series","colorByPoint","balanceByAccountTypeChartOptions","currencyChartOptions","averageBalanceByAccountTypeChartOptions","tagsChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}