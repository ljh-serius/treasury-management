{"version":3,"file":"static/js/31552.365c67ad.chunk.js","mappings":"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","sources":["pages/Analysis/RealEstatePropertyManagement/FacilitiesManagement/FacilityMaintenance.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container, CircularProgress, Backdrop } from '@mui/material';\r\n\r\nexport default function FacilityMaintenanceDashboard({ fetchItems }) {\r\n  const [maintenanceData, setMaintenanceData] = useState([]);\r\n  const [totalMaintenanceCost, setTotalMaintenanceCost] = useState(0);\r\n  const [upcomingMaintenance, setUpcomingMaintenance] = useState(0);\r\n  const [maintenanceTypeDistribution, setMaintenanceTypeDistribution] = useState([]);\r\n  const [completionTimeline, setCompletionTimeline] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAsync = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setMaintenanceData(data);\r\n      processMaintenanceData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchDataAsync();\r\n  }, [fetchItems]);\r\n\r\n  const processMaintenanceData = (data) => {\r\n    // Total Maintenance Cost\r\n    const totalCost = data.reduce((acc, maintenance) => acc + Number(maintenance.cost), 0);\r\n    setTotalMaintenanceCost(totalCost);\r\n\r\n    // Count Upcoming Maintenance\r\n    const upcoming = data.filter(maintenance => new Date(maintenance.scheduledDate) > new Date()).length;\r\n    setUpcomingMaintenance(upcoming);\r\n\r\n    // Maintenance Type Distribution for Pie Chart\r\n    const typeCounts = data.reduce((acc, maintenance) => {\r\n      acc[maintenance.maintenanceType] = (acc[maintenance.maintenanceType] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    setMaintenanceTypeDistribution(Object.keys(typeCounts).map(key => ({\r\n      name: key.charAt(0).toUpperCase() + key.slice(1),\r\n      y: typeCounts[key],\r\n    })));\r\n\r\n    // Completion Timeline for Line Chart\r\n    const timeline = data.map(maintenance => ({\r\n      scheduled: new Date(maintenance.scheduledDate).getTime(),\r\n      completed: new Date(maintenance.completionDate).getTime(),\r\n      name: maintenance.maintenanceType,\r\n    })).sort((a, b) => a.scheduled - b.scheduled);\r\n    setCompletionTimeline(timeline);\r\n  };\r\n\r\n  // Highcharts options for Maintenance Type Distribution\r\n  const maintenanceTypeChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Maintenance Type Distribution' },\r\n    series: [{\r\n      name: 'Type',\r\n      colorByPoint: true,\r\n      data: maintenanceTypeDistribution,\r\n    }],\r\n  };\r\n\r\n  // Highcharts options for Completion Timeline\r\n  const completionTimelineChartOptions = {\r\n    chart: { type: 'line' },\r\n    title: { text: 'Maintenance Completion Timeline' },\r\n    xAxis: { type: 'datetime', title: { text: 'Scheduled Date' } },\r\n    yAxis: { title: { text: 'Completion Date' } },\r\n    series: [{\r\n      name: 'Maintenance Timeline',\r\n      data: completionTimeline.map(item => [item.scheduled, item.completed]),\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Facility Maintenance Dashboard\r\n        </Typography>\r\n\r\n        <Grid container spacing={4}>\r\n          {/* KPIs Section */}\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Maintenance Cost</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalMaintenanceCost.toFixed(2)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Upcoming Maintenance</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  {upcomingMaintenance}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} sx={{ marginTop: 4 }}>\r\n          {/* Maintenance Type Distribution Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={maintenanceTypeChartOptions} />\r\n          </Grid>\r\n\r\n          {/* Completion Timeline Chart */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={completionTimelineChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["FacilityMaintenanceDashboard","_ref","fetchItems","maintenanceData","setMaintenanceData","useState","totalMaintenanceCost","setTotalMaintenanceCost","upcomingMaintenance","setUpcomingMaintenance","maintenanceTypeDistribution","setMaintenanceTypeDistribution","completionTimeline","setCompletionTimeline","loading","setLoading","useEffect","async","data","processMaintenanceData","fetchDataAsync","totalCost","reduce","acc","maintenance","Number","cost","upcoming","filter","Date","scheduledDate","length","typeCounts","maintenanceType","Object","keys","map","key","name","charAt","toUpperCase","slice","y","timeline","scheduled","getTime","completed","completionDate","sort","a","b","maintenanceTypeChartOptions","chart","type","title","text","series","colorByPoint","completionTimelineChartOptions","xAxis","yAxis","item","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","xs","md","Card","CardContent","fontWeight","toFixed","marginTop","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}