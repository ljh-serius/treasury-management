{"version":3,"file":"static/js/77328.0b96bf6c.chunk.js","mappings":"wTAOe,SAASA,EAA4BC,GAAkB,IAAjB,WAAEC,GAAYD,EACjE,MAAOE,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,KACtDG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,KAC1CK,EAAqBC,IAA0BN,EAAAA,EAAAA,UAAS,IACxDO,EAAmBC,IAAwBR,EAAAA,EAAAA,UAAS,IACpDS,EAAoBC,IAAyBV,EAAAA,EAAAA,UAAS,IACtDW,EAAsBC,IAA2BZ,EAAAA,EAAAA,UAAS,IAC1Da,EAASC,IAAcd,EAAAA,EAAAA,WAAS,IAEvCe,EAAAA,EAAAA,YAAU,KACUC,WAChBF,GAAW,GACX,MAAMG,QAAapB,IACnBE,EAAgBkB,GAChBC,EAAoBD,GACpBH,GAAW,EAAM,EAGnBK,EAAW,GACV,CAACtB,IAEJ,MAAMqB,EAAuBD,IAE3B,MAAMG,EAAeH,EAAKI,QAAO,CAACC,EAAKC,KACrCD,EAAIC,EAASC,SAAWF,EAAIC,EAASC,SAAW,GAAK,EAC9CF,IACN,CAAC,GAEJpB,EAAsBuB,OAAOC,KAAKN,GAAcO,KAAIC,IAAG,CACrDC,KAAMD,EACNE,EAAGV,EAAaQ,QAIlB,MAAMG,EAAiBd,EAAKI,QAAO,CAACC,EAAKC,KACvC,MAAMS,EAAWC,OAAOV,EAASW,cAAgBD,OAAOV,EAASY,gBAEjE,OADAb,EAAIU,IAAaV,EAAIU,IAAa,GAAK,EAChCV,CAAG,GACT,CAAC,GAEJlB,EAAgBqB,OAAOC,KAAKK,GAAgBJ,KAAIC,IAAG,CACjDC,KAAM,aAAaD,IACnBE,EAAGC,EAAeH,QAIpB,MAAMQ,EAASnB,EAAKI,QAClB,CAACC,EAAKC,KACJD,EAAIa,gBAAkBF,OAAOV,EAASY,iBAAmB,EACzDb,EAAIY,cAAgBD,OAAOV,EAASW,eAAiB,EACrDZ,EAAIe,iBAAmBJ,OAAOV,EAASc,kBAAoB,EAC3Df,EAAIgB,UAAYL,OAAOV,EAASd,qBAAuB,EAChDa,IAET,CAAEa,eAAgB,EAAGD,aAAc,EAAGG,gBAAiB,EAAGC,SAAU,IAGtEhC,EAAuB8B,EAAOD,gBAC9B3B,EAAqB4B,EAAOF,cAC5BxB,EAAsB0B,EAAOE,SAAWrB,EAAKsB,QAC7C3B,EAAwBwB,EAAOC,gBAAgB,EAG3CG,EAAqB,CACzBC,MAAO,CAAEC,KAAM,OACfC,MAAO,CAAEC,KAAM,uBACfC,OAAQ,CAAC,CAAEhB,KAAM,SAAUiB,cAAc,EAAM7B,KAAMhB,KAGjD8C,EAAuB,CAC3BN,MAAO,CAAEC,KAAM,UACfC,MAAO,CAAEC,KAAM,+BACfC,OAAQ,CAAC,CAAEhB,KAAM,WAAYZ,KAAMd,KAGrC,OACE6C,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,WAAY,EAAGC,cAAe,GAAIC,SAAA,EAC/DC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACL,GAAI,CAAEM,MAAO,OAAQC,OAASC,GAAUA,EAAMD,OAAOE,OAAS,GAAKC,KAAMhD,EAAQyC,UACzFC,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,CAACL,MAAM,eAE1BT,EAAAA,EAAAA,MAACe,EAAAA,EAAG,CAACZ,GAAI,CAAEa,QAAS,GAAIV,SAAA,EACtBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,EAAAb,SAAC,oCAGtCN,EAAAA,EAAAA,MAACoB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEhB,SAAA,EAEzBC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,2BACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,QAAQN,GAAI,CAAEyB,WAAY,QAAStB,SAAA,CAAC,IAC/DjD,EAAoBwE,QAAQ,OAEhCtB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,QAAOZ,SAAC,4DAIlCC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,yBACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,OAAON,GAAI,CAAEyB,WAAY,QAAStB,SAAA,CAAC,IAC9D/C,EAAkBsE,QAAQ,OAE9BtB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,QAAOZ,SAAC,8DAIlCC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,yBACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,SAASN,GAAI,CAAEyB,WAAY,QAAStB,SAAA,CAChE7C,EAAmBoE,QAAQ,GAAG,QAEjCtB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,QAAOZ,SAAC,8DAIlCC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,CAAApB,UACHN,EAAAA,EAAAA,MAAC2B,EAAAA,EAAW,CAAArB,SAAA,EACVC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,KAAIZ,SAAC,sBACzBN,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACC,QAAQ,KAAKT,MAAM,SAASN,GAAI,CAAEyB,WAAY,QAAStB,SAAA,CAAC,IAChE3C,EAAqBkE,QAAQ,OAEjCtB,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,QAAQ,QAAOZ,SAAC,2DAMlCC,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACuB,IAAe,CAACC,WAAYC,IAAYC,QAASzC,OAEpDe,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAEnB,UACvBC,EAAAA,EAAAA,KAACuB,IAAe,CAACC,WAAYC,IAAYC,QAASlC,cAM9D,C","sources":["pages/Analysis/FinancialManagement/Budget/Forecasting.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { Box, Typography, Grid, Card, CardContent, Container } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Backdrop from '@mui/material/Backdrop';\r\n\r\nexport default function ForecastingAnalysisDashboard({ fetchItems }) {\r\n  const [forecastData, setForecastData] = useState([]);\r\n  const [statusDistribution, setStatusDistribution] = useState([]);\r\n  const [varianceData, setVarianceData] = useState([]);\r\n  const [totalForecastAmount, setTotalForecastAmount] = useState(0);\r\n  const [totalActualAmount, setTotalActualAmount] = useState(0);\r\n  const [accuracyPercentage, setAccuracyPercentage] = useState(0);\r\n  const [ecoContributionTotal, setEcoContributionTotal] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const data = await fetchItems();\r\n      setForecastData(data);\r\n      processForecastData(data);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [fetchItems]);\r\n\r\n  const processForecastData = (data) => {\r\n    // Status Distribution\r\n    const statusCounts = data.reduce((acc, forecast) => {\r\n      acc[forecast.status] = (acc[forecast.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setStatusDistribution(Object.keys(statusCounts).map(key => ({\r\n      name: key,\r\n      y: statusCounts[key],\r\n    })));\r\n\r\n    // Variance Data\r\n    const varianceCounts = data.reduce((acc, forecast) => {\r\n      const variance = Number(forecast.actualAmount) - Number(forecast.forecastAmount);\r\n      acc[variance] = (acc[variance] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    setVarianceData(Object.keys(varianceCounts).map(key => ({\r\n      name: `Variance: ${key}`,\r\n      y: varianceCounts[key],\r\n    })));\r\n\r\n    // Total Forecast and Actual Amounts\r\n    const totals = data.reduce(\r\n      (acc, forecast) => {\r\n        acc.forecastAmount += Number(forecast.forecastAmount) || 0;\r\n        acc.actualAmount += Number(forecast.actualAmount) || 0;\r\n        acc.ecoContribution += Number(forecast.ecoContribution) || 0;\r\n        acc.accuracy += Number(forecast.accuracyPercentage) || 0;\r\n        return acc;\r\n      },\r\n      { forecastAmount: 0, actualAmount: 0, ecoContribution: 0, accuracy: 0 }\r\n    );\r\n\r\n    setTotalForecastAmount(totals.forecastAmount);\r\n    setTotalActualAmount(totals.actualAmount);\r\n    setAccuracyPercentage(totals.accuracy / data.length);\r\n    setEcoContributionTotal(totals.ecoContribution);\r\n  };\r\n\r\n  const statusChartOptions = {\r\n    chart: { type: 'pie' },\r\n    title: { text: 'Status Distribution' },\r\n    series: [{ name: 'Status', colorByPoint: true, data: statusDistribution }],\r\n  };\r\n\r\n  const varianceChartOptions = {\r\n    chart: { type: 'column' },\r\n    title: { text: 'Forecast vs Actual Variance' },\r\n    series: [{ name: 'Variance', data: varianceData }],\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ paddingTop: 3, paddingBottom: 7 }}>\r\n      <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Box sx={{ padding: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Forecasting Analysis Dashboard\r\n        </Typography>\r\n        <Grid container spacing={4}>\r\n          {/* KPI Section */}\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Forecast Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"green\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalForecastAmount.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">Total forecasted amount across all departments.</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Total Actual Amount</Typography>\r\n                <Typography variant=\"h4\" color=\"blue\" sx={{ fontWeight: 'bold' }}>\r\n                  ${totalActualAmount.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">Total actual amount spent across all departments.</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Accuracy Percentage</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  {accuracyPercentage.toFixed(2)}%\r\n                </Typography>\r\n                <Typography variant=\"body2\">Average forecast accuracy across all departments.</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\">Eco Contribution</Typography>\r\n                <Typography variant=\"h4\" color=\"orange\" sx={{ fontWeight: 'bold' }}>\r\n                  ${ecoContributionTotal.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">Total eco-tax contributions (French-specific).</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Chart Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={statusChartOptions} />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <HighchartsReact highcharts={Highcharts} options={varianceChartOptions} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["ForecastingAnalysisDashboard","_ref","fetchItems","forecastData","setForecastData","useState","statusDistribution","setStatusDistribution","varianceData","setVarianceData","totalForecastAmount","setTotalForecastAmount","totalActualAmount","setTotalActualAmount","accuracyPercentage","setAccuracyPercentage","ecoContributionTotal","setEcoContributionTotal","loading","setLoading","useEffect","async","data","processForecastData","fetchData","statusCounts","reduce","acc","forecast","status","Object","keys","map","key","name","y","varianceCounts","variance","Number","actualAmount","forecastAmount","totals","ecoContribution","accuracy","length","statusChartOptions","chart","type","title","text","series","colorByPoint","varianceChartOptions","_jsxs","Container","maxWidth","sx","paddingTop","paddingBottom","children","_jsx","Backdrop","color","zIndex","theme","drawer","open","CircularProgress","Box","padding","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","fontWeight","toFixed","HighchartsReact","highcharts","Highcharts","options"],"sourceRoot":""}